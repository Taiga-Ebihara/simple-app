export default [
  {
      "rendered_body": "\n<h1>\n<span id=\"経緯\" class=\"fragment\"></span><a href=\"#%E7%B5%8C%E7%B7%AF\"><i class=\"fa fa-link\"></i></a>経緯</h1>\n\n<p>ほぼ題名通りですが、Flutterで<a href=\"https://pub.dev/packages/path/install\" rel=\"nofollow noopener\" target=\"_blank\">path</a>をインポートしたら、これまでエラーが出ていなかった一文、<code>InputDialog(context);</code>の<code>context</code>に以下のようなエラーが出現。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>The argument type 'Context' can't be assigned to the parameter type 'BuildContext'.dart(argument_type_not_assignable)\nContext context\npackage:path/path.dart\n\nThe system path context.\n\nThis differs from a context created with [new Context] in that its [Context.current] is always the current working directory, rather than being set once when the context is created.\n</code></pre></div></div>\n\n<p>pathのインポート文<code>import 'package:path/path.dart';</code>を消したら、エラーも消えるので、pathが悪さをしてるんだろうなぁという推測はできるものの、何をどうして良いのか分からず、1日を無駄にしたので、解決法を記事にします。</p>\n\n<h1>\n<span id=\"解決法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決法</h1>\n\n<p>1.　インポート文を<br>\n<code>import 'package:path/path.dart';</code><br>\nから<br>\n<code>import 'package:path/path.dart' as path;</code><br>\nのように変更。</p>\n\n<p>2.　pathパッケージを使うものは<code>path.xxx</code>のように、先頭に<code>path.</code>を付けて記述する。<br>\n例えば、<br>\n<code>basename(file.path)</code><br>\nなら、<br>\n<code>path.basename(file.path)</code><br>\nのように記述。</p>\n\n<p>これでエラーは消える。<br>\n簡単な対応でエラーが消えるのですが、日本語記事が少なかったこと、私のようなFlutter初心者であれば自力解決が難しいと思ったこと、私自身が一日を無駄にしたことから記事にしました。</p>\n\n<h1>\n<span id=\"参考にしたサイト\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83%E3%81%AB%E3%81%97%E3%81%9F%E3%82%B5%E3%82%A4%E3%83%88\"><i class=\"fa fa-link\"></i></a>参考にしたサイト</h1>\n\n<p><a href=\"https://stackoverflow.com/questions/54417811/flutter-i-get-error-when-i-add-import-packagepath-path-dart\" rel=\"nofollow noopener\" target=\"_blank\">STACK OVERFLOW Flutter - I get error when i add import 'package:path/path.dart'</a></p>\n",
      "body": "# 経緯\nほぼ題名通りですが、Flutterで[path](https://pub.dev/packages/path/install)をインポートしたら、これまでエラーが出ていなかった一文、`InputDialog(context);`の`context`に以下のようなエラーが出現。\n\n```\nThe argument type 'Context' can't be assigned to the parameter type 'BuildContext'.dart(argument_type_not_assignable)\nContext context\npackage:path/path.dart\n\nThe system path context.\n\nThis differs from a context created with [new Context] in that its [Context.current] is always the current working directory, rather than being set once when the context is created.\n```\n\npathのインポート文`import 'package:path/path.dart';`を消したら、エラーも消えるので、pathが悪さをしてるんだろうなぁという推測はできるものの、何をどうして良いのか分からず、1日を無駄にしたので、解決法を記事にします。\n\n# 解決法\n1.　インポート文を\n`import 'package:path/path.dart';`\nから\n`import 'package:path/path.dart' as path;`\nのように変更。\n\n2.　pathパッケージを使うものは`path.xxx`のように、先頭に`path.`を付けて記述する。\n例えば、\n`basename(file.path)`\nなら、\n`path.basename(file.path)`\nのように記述。\n\nこれでエラーは消える。\n簡単な対応でエラーが消えるのですが、日本語記事が少なかったこと、私のようなFlutter初心者であれば自力解決が難しいと思ったこと、私自身が一日を無駄にしたことから記事にしました。\n\n# 参考にしたサイト\n[STACK OVERFLOW Flutter - I get error when i add import 'package:path/path.dart'](https://stackoverflow.com/questions/54417811/flutter-i-get-error-when-i-add-import-packagepath-path-dart)\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2021-09-30T00:51:03+09:00",
      "group": null,
      "id": "70ab4e8e145318e72bd2",
      "likes_count": 0,
      "private": false,
      "reactions_count": 0,
      "tags": [
          {
              "name": "Flutter",
              "versions": []
          }
      ],
      "title": "FlutterでPathをインポートした時、contextにエラーが出る時の解決法",
      "updated_at": "2021-09-30T00:51:03+09:00",
      "url": "https://qiita.com/ikeguma_Na/items/70ab4e8e145318e72bd2",
      "user": {
          "description": "大学院生。\r\n普段の研究とか趣味で作ったソースコードや環境設定のうち、誰かが使えそうなものを掲載する予定です。\r\nNoteの方はQiitaに掲載するほどでもない話とかを書くかもしれない。ただ、運用する中でもっと効果的な運用方法を見つけたら変更します。",
          "facebook_id": "",
          "followees_count": 0,
          "followers_count": 1,
          "github_login_name": null,
          "id": "ikeguma_Na",
          "items_count": 5,
          "linkedin_id": "",
          "location": "",
          "name": "",
          "organization": "",
          "permanent_id": 528682,
          "profile_image_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/528682/c5964b12146663d7d8853b4d788a4e8f6ec7cca1/x_large.png?1626532957",
          "team_only": false,
          "twitter_screen_name": "ikeguma_Na",
          "website_url": "https://note.com/ikegumana"
      },
      "page_views_count": null,
      "team_membership": null
  },
  {
      "rendered_body": "\n<h1>\n<span id=\"目次\" class=\"fragment\"></span><a href=\"#%E7%9B%AE%E6%AC%A1\"><i class=\"fa fa-link\"></i></a>目次</h1>\n\n<p>・おさわりお兄さん（以下、おさ兄）の経歴について<br>\n・想定読者<br>\n・Reactのチュートリアルを終えて<br>\n・お兄さんの目標<br>\n・ホームページ的なものを作ってみよう（今ここ）</p>\n\n<h2>\n<span id=\"おさわりお兄さんの経歴について\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%81%95%E3%82%8F%E3%82%8A%E3%81%8A%E5%85%84%E3%81%95%E3%82%93%E3%81%AE%E7%B5%8C%E6%AD%B4%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>おさわりお兄さんの経歴について</h2>\n\n<p>・システム会社勤務のお兄さん<br>\n・Java畑でSpring Frameworkで育ったJava脳の持ち主<br>\n・JavaとちょっとばかりのWebシステム作成に付随する知識アリマスタブン</p>\n\n<h2>\n<span id=\"想定読者\" class=\"fragment\"></span><a href=\"#%E6%83%B3%E5%AE%9A%E8%AA%AD%E8%80%85\"><i class=\"fa fa-link\"></i></a>想定読者</h2>\n\n<p>・おさ兄同様Reactわかりません！やりはじめます！っていう同志たち<br>\n・おいおい見ちゃいられねえヒヨコさんだなぁ！っていうマウント兄貴<br>\n・ふふふ、頑張りなさい、、、、！っていう聖人兄貴</p>\n\n<h2>\n<span id=\"reactのチュートリアルを終えて\" class=\"fragment\"></span><a href=\"#react%E3%81%AE%E3%83%81%E3%83%A5%E3%83%BC%E3%83%88%E3%83%AA%E3%82%A2%E3%83%AB%E3%82%92%E7%B5%82%E3%81%88%E3%81%A6\"><i class=\"fa fa-link\"></i></a>Reactのチュートリアルを終えて</h2>\n\n<p>ごめん、ほんとは終えてねぇんだ。。。<br>\n「タイムトラベル機能の追加」からやめた<br>\nだって、ゲーム機能作りこんでいく雰囲気したから、<br>\n別にゲーム機能作りに詳しくなりたんじゃないんよ。</p>\n\n<h2>\n<span id=\"お兄さんの目標\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E5%85%84%E3%81%95%E3%82%93%E3%81%AE%E7%9B%AE%E6%A8%99\"><i class=\"fa fa-link\"></i></a>お兄さんの目標</h2>\n\n<p>おさ兄はWebシステム、Web Appをツクレルヨウニナリタイデス・・・・<br>\n仕様とか要件とかないと、いざ作るぞ！ってなっても<br>\nさて、何作る？ってなりません？おさ兄はなります。<br>\nなのでいったんWebシステム、Web Appはこれ作るぜってなるまで<br>\nホームページ的なものをReactで作ってみようと思ってみました。まる。</p>\n\n<h2>\n<span id=\"ホームページ的なものを作ってみよう今ここ\" class=\"fragment\"></span><a href=\"#%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8%E7%9A%84%E3%81%AA%E3%82%82%E3%81%AE%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86%E4%BB%8A%E3%81%93%E3%81%93\"><i class=\"fa fa-link\"></i></a>ホームページ的なものを作ってみよう（今ここ）</h2>\n\n<h3>\n<span id=\"準備\" class=\"fragment\"></span><a href=\"#%E6%BA%96%E5%82%99\"><i class=\"fa fa-link\"></i></a>準備</h3>\n\n<p>チュートリアルから手順を拝借して<br>\n<code>npx create-react-app my-app</code><br>\nを任意のディレクトリで実行<br>\n*<code>my-appp</code>は好きな名前でええんやで。ディレクトリ名になるんやで。<br>\nsrc配下をお掃除しーの、いざ！！</p>\n\n<p>ホームページ的なものを作る入口といえば<br>\n<code>index.html</code><br>\nですよね。<br>\n(サーバーの作り方とか詳しいチューニングについては<br>\nまだおさ兄はｲｲﾃﾞｽ、ｵﾅｶｲｯﾊﾟｲ。。。)</p>\n\n<p>チュートリアルでは作成せんかったけど、作ったろ！<strong>←ｺﾚｶﾞﾏﾁｶﾞｴﾉﾊｼﾞﾏﾘ</strong><br>\nおさ兄は<code>src</code>配下に<code>index.js</code>とかと同じテンションで作って<br>\nhtml内に<code>&lt;div id=\"Koko\" /&gt;</code>みたいにして<br>\nチュートリアルで修めた感じで<code>indes.js</code>に以下のコードを書いたのよ。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>ReactDOM.render(\n  &lt;Koko /&gt;,\n  document.getElementById('Koko')\n);\n</code></pre></div></div>\n\n<p>そしたら、案の定エラーだったわけです。orz<br>\n結論いうと、<strong>ｺﾚｶﾞﾏﾁｶﾞｴﾉﾊｼﾞﾏﾘ</strong>で示したように<br>\nsrc配下のindex.htmlなんかReactさんは<strong>見ちゃいなかった</strong>のよ。<br>\nindex.htmlは自分で作らなくても<code>publi</code>配下に<br>\nちゃっかり最初のコマンドで作られてくれていたのよね。<br>\nだからそこのコードを直さねば、私のjstx？っていうの？は<br>\n反映されることなんてなかったということ。<br>\n<em>以下、ディレクトリ構成抜粋</em></p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>PUBLIC\n    favicon.ico\n    index.html　←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←\n    logo192.png\n    logo512.png\n    manifest.json\n    robots.txt\nSRC\n│  index.css\n│  index.js\n│\n└─component　←おさ兄が自分で作った\n        explore.js \n        top.js\n</code></pre></div></div>\n\n<p><code>public</code>配下の<code>index.html</code>を修正することで<br>\n自分が定義したソースが反映されました！ｲｴｲ</p>\n\n<p>そこからは階層的にComponentって言えばええんか？を<br>\n呼び出せる感じにもってきたとこです。<br>\nもうちょい勉強したらGitHub Pagesとやらで公開できるらしいので<br>\n楽しみです。<br>\nただ、あくまで最終目的はWebシステム Appの作成なので<br>\nFormとかデータの受け渡しとかRDBとかとのつなげ方とか<br>\n勉強していくつもりですたい。<br>\nJavaでいうセッションとかどーなるの、とか。<br>\n課題はいくつかあるだろうから初心者に優しい記事があればご紹介いただければ<br>\nうれしく存じます。おなしゃｓｓっす。</p>\n\n<h2>\n<span id=\"今後の課題まとめ\" class=\"fragment\"></span><a href=\"#%E4%BB%8A%E5%BE%8C%E3%81%AE%E8%AA%B2%E9%A1%8C%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>今後の課題まとめ</h2>\n\n<p>・いい感じのComponent？つまるところ部品の使いまわし、分割とかの模索<br>\n・RDBとの接続方法調査<br>\n・Cookieとかセッションとか管理どなってるの調査<br>\n・データの受け渡し、持続方法の調査<br>\n※SPA（シングルページアプリ）ならそも持続なんぞないんか？<br>\nひらきっぱでなんか上手いことやってるからええんか？ページ遷移とかReactでは考慮せんのか？<br>\n・コードテスト（UT）の仕方の調査<br>\n※普通どこテストすんの？ビジネスロジック書くようなったらjstx？js?部分が対象になるんか？</p>\n\n<h2>\n<span id=\"参考url\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83url\"><i class=\"fa fa-link\"></i></a>参考URL</h2>\n\n<p><a href=\"https://ja.reactjs.org/tutorial/tutorial.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://ja.reactjs.org/tutorial/tutorial.html</a><br>\n階層的にComponentどやって呼び出すねん！って思って人様のGithub覗きました。<br>\n参考になったので紹介しておきますね。<br>\n<a href=\"https://github.com/kenmori/React-Sample\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/kenmori/React-Sample</a></p>\n\n<p>以上、こんな適当にかいたような記事をみてくださり、まことにありがとうございます。<br>\n一人でも、同じ感じの人がいらっしゃいましたら気軽に話し合えれば<br>\n楽しくモチベ継続になるので宜しくお願い致します。</p>\n",
      "body": "#目次\n・おさわりお兄さん（以下、おさ兄）の経歴について\n・想定読者\n・Reactのチュートリアルを終えて\n・お兄さんの目標\n・ホームページ的なものを作ってみよう（今ここ）\n\n##おさわりお兄さんの経歴について\n・システム会社勤務のお兄さん\n・Java畑でSpring Frameworkで育ったJava脳の持ち主\n・JavaとちょっとばかりのWebシステム作成に付随する知識アリマスタブン\n\n##想定読者\n・おさ兄同様Reactわかりません！やりはじめます！っていう同志たち\n・おいおい見ちゃいられねえヒヨコさんだなぁ！っていうマウント兄貴\n・ふふふ、頑張りなさい、、、、！っていう聖人兄貴\n\n##Reactのチュートリアルを終えて\nごめん、ほんとは終えてねぇんだ。。。\n「タイムトラベル機能の追加」からやめた\nだって、ゲーム機能作りこんでいく雰囲気したから、\n別にゲーム機能作りに詳しくなりたんじゃないんよ。\n\n##お兄さんの目標\nおさ兄はWebシステム、Web Appをツクレルヨウニナリタイデス・・・・\n仕様とか要件とかないと、いざ作るぞ！ってなっても\nさて、何作る？ってなりません？おさ兄はなります。\nなのでいったんWebシステム、Web Appはこれ作るぜってなるまで\nホームページ的なものをReactで作ってみようと思ってみました。まる。\n\n##ホームページ的なものを作ってみよう（今ここ）\n\n###準備\nチュートリアルから手順を拝借して\n```npx create-react-app my-app```\nを任意のディレクトリで実行\n*```my-appp```は好きな名前でええんやで。ディレクトリ名になるんやで。\nsrc配下をお掃除しーの、いざ！！\n\nホームページ的なものを作る入口といえば\n```index.html```\nですよね。\n(サーバーの作り方とか詳しいチューニングについては\nまだおさ兄はｲｲﾃﾞｽ、ｵﾅｶｲｯﾊﾟｲ。。。)\n\n\n\nチュートリアルでは作成せんかったけど、作ったろ！__←ｺﾚｶﾞﾏﾁｶﾞｴﾉﾊｼﾞﾏﾘ__\nおさ兄は```src```配下に```index.js```とかと同じテンションで作って\nhtml内に```<div id=\"Koko\" />```みたいにして\nチュートリアルで修めた感じで```indes.js```に以下のコードを書いたのよ。\n\n```\nReactDOM.render(\n  <Koko />,\n  document.getElementById('Koko')\n);\n```\nそしたら、案の定エラーだったわけです。orz\n結論いうと、__ｺﾚｶﾞﾏﾁｶﾞｴﾉﾊｼﾞﾏﾘ__で示したように\nsrc配下のindex.htmlなんかReactさんは__見ちゃいなかった__のよ。\nindex.htmlは自分で作らなくても```publi```配下に\nちゃっかり最初のコマンドで作られてくれていたのよね。\nだからそこのコードを直さねば、私のjstx？っていうの？は\n反映されることなんてなかったということ。\n_以下、ディレクトリ構成抜粋_\n\n```\nPUBLIC\n    favicon.ico\n    index.html　←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←\n    logo192.png\n    logo512.png\n    manifest.json\n    robots.txt\nSRC\n│  index.css\n│  index.js\n│\n└─component　←おさ兄が自分で作った\n        explore.js \n        top.js\n```\n\n``public``配下の``index.html``を修正することで\n自分が定義したソースが反映されました！ｲｴｲ\n\nそこからは階層的にComponentって言えばええんか？を\n呼び出せる感じにもってきたとこです。\nもうちょい勉強したらGitHub Pagesとやらで公開できるらしいので\n楽しみです。\nただ、あくまで最終目的はWebシステム Appの作成なので\nFormとかデータの受け渡しとかRDBとかとのつなげ方とか\n勉強していくつもりですたい。\nJavaでいうセッションとかどーなるの、とか。\n課題はいくつかあるだろうから初心者に優しい記事があればご紹介いただければ\nうれしく存じます。おなしゃｓｓっす。\n\n##今後の課題まとめ\n・いい感じのComponent？つまるところ部品の使いまわし、分割とかの模索\n・RDBとの接続方法調査\n・Cookieとかセッションとか管理どなってるの調査\n・データの受け渡し、持続方法の調査\n※SPA（シングルページアプリ）ならそも持続なんぞないんか？\nひらきっぱでなんか上手いことやってるからええんか？ページ遷移とかReactでは考慮せんのか？\n・コードテスト（UT）の仕方の調査\n※普通どこテストすんの？ビジネスロジック書くようなったらjstx？js?部分が対象になるんか？\n\n\n##参考URL\nhttps://ja.reactjs.org/tutorial/tutorial.html\n階層的にComponentどやって呼び出すねん！って思って人様のGithub覗きました。\n参考になったので紹介しておきますね。\nhttps://github.com/kenmori/React-Sample\n\n\n以上、こんな適当にかいたような記事をみてくださり、まことにありがとうございます。\n一人でも、同じ感じの人がいらっしゃいましたら気軽に話し合えれば\n楽しくモチベ継続になるので宜しくお願い致します。\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2021-09-30T00:49:41+09:00",
      "group": null,
      "id": "a0e93631c4e3b56649d7",
      "likes_count": 0,
      "private": false,
      "reactions_count": 0,
      "tags": [
          {
              "name": "初心者",
              "versions": []
          },
          {
              "name": "初心者向け",
              "versions": []
          },
          {
              "name": "React",
              "versions": []
          }
      ],
      "title": "はじめてのReactおさわりお兄さんの成長記録#1",
      "updated_at": "2021-09-30T00:49:41+09:00",
      "url": "https://qiita.com/T-AKIRA/items/a0e93631c4e3b56649d7",
      "user": {
          "description": null,
          "facebook_id": null,
          "followees_count": 0,
          "followers_count": 0,
          "github_login_name": null,
          "id": "T-AKIRA",
          "items_count": 4,
          "linkedin_id": null,
          "location": null,
          "name": "",
          "organization": null,
          "permanent_id": 256347,
          "profile_image_url": "https://secure.gravatar.com/avatar/b0f5c134a354b9a1320256133b85b280",
          "team_only": false,
          "twitter_screen_name": null,
          "website_url": null
      },
      "page_views_count": null,
      "team_membership": null
  },
  {
      "rendered_body": "\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p>こんにちは。<br>\n最近では、LINE公式アカウントを利用している事業者が非常に多くなってきました。<br>\nLINE公式アカウントは、Web上の管理画面で行えることも非常に多いのですが、<br>\nAPIを利用するとにより、より柔軟でユーザーフレンドリーなサービス提供を行うことができます。</p>\n\n<p>本日は、APIを利用したLINE公式アカウントでのメッセージ送信の基礎について紹介します。</p>\n\n<h1>\n<span id=\"line公式アカウントのメッセージについて\" class=\"fragment\"></span><a href=\"#line%E5%85%AC%E5%BC%8F%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%81%AE%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>LINE公式アカウントのメッセージについて</h1>\n\n<p>LINE公式アカウントのAPIを利用したメッセージの送信には、複数のメッセージタイプが利用可能ですが、最も柔軟なメッセージとして<a href=\"https://developers.line.biz/ja/docs/messaging-api/using-flex-messages/\" rel=\"nofollow noopener\" target=\"_blank\">Flex Message</a>を利用することができます。</p>\n\n<p>例えば、このようなメッセージを送信したい場合は、<br>\n<a href=\"https://camo.qiitausercontent.com/1422dc71dcb143092f39b590701f8a3ce01a4d89/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3231303938332f38343234383334302d633732302d653238382d626532312d6234656662363861613231392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F210983%2F84248340-c720-e288-be21-b4efb68aa219.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=bcd24f84b8fc986f87e4c08473b606f6\" width=\"300\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/210983/84248340-c720-e288-be21-b4efb68aa219.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F210983%2F84248340-c720-e288-be21-b4efb68aa219.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7d138edc33ae2c13a23ffdca2a25ee46 1x\" loading=\"lazy\"></a></p>\n\n<p>以下のようなJSONデータとなります。<br>\nメッセージ内容はシンプルですが、JSONで見てみるとけっこう情報量が多く感じます。</p>\n\n<div class=\"code-frame\" data-lang=\"json\"><div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"bubble\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"header\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"box\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"layout\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"vertical\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"flex\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"backgroundColor\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"#7C3AED\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"contents\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n      </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"box\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"layout\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"horizontal\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"contents\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n          </span><span class=\"p\">{</span><span class=\"w\">\n            </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"text\"</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nl\">\"text\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"サンプルメッセージ\"</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nl\">\"weight\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"bold\"</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nl\">\"size\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"lg\"</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nl\">\"color\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"#FFFFFFFF\"</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nl\">\"align\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"center\"</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nl\">\"wrap\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nl\">\"contents\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\">\n          </span><span class=\"p\">}</span><span class=\"w\">\n        </span><span class=\"p\">]</span><span class=\"w\">\n      </span><span class=\"p\">}</span><span class=\"w\">\n    </span><span class=\"p\">]</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n  </span><span class=\"nl\">\"body\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"box\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"layout\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"vertical\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"spacing\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"md\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"contents\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n      </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"box\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"layout\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"vertical\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"spacing\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"xs\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"paddingBottom\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"md\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"contents\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n          </span><span class=\"p\">{</span><span class=\"w\">\n            </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"text\"</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nl\">\"text\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"これはサンプルです\"</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nl\">\"weight\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"bold\"</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nl\">\"size\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"lg\"</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nl\">\"wrap\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nl\">\"contents\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\">\n          </span><span class=\"p\">},</span><span class=\"w\">\n          </span><span class=\"p\">{</span><span class=\"w\">\n            </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"box\"</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nl\">\"layout\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"vertical\"</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nl\">\"paddingTop\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"lg\"</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nl\">\"paddingBottom\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"lg\"</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nl\">\"contents\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n              </span><span class=\"p\">{</span><span class=\"w\">\n                </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"text\"</span><span class=\"p\">,</span><span class=\"w\">\n                </span><span class=\"nl\">\"text\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"サンプルメッセージです。\"</span><span class=\"p\">,</span><span class=\"w\">\n                </span><span class=\"nl\">\"size\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"sm\"</span><span class=\"p\">,</span><span class=\"w\">\n                </span><span class=\"nl\">\"wrap\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n                </span><span class=\"nl\">\"contents\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\">\n              </span><span class=\"p\">}</span><span class=\"w\">\n            </span><span class=\"p\">]</span><span class=\"w\">\n          </span><span class=\"p\">},</span><span class=\"w\">\n          </span><span class=\"p\">{</span><span class=\"w\">\n            </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"button\"</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nl\">\"action\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n              </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"uri\"</span><span class=\"p\">,</span><span class=\"w\">\n              </span><span class=\"nl\">\"label\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"すごいボタン\"</span><span class=\"p\">,</span><span class=\"w\">\n              </span><span class=\"nl\">\"uri\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"https://linecorp.com\"</span><span class=\"w\">\n            </span><span class=\"p\">},</span><span class=\"w\">\n            </span><span class=\"nl\">\"style\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"primary\"</span><span class=\"w\">\n          </span><span class=\"p\">}</span><span class=\"w\">\n        </span><span class=\"p\">]</span><span class=\"w\">\n      </span><span class=\"p\">}</span><span class=\"w\">\n    </span><span class=\"p\">]</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<h1>\n<span id=\"フレックスメッセージを作成する\" class=\"fragment\"></span><a href=\"#%E3%83%95%E3%83%AC%E3%83%83%E3%82%AF%E3%82%B9%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>フレックスメッセージを作成する</h1>\n\n<p>フレックスメッセージは、柔軟とはいえ、一から自分でJSONを記述していくのはとても大変なので、公式に2つの便利ツールが用意されています。</p>\n\n<h2>\n<span id=\"flex-message-simulator\" class=\"fragment\"></span><a href=\"#flex-message-simulator\"><i class=\"fa fa-link\"></i></a>Flex Message Simulator</h2>\n\n<p><a href=\"https://developers.line.biz/flex-simulator/\" rel=\"nofollow noopener\" target=\"_blank\">Flex Message Simulator</a>は、Web上のGUIでフレックスメッセージを作成できるツールとなっています。<br>\n利用するにはLINEビジネスIDが必要となります。</p>\n\n<p>作成したメッセージのJSONデータをコピーすることができるので、<br>\nそのままAPIを利用してメッセージ送信が可能となっています。<br>\n複数のテンプレートも用意されているので、<br>\n自分が作成するイメージに近いテンプレートをもとに作成していくのがおすすめです。</p>\n\n<p>最近では、このシミュレーターから自分のLINEアカウントに対して、作成したメッセージをテスト送信することも可能になりました。<br>\nちょっとしたメッセージをさっと作成するのにおすすめです。</p>\n\n<h2>\n<span id=\"line-bot-designer\" class=\"fragment\"></span><a href=\"#line-bot-designer\"><i class=\"fa fa-link\"></i></a>LINE Bot Designer</h2>\n\n<p><a href=\"https://developers.line.biz/ja/services/bot-designer/\" rel=\"nofollow noopener\" target=\"_blank\">LINE Bot Designer</a>はローカルのアプリケーションで、フレックスメッセージだけでなくLINE公式アカウントで扱うBotなどのシナリオ全体を作成できるツールとなっています。<br>\nこちらは、アカウント登録なく利用することが可能です。</p>\n\n<p>Flex Message Simulatorとは異なり、作成したメッセージ全体や各種パーツのコピペができたり、プレビューされたメッセージの編集したい箇所をクリックすると、自動で該当フォームに遷移してくれるなど、かなり使い勝手がいいです。</p>\n\n<p>ファイルとしても保存できるので、複数のメッセージを取り扱う場合はこちらがおすすめです。</p>\n\n<h1>\n<span id=\"チャネルアクセストークンを発行する\" class=\"fragment\"></span><a href=\"#%E3%83%81%E3%83%A3%E3%83%8D%E3%83%AB%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%83%88%E3%83%BC%E3%82%AF%E3%83%B3%E3%82%92%E7%99%BA%E8%A1%8C%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>チャネルアクセストークンを発行する</h1>\n\n<p><a href=\"https://developers.line.biz/ja/docs/messaging-api/channel-access-tokens/\" rel=\"nofollow noopener\" target=\"_blank\">チャネルアクセストークン</a>には、大きく長期のトークンと短期のトークンの2種類がありますが、特別な理由がない限りは、セキュリティ面より、短期のトークンを利用することをおすすめします。</p>\n\n<h1>\n<span id=\"送り先のline-idを取得する\" class=\"fragment\"></span><a href=\"#%E9%80%81%E3%82%8A%E5%85%88%E3%81%AEline-id%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>送り先のLINE IDを取得する</h1>\n\n<p>LINE公式アカウントのAPIは、送信先としてLINE IDを指定する必要があります。<br>\nこのLINE IDは、LINEアプリで各自が設定しているIDとは異なり、<br>\nLINE公式アカウントごとに相手を識別するための一意なIDとなっています。<br>\nよって、全く同じ人でもLINE公式アカウントごとにIDは異なります。</p>\n\n<p>まずは、<a href=\"https://developers.line.biz/ja/reference/messaging-api/#get-follower-ids\" rel=\"nofollow noopener\" target=\"_blank\">ユーザーリスト</a>を取得する必要があります。LINE公式アカウントを友だち追加してくれたLINE IDの一覧を取得します。ただし、この方法は<a href=\"https://www.linebiz.com/jp/service/line-official-account/verified-account/\" rel=\"nofollow noopener\" target=\"_blank\">認証済アカウント</a>である必要があります。</p>\n\n<div class=\"code-frame\" data-lang=\"sh\"><div class=\"highlight\"><pre><code>curl <span class=\"nt\">-H</span> <span class=\"s1\">'Authorization: Bearer {チャネルアクセストークン}'</span> https://api.line.me/v2/bot/followers/ids\n\n<span class=\"o\">{</span>\n  <span class=\"s2\">\"userIds\"</span>: <span class=\"o\">[</span>\n    <span class=\"s2\">\"xxxxx\"</span>,\n    <span class=\"s2\">\"yyyyy\"</span>,\n    ...\n  <span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>さらにLINE IDが誰を指しているのかを知るには、別途<a href=\"https://developers.line.biz/ja/reference/messaging-api/#get-profile\" rel=\"nofollow noopener\" target=\"_blank\">プロフィール</a>を取得する必要があります。</p>\n\n<div class=\"code-frame\" data-lang=\"sh\"><div class=\"highlight\"><pre><code>curl <span class=\"nt\">-H</span> <span class=\"s1\">'Authorization: Bearer {チャネルアクセストークン}'</span>  https://api.line.me/v2/bot/profile/<span class=\"o\">{</span>LINE ID<span class=\"o\">}</span>\n\n<span class=\"o\">{</span>\n  <span class=\"s2\">\"userId\"</span>: <span class=\"s2\">\"xxxxx\"</span>,\n  <span class=\"s2\">\"displayName\"</span>: <span class=\"s2\">\"すごい人\"</span>,\n  <span class=\"s2\">\"pictureUrl\"</span>: <span class=\"s2\">\"URL\"</span>,\n  <span class=\"s2\">\"language\"</span>: <span class=\"s2\">\"ja\"</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<h1>\n<span id=\"メッセージを送信する\" class=\"fragment\"></span><a href=\"#%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%82%92%E9%80%81%E4%BF%A1%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>メッセージを送信する</h1>\n\n<p>LINE公式アカウントのAPIを利用してフレックスメッセージを送信する方法を紹介します。<br>\n今回はNode.jsのSDKを利用して送信しています。</p>\n\n<div class=\"code-frame\" data-lang=\"ts\"><div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Client</span><span class=\"p\">,</span> <span class=\"nx\">Message</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">@line/bot-sdk</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// 送りたい相手のLINE ID</span>\n<span class=\"kd\">const</span> <span class=\"nx\">lineId</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">xxxxx</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// 先ほどのサンプルメッセージ</span>\n<span class=\"kd\">const</span> <span class=\"nx\">message</span><span class=\"p\">:</span> <span class=\"nx\">Message</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">flex</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">altText</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">サンプルメッセージ</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">contents</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">bubble</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"p\">...</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// LINE公式アカウントの管理画面で発行したチャネルアクセストークン</span>\n<span class=\"kd\">const</span> <span class=\"nx\">channelAccessToken</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">xxxxxxxxxx</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// 送信！</span>\n<span class=\"kd\">const</span> <span class=\"nx\">client</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Client</span><span class=\"p\">({</span> <span class=\"nx\">channelAccessToken</span> <span class=\"p\">});</span>\n<span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">pushMessage</span><span class=\"p\">(</span><span class=\"nx\">lineId</span><span class=\"p\">,</span> <span class=\"nx\">message</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<h1>\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n\n<p>今回はAPIを利用したLINE公式アカウントを活用する、ごく簡単な例を紹介しました。<br>\n今度は、<a href=\"https://developers.line.biz/ja/docs/liff/overview/\" rel=\"nofollow noopener\" target=\"_blank\">LINE Front-end Framework(LIFF)</a>の活用やBot開発についてなど紹介したいと思います。</p>\n",
      "body": "# はじめに\nこんにちは。\n最近では、LINE公式アカウントを利用している事業者が非常に多くなってきました。\nLINE公式アカウントは、Web上の管理画面で行えることも非常に多いのですが、\nAPIを利用するとにより、より柔軟でユーザーフレンドリーなサービス提供を行うことができます。\n\n本日は、APIを利用したLINE公式アカウントでのメッセージ送信の基礎について紹介します。\n\n# LINE公式アカウントのメッセージについて\nLINE公式アカウントのAPIを利用したメッセージの送信には、複数のメッセージタイプが利用可能ですが、最も柔軟なメッセージとして[Flex Message](https://developers.line.biz/ja/docs/messaging-api/using-flex-messages/)を利用することができます。\n\n例えば、このようなメッセージを送信したい場合は、\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/210983/84248340-c720-e288-be21-b4efb68aa219.png\" width=\"300\">\n\n以下のようなJSONデータとなります。\nメッセージ内容はシンプルですが、JSONで見てみるとけっこう情報量が多く感じます。\n\n```json\n{\n  \"type\": \"bubble\",\n  \"header\": {\n    \"type\": \"box\",\n    \"layout\": \"vertical\",\n    \"flex\": 0,\n    \"backgroundColor\": \"#7C3AED\",\n    \"contents\": [\n      {\n        \"type\": \"box\",\n        \"layout\": \"horizontal\",\n        \"contents\": [\n          {\n            \"type\": \"text\",\n            \"text\": \"サンプルメッセージ\",\n            \"weight\": \"bold\",\n            \"size\": \"lg\",\n            \"color\": \"#FFFFFFFF\",\n            \"align\": \"center\",\n            \"wrap\": true,\n            \"contents\": []\n          }\n        ]\n      }\n    ]\n  },\n  \"body\": {\n    \"type\": \"box\",\n    \"layout\": \"vertical\",\n    \"spacing\": \"md\",\n    \"contents\": [\n      {\n        \"type\": \"box\",\n        \"layout\": \"vertical\",\n        \"spacing\": \"xs\",\n        \"paddingBottom\": \"md\",\n        \"contents\": [\n          {\n            \"type\": \"text\",\n            \"text\": \"これはサンプルです\",\n            \"weight\": \"bold\",\n            \"size\": \"lg\",\n            \"wrap\": true,\n            \"contents\": []\n          },\n          {\n            \"type\": \"box\",\n            \"layout\": \"vertical\",\n            \"paddingTop\": \"lg\",\n            \"paddingBottom\": \"lg\",\n            \"contents\": [\n              {\n                \"type\": \"text\",\n                \"text\": \"サンプルメッセージです。\",\n                \"size\": \"sm\",\n                \"wrap\": true,\n                \"contents\": []\n              }\n            ]\n          },\n          {\n            \"type\": \"button\",\n            \"action\": {\n              \"type\": \"uri\",\n              \"label\": \"すごいボタン\",\n              \"uri\": \"https://linecorp.com\"\n            },\n            \"style\": \"primary\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n# フレックスメッセージを作成する\nフレックスメッセージは、柔軟とはいえ、一から自分でJSONを記述していくのはとても大変なので、公式に2つの便利ツールが用意されています。\n\n## Flex Message Simulator\n[Flex Message Simulator](https://developers.line.biz/flex-simulator/)は、Web上のGUIでフレックスメッセージを作成できるツールとなっています。\n利用するにはLINEビジネスIDが必要となります。\n\n作成したメッセージのJSONデータをコピーすることができるので、\nそのままAPIを利用してメッセージ送信が可能となっています。\n複数のテンプレートも用意されているので、\n自分が作成するイメージに近いテンプレートをもとに作成していくのがおすすめです。\n\n最近では、このシミュレーターから自分のLINEアカウントに対して、作成したメッセージをテスト送信することも可能になりました。\nちょっとしたメッセージをさっと作成するのにおすすめです。\n\n## LINE Bot Designer\n[LINE Bot Designer](https://developers.line.biz/ja/services/bot-designer/)はローカルのアプリケーションで、フレックスメッセージだけでなくLINE公式アカウントで扱うBotなどのシナリオ全体を作成できるツールとなっています。\nこちらは、アカウント登録なく利用することが可能です。\n\nFlex Message Simulatorとは異なり、作成したメッセージ全体や各種パーツのコピペができたり、プレビューされたメッセージの編集したい箇所をクリックすると、自動で該当フォームに遷移してくれるなど、かなり使い勝手がいいです。\n\nファイルとしても保存できるので、複数のメッセージを取り扱う場合はこちらがおすすめです。\n\n# チャネルアクセストークンを発行する\n[チャネルアクセストークン](https://developers.line.biz/ja/docs/messaging-api/channel-access-tokens/)には、大きく長期のトークンと短期のトークンの2種類がありますが、特別な理由がない限りは、セキュリティ面より、短期のトークンを利用することをおすすめします。\n\n# 送り先のLINE IDを取得する\nLINE公式アカウントのAPIは、送信先としてLINE IDを指定する必要があります。\nこのLINE IDは、LINEアプリで各自が設定しているIDとは異なり、\nLINE公式アカウントごとに相手を識別するための一意なIDとなっています。\nよって、全く同じ人でもLINE公式アカウントごとにIDは異なります。\n\nまずは、[ユーザーリスト](https://developers.line.biz/ja/reference/messaging-api/#get-follower-ids)を取得する必要があります。LINE公式アカウントを友だち追加してくれたLINE IDの一覧を取得します。ただし、この方法は[認証済アカウント](https://www.linebiz.com/jp/service/line-official-account/verified-account/)である必要があります。\n\n```sh\ncurl -H 'Authorization: Bearer {チャネルアクセストークン}' https://api.line.me/v2/bot/followers/ids\n\n{\n  \"userIds\": [\n    \"xxxxx\",\n    \"yyyyy\",\n    ...\n  ]\n}\n```\n\nさらにLINE IDが誰を指しているのかを知るには、別途[プロフィール](https://developers.line.biz/ja/reference/messaging-api/#get-profile)を取得する必要があります。\n\n```sh\ncurl -H 'Authorization: Bearer {チャネルアクセストークン}'  https://api.line.me/v2/bot/profile/{LINE ID}\n\n{\n  \"userId\": \"xxxxx\",\n  \"displayName\": \"すごい人\",\n  \"pictureUrl\": \"URL\",\n  \"language\": \"ja\"\n}\n```\n\n# メッセージを送信する\nLINE公式アカウントのAPIを利用してフレックスメッセージを送信する方法を紹介します。\n今回はNode.jsのSDKを利用して送信しています。\n\n```ts\nimport { Client, Message } from '@line/bot-sdk';\n\n// 送りたい相手のLINE ID\nconst lineId = 'xxxxx';\n\n// 先ほどのサンプルメッセージ\nconst message: Message = {\n  type: 'flex',\n  altText: 'サンプルメッセージ',\n  contents: {\n    type: 'bubble',\n    ...\n  }\n};\n\n// LINE公式アカウントの管理画面で発行したチャネルアクセストークン\nconst channelAccessToken = 'xxxxxxxxxx';\n\n// 送信！\nconst client = new Client({ channelAccessToken });\nclient.pushMessage(lineId, message);\n```\n\n# おわりに\n今回はAPIを利用したLINE公式アカウントを活用する、ごく簡単な例を紹介しました。\n今度は、[LINE Front-end Framework(LIFF)](https://developers.line.biz/ja/docs/liff/overview/)の活用やBot開発についてなど紹介したいと思います。\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2021-09-30T00:44:19+09:00",
      "group": null,
      "id": "46d1d395f9d24baf3585",
      "likes_count": 0,
      "private": false,
      "reactions_count": 0,
      "tags": [
          {
              "name": "LINEmessagingAPI",
              "versions": []
          }
      ],
      "title": "APIを利用したLINE公式アカウントの簡単な活用方法",
      "updated_at": "2021-09-30T00:44:19+09:00",
      "url": "https://qiita.com/oganyanATF/items/46d1d395f9d24baf3585",
      "user": {
          "description": null,
          "facebook_id": null,
          "followees_count": 0,
          "followers_count": 0,
          "github_login_name": "oganyanATF",
          "id": "oganyanATF",
          "items_count": 6,
          "linkedin_id": null,
          "location": null,
          "name": "",
          "organization": null,
          "permanent_id": 210983,
          "profile_image_url": "https://avatars3.githubusercontent.com/u/29083978?v=4",
          "team_only": false,
          "twitter_screen_name": null,
          "website_url": null
      },
      "page_views_count": null,
      "team_membership": null
  },
  {
      "rendered_body": "\n<h1>\n<span id=\"1-物体検出におけるmapmeanaverageprecisionに関して\" class=\"fragment\"></span><a href=\"#1-%E7%89%A9%E4%BD%93%E6%A4%9C%E5%87%BA%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8Bmapmeanaverageprecision%E3%81%AB%E9%96%A2%E3%81%97%E3%81%A6\"><i class=\"fa fa-link\"></i></a>1. 物体検出におけるmAP(meanAveragePrecision)に関して</h1>\n\n<h2>\n<span id=\"11-目次\" class=\"fragment\"></span><a href=\"#11-%E7%9B%AE%E6%AC%A1\"><i class=\"fa fa-link\"></i></a>1.1. 目次</h2>\n\n<ul>\n<li>\n<a href=\"#1-%E7%89%A9%E4%BD%93%E6%A4%9C%E5%87%BA%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8Bmapmeanaverageprecision%E3%81%AB%E9%96%A2%E3%81%97%E3%81%A6\">1. 物体検出におけるmAP(meanAveragePrecision)に関して</a>\n\n<ul>\n<li><a href=\"#11-%E7%9B%AE%E6%AC%A1\">1.1. 目次</a></li>\n<li><a href=\"#12-%E7%B5%90%E8%AB%96\">1.2. 結論</a></li>\n<li><a href=\"#13-%E3%82%A4%E3%83%B3%E3%83%88%E3%83%AD%E3%83%80%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3\">1.3. イントロダクション</a></li>\n<li>\n<a href=\"#14-%E7%96%91%E5%95%8F%E7%82%B9%E3%81%A8%E8%AA%BF%E6%9F%BB\">1.4. 疑問点と調査</a>\n\n<ul>\n<li><a href=\"#141-ap50%E3%82%84ap75%E3%81%AA%E3%81%A9%E3%81%AE%E8%A4%87%E6%95%B0%E3%81%AE%E6%8C%87%E6%A8%99%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">1.4.1. AP@50やAP@75などの複数の指標について</a></li>\n<li><a href=\"#142-%E8%A4%87%E6%95%B0%E7%94%BB%E5%83%8F%E3%81%A7%E3%81%AEap%E3%81%AE%E8%A8%88%E7%AE%97\">1.4.2. 複数画像でのAPの計算</a></li>\n<li><a href=\"#143-%E6%AD%A3%E8%A7%A3%E3%83%9C%E3%83%83%E3%82%AF%E3%82%B9%E3%81%AE%EF%BC%91%E5%AF%BE%EF%BC%91%E5%AF%BE%E5%BF%9C%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">1.4.3. 正解ボックスの１対１対応について</a></li>\n</ul>\n</li>\n<li>\n<a href=\"#15-%E3%81%9D%E3%81%AE%E4%BB%96%E3%82%8F%E3%81%8B%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8\">1.5. その他わかったこと</a>\n\n<ul>\n<li><a href=\"#151-pycocotools%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9\">1.5.1. pycocotoolsの使い方</a></li>\n<li><a href=\"#152-ap%E3%81%AE%E8%A8%88%E7%AE%97%E6%96%B9%E6%B3%95pr%E6%9B%B2%E7%B7%9A%E3%81%AE%E9%9D%A2%E7%A9%8D%E3%81%AE%E8%A8%88%E7%AE%97%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">1.5.2. APの計算方法(PR曲線の面積の計算について)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"12-結論\" class=\"fragment\"></span><a href=\"#12-%E7%B5%90%E8%AB%96\"><i class=\"fa fa-link\"></i></a>1.2. 結論</h2>\n\n<p>物体検出の指標のmAPの解説記事読んだ。<br>\n次の疑問点が浮かんだので調べた。</p>\n\n<ul>\n<li>Q. AP@50やAP@75などの複数の指標があるのはなぜか？\n\n<ul>\n<li>A. タスクの厳しさによって指標を変えてるのではないかと考察。ちなみにPascalVOCデータセットだとAP@50で算出して、COCOデータセットだとAP@50からAP@95まで0.05刻みでAPを算出してAP@50とAP@75とすべてのAPの平均値を使っている。</li>\n</ul>\n</li>\n<li>Q. 複数画像の場合のAPの計算はどうなるのか？\n\n<ul>\n<li>A. 複数画像の場合は、すべての予測ボックスをTPとFPに振り分けてからPR曲線を作って計算している。</li>\n</ul>\n</li>\n<li>Q. 予測ボックスがTPに分類された時にIoUを計算した正解ボックスは再利用されるのか？（1対1対応なのか？）\n\n<ul>\n<li>A. １対１対応である。</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"13-イントロダクション\" class=\"fragment\"></span><a href=\"#13-%E3%82%A4%E3%83%B3%E3%83%88%E3%83%AD%E3%83%80%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3\"><i class=\"fa fa-link\"></i></a>1.3. イントロダクション</h2>\n\n<p>物体検出にはmAP(meanAveragePrecision)と呼ばれる指標が使われている。<br>\nこの指標は、物体検出モデルのPrecision(精度)とRecall(再現性)の両方を評価することができる指標である。<br>\n計算方法は、まずカテゴリ毎に予測ボックスをTPとFPに分類してPrecisionとRecallを計算する。<br>\nその結果をもとにPR曲線を作成し曲線の面積を計算することでカテゴリ毎のAPが得られる。<br>\nそしてカテゴリの種類で平均をとるという方法である。<br>\n予測ボックスをTPとFPに分類するには、予測ボックスと正解ボックスとの<code>IoU(Inter Of Union)</code>と呼ばれるスコアを算出して閾値を超えているモノをTP、超えていないモノをFPとする手法を用いる。<br>\nこれらのより具体的な解説に関しては以下の記事に記載しているのでココでは解説しない。</p>\n\n<ul>\n<li>AP計算とIoUの計算<a href=\"https://qiita.com/cv_carnavi/items/08e11426e2fac8433fed\" class=\"autolink\" id=\"reference-5e171c73e1aa48444132\">https://qiita.com/cv_carnavi/items/08e11426e2fac8433fed</a>\n</li>\n</ul>\n\n<p>この記事では、この指標の計算方法について疑問に思った点（当たり前すぎて解説していないのかもしれない）を記載していく。<br>\n疑問に思った点は以下である。</p>\n\n<ul>\n<li>AP@50やAP@75などの指標があるのはなぜか？</li>\n<li>APの計算は複数画像の場合どうなるのか？</li>\n<li>予測ボックスがTPに分類された時にIoUを計算した正解ボックスは再利用されるのか？（1対1対応なのか？）</li>\n</ul>\n\n<p>上記の疑問点に関して、物体検出の有名なデータセットである COCO Dataset のコンペティションの評価プログラムを見ながら適宜解決していく。<br>\n- <a href=\"https://cocodataset.org/#download\" rel=\"nofollow noopener\" target=\"_blank\">COCO Dataset</a><br>\n- <a href=\"https://github.com/cocodataset/cocoapi/tree/master/PythonAPI\" rel=\"nofollow noopener\" target=\"_blank\">pycocotools COCO Datasetの評価プログラム</a></p>\n\n<h2>\n<span id=\"14-疑問点と調査\" class=\"fragment\"></span><a href=\"#14-%E7%96%91%E5%95%8F%E7%82%B9%E3%81%A8%E8%AA%BF%E6%9F%BB\"><i class=\"fa fa-link\"></i></a>1.4. 疑問点と調査</h2>\n\n<h3>\n<span id=\"141-ap50やap75などの複数の指標について\" class=\"fragment\"></span><a href=\"#141-ap50%E3%82%84ap75%E3%81%AA%E3%81%A9%E3%81%AE%E8%A4%87%E6%95%B0%E3%81%AE%E6%8C%87%E6%A8%99%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>1.4.1. AP@50やAP@75などの複数の指標について</h3>\n\n<p>AP@hoge のhogeの部分は予測ボックスをTPとFPに振り分けるためのIoU閾値である。<br>\nこの閾値が高いと、正解ボックスとの一致具合が厳しくなるのでAPが低くなる。<br>\nゆえに、タスクにおける予測の精度が厳しい場合、高いIoU閾値を用いる指標が用いられると考えられる。例えば、検出結果の対象物をロボットで掴むなどのタスクなどでは、厳しい予測が必要になるだろう。</p>\n\n<p>補足として、有名なデータセットである<code>PascalVOC</code>データセットでは<code>AP@50</code>が使われている。<br>\nまた、有名なデータセットである<code>COCO</code>データセットでは<code>AP@50</code>から<code>AP@95</code>まで<code>0.05</code>刻みのAPが計算されて、すべてのAPの平均と<code>AP@50</code>と<code>AP@75</code>が用いられる。</p>\n\n<h3>\n<span id=\"142-複数画像でのapの計算\" class=\"fragment\"></span><a href=\"#142-%E8%A4%87%E6%95%B0%E7%94%BB%E5%83%8F%E3%81%A7%E3%81%AEap%E3%81%AE%E8%A8%88%E7%AE%97\"><i class=\"fa fa-link\"></i></a>1.4.2. 複数画像でのAPの計算</h3>\n\n<p>APの計算の説明は単体の画像についての説明が多く。複数の画像での計算方法がよくわからなかった。<br>\nそのため次の2つの計算方法が考えついた。</p>\n\n<ol>\n<li>単体の画像で予測ボックスをTPとFPに振り分けてからAPを計算し、すべての画像でのAPを平均してモデルのAPとする</li>\n<li>画像ごとに予測ボックスをTPとFPに振り分けてから全ての予測ボックスでAPを計算してモデルのAPとする。</li>\n</ol>\n\n<p>この違いについてはCOCO Datasetの評価プログラムである<a href=\"https://github.com/cocodataset/cocoapi/tree/master/PythonAPI\" rel=\"nofollow noopener\" target=\"_blank\">pycocotools</a>のプログラムを見てきた。<br>\nその結果、プログラムでは後者の処理を行っていた。<br>\n具体的な処理は以下であった。</p>\n\n<ul>\n<li>予測ボックスの数に合わせたTPFP分類用配列を用意してゼロで初期化する。</li>\n<li>予測ボックスがTPに分類される場合対応する正解ボックスのIDを代入する</li>\n<li>全ての画像で上記を行う</li>\n<li>全ての画像でのTPFP分類用配列を連結する。</li>\n<li>TPFP分類用配列のゼロ以外の要素のあるモノをTP、ゼロのモノをFPに分類する</li>\n<li>APを計算する</li>\n</ul>\n\n<h3>\n<span id=\"143-正解ボックスの１対１対応について\" class=\"fragment\"></span><a href=\"#143-%E6%AD%A3%E8%A7%A3%E3%83%9C%E3%83%83%E3%82%AF%E3%82%B9%E3%81%AE%EF%BC%91%E5%AF%BE%EF%BC%91%E5%AF%BE%E5%BF%9C%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>1.4.3. 正解ボックスの１対１対応について</h3>\n\n<p>TPFPの分類は、予測ボックスと正解ボックスとのIoUが閾値を超えているかで判定される。<br>\n予測ボックスがTPに分類される場合、その予測ボックスは正解ボックスに近しいわけである。<br>\nところが、１つの正解ボックスに対して予測ボックスが複数重なる場合がある。<br>\n正解ボックスとのIoUが閾値以下の場合は問題ないが、閾値を超えている場合はどのようにするべきか？この点について書かれている情報が見つけられなかった。<br>\nそこで再び<a href=\"https://github.com/cocodataset/cocoapi/blob/master/PythonAPI/pycocotools/cocoeval.py\" rel=\"nofollow noopener\" target=\"_blank\">pycocotools</a>のプログラムを見てきた。<br>\nその結果、正解ボックスはただ一つの予測ボックスと対応する　ことがわかった。<br>\n具体的な処理は以下であった。</p>\n\n<ul>\n<li>予測ボックスをConfidenceScoreの順に並べる</li>\n<li>予測ボックスと正解ボックスの全てのIOUを計算した行列を作成する</li>\n<li>予測ボックスをConfidenceScoreの順に見ていき、閾値を超えた最大のIoUを持つ正解ボックスとの組み合わせを探す。\n\n<ul>\n<li>正解ボックスが使用済みなら無視する</li>\n</ul>\n</li>\n<li>組み合わせがあれば、予測ボックスをTPとし、正解ボックスに使用済みのフラグを立てる</li>\n</ul>\n\n<h2>\n<span id=\"15-その他わかったこと\" class=\"fragment\"></span><a href=\"#15-%E3%81%9D%E3%81%AE%E4%BB%96%E3%82%8F%E3%81%8B%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>1.5. その他わかったこと</h2>\n\n<h3>\n<span id=\"151-pycocotoolsの使い方\" class=\"fragment\"></span><a href=\"#151-pycocotools%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9\"><i class=\"fa fa-link\"></i></a>1.5.1. pycocotoolsの使い方</h3>\n\n<p>違う記事で記述予定</p>\n\n<h3>\n<span id=\"152-apの計算方法pr曲線の面積の計算について\" class=\"fragment\"></span><a href=\"#152-ap%E3%81%AE%E8%A8%88%E7%AE%97%E6%96%B9%E6%B3%95pr%E6%9B%B2%E7%B7%9A%E3%81%AE%E9%9D%A2%E7%A9%8D%E3%81%AE%E8%A8%88%E7%AE%97%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>1.5.2. APの計算方法(PR曲線の面積の計算について)</h3>\n\n<p>APの計算に関して、COCO Datasetでは全ての面積を計算するのでなく101ポイントでの補間手法が用いられていた。<br>\nちなみに PascalVOC では11ポイント補間手法を用いている。</p>\n",
      "body": "# 1. 物体検出におけるmAP(meanAveragePrecision)に関して\n\n## 1.1. 目次\n\n- [1. 物体検出におけるmAP(meanAveragePrecision)に関して](#1-物体検出におけるmapmeanaverageprecisionに関して)\n  - [1.1. 目次](#11-目次)\n  - [1.2. 結論](#12-結論)\n  - [1.3. イントロダクション](#13-イントロダクション)\n  - [1.4. 疑問点と調査](#14-疑問点と調査)\n        - [1.4.1. AP@50やAP@75などの複数の指標について](#141-ap50やap75などの複数の指標について)\n        - [1.4.2. 複数画像でのAPの計算](#142-複数画像でのapの計算)\n        - [1.4.3. 正解ボックスの１対１対応について](#143-正解ボックスの１対１対応について)\n  - [1.5. その他わかったこと](#15-その他わかったこと)\n        - [1.5.1. pycocotoolsの使い方](#151-pycocotoolsの使い方)\n        - [1.5.2. APの計算方法(PR曲線の面積の計算について)](#152-apの計算方法pr曲線の面積の計算について)\n\n## 1.2. 結論\n\n物体検出の指標のmAPの解説記事読んだ。\n次の疑問点が浮かんだので調べた。\n\n- Q. AP@50やAP@75などの複数の指標があるのはなぜか？\n  - A. タスクの厳しさによって指標を変えてるのではないかと考察。ちなみにPascalVOCデータセットだとAP@50で算出して、COCOデータセットだとAP@50からAP@95まで0.05刻みでAPを算出してAP@50とAP@75とすべてのAPの平均値を使っている。\n- Q. 複数画像の場合のAPの計算はどうなるのか？\n  - A. 複数画像の場合は、すべての予測ボックスをTPとFPに振り分けてからPR曲線を作って計算している。\n- Q. 予測ボックスがTPに分類された時にIoUを計算した正解ボックスは再利用されるのか？（1対1対応なのか？）\n  - A. １対１対応である。\n\n## 1.3. イントロダクション\n\n物体検出にはmAP(meanAveragePrecision)と呼ばれる指標が使われている。\nこの指標は、物体検出モデルのPrecision(精度)とRecall(再現性)の両方を評価することができる指標である。\n計算方法は、まずカテゴリ毎に予測ボックスをTPとFPに分類してPrecisionとRecallを計算する。\nその結果をもとにPR曲線を作成し曲線の面積を計算することでカテゴリ毎のAPが得られる。\nそしてカテゴリの種類で平均をとるという方法である。\n予測ボックスをTPとFPに分類するには、予測ボックスと正解ボックスとの`IoU(Inter Of Union)`と呼ばれるスコアを算出して閾値を超えているモノをTP、超えていないモノをFPとする手法を用いる。\nこれらのより具体的な解説に関しては以下の記事に記載しているのでココでは解説しない。\n\n- AP計算とIoUの計算<https://qiita.com/cv_carnavi/items/08e11426e2fac8433fed>\n\nこの記事では、この指標の計算方法について疑問に思った点（当たり前すぎて解説していないのかもしれない）を記載していく。\n疑問に思った点は以下である。\n\n- AP@50やAP@75などの指標があるのはなぜか？\n- APの計算は複数画像の場合どうなるのか？\n- 予測ボックスがTPに分類された時にIoUを計算した正解ボックスは再利用されるのか？（1対1対応なのか？）\n\n上記の疑問点に関して、物体検出の有名なデータセットである COCO Dataset のコンペティションの評価プログラムを見ながら適宜解決していく。\n- [COCO Dataset](https://cocodataset.org/#download)\n- [pycocotools COCO Datasetの評価プログラム](https://github.com/cocodataset/cocoapi/tree/master/PythonAPI)\n\n## 1.4. 疑問点と調査\n\n### 1.4.1. AP@50やAP@75などの複数の指標について\n\nAP@hoge のhogeの部分は予測ボックスをTPとFPに振り分けるためのIoU閾値である。\nこの閾値が高いと、正解ボックスとの一致具合が厳しくなるのでAPが低くなる。\nゆえに、タスクにおける予測の精度が厳しい場合、高いIoU閾値を用いる指標が用いられると考えられる。例えば、検出結果の対象物をロボットで掴むなどのタスクなどでは、厳しい予測が必要になるだろう。\n\n補足として、有名なデータセットである`PascalVOC`データセットでは`AP@50`が使われている。\nまた、有名なデータセットである`COCO`データセットでは`AP@50`から`AP@95`まで`0.05`刻みのAPが計算されて、すべてのAPの平均と`AP@50`と`AP@75`が用いられる。\n\n### 1.4.2. 複数画像でのAPの計算\n\nAPの計算の説明は単体の画像についての説明が多く。複数の画像での計算方法がよくわからなかった。\nそのため次の2つの計算方法が考えついた。\n\n1. 単体の画像で予測ボックスをTPとFPに振り分けてからAPを計算し、すべての画像でのAPを平均してモデルのAPとする\n2. 画像ごとに予測ボックスをTPとFPに振り分けてから全ての予測ボックスでAPを計算してモデルのAPとする。\n   \nこの違いについてはCOCO Datasetの評価プログラムである[pycocotools](https://github.com/cocodataset/cocoapi/tree/master/PythonAPI)のプログラムを見てきた。\nその結果、プログラムでは後者の処理を行っていた。\n具体的な処理は以下であった。\n\n- 予測ボックスの数に合わせたTPFP分類用配列を用意してゼロで初期化する。\n- 予測ボックスがTPに分類される場合対応する正解ボックスのIDを代入する\n- 全ての画像で上記を行う\n- 全ての画像でのTPFP分類用配列を連結する。\n- TPFP分類用配列のゼロ以外の要素のあるモノをTP、ゼロのモノをFPに分類する\n- APを計算する\n\n### 1.4.3. 正解ボックスの１対１対応について\n\nTPFPの分類は、予測ボックスと正解ボックスとのIoUが閾値を超えているかで判定される。\n予測ボックスがTPに分類される場合、その予測ボックスは正解ボックスに近しいわけである。\nところが、１つの正解ボックスに対して予測ボックスが複数重なる場合がある。\n正解ボックスとのIoUが閾値以下の場合は問題ないが、閾値を超えている場合はどのようにするべきか？この点について書かれている情報が見つけられなかった。\nそこで再び[pycocotools](https://github.com/cocodataset/cocoapi/blob/master/PythonAPI/pycocotools/cocoeval.py)のプログラムを見てきた。\nその結果、正解ボックスはただ一つの予測ボックスと対応する　ことがわかった。\n具体的な処理は以下であった。\n\n- 予測ボックスをConfidenceScoreの順に並べる\n- 予測ボックスと正解ボックスの全てのIOUを計算した行列を作成する\n- 予測ボックスをConfidenceScoreの順に見ていき、閾値を超えた最大のIoUを持つ正解ボックスとの組み合わせを探す。\n  - 正解ボックスが使用済みなら無視する\n- 組み合わせがあれば、予測ボックスをTPとし、正解ボックスに使用済みのフラグを立てる\n\n## 1.5. その他わかったこと\n\n### 1.5.1. pycocotoolsの使い方\n\n違う記事で記述予定\n\n### 1.5.2. APの計算方法(PR曲線の面積の計算について)\n\nAPの計算に関して、COCO Datasetでは全ての面積を計算するのでなく101ポイントでの補間手法が用いられていた。\nちなみに PascalVOC では11ポイント補間手法を用いている。\n\n\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2021-09-30T00:37:29+09:00",
      "group": null,
      "id": "8e840798ce4dcc149258",
      "likes_count": 0,
      "private": false,
      "reactions_count": 0,
      "tags": [
          {
              "name": "物体検出",
              "versions": []
          },
          {
              "name": "評価指標",
              "versions": []
          }
      ],
      "title": "物体検出におけるmAP(meanAveragePrecision)に関しての疑問点",
      "updated_at": "2021-09-30T00:39:20+09:00",
      "url": "https://qiita.com/torigara_san/items/8e840798ce4dcc149258",
      "user": {
          "description": null,
          "facebook_id": null,
          "followees_count": 1,
          "followers_count": 0,
          "github_login_name": null,
          "id": "torigara_san",
          "items_count": 3,
          "linkedin_id": null,
          "location": null,
          "name": "",
          "organization": null,
          "permanent_id": 693096,
          "profile_image_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/693096/d85badbc7b052825a860cd167d01d2d4a5fb62f7/x_large.png?1597583139",
          "team_only": false,
          "twitter_screen_name": null,
          "website_url": null
      },
      "page_views_count": null,
      "team_membership": null
  },
  {
      "rendered_body": "<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>@ECHO OFF\n\nREM ──────────────────────────────────────────────────\nREM ファイル名：checkman_Windows_output_transfer.bat\nREM 処理概要：各Windowsサーバからバッチファイルのリモート実行結果ファイルを転送する。\nREM 作成日／作成者：2021.07.21／●● ●●\nREM ──────────────────────────────────────────────────\nREM \"コンソールの文字コードをUTF-8に設定する。\"\nCHCP 65001\n\nREM \"環境変数をまとめて設定する。\"\nSET INPUT_FILE=D:\\sagyou\\checkman\\checkman_Windows\\checkman_Windows_output\\checkman_Windows_output_servername.ini\nSET USER=●●●\nSET PASSWORD_USER=●●●\n\nREM \"カレントディレクトリを変更する。\"\nCD /D D:\\sagyou\\checkman\\checkman_Windows\\checkman_Windows_output\\result\n\nREM \"入力ファイルから読み取った各Windowsサーバ名に対してコマンドを実行する。\"\nFOR /F %%I IN (%INPUT_FILE%) DO (\n    REM \"ユーザー名とそのパスワードを指定して共有資源に接続する。\"\n    NET USE \\\\%%I\\D$ /USER:%USER% %PASSWORD_USER%\n    REM \"バッチファイルのリモート実行結果ファイルをコピーする。\"\n    COPY \\\\%%I\\D$\\sagyou\\checkman_Windows_output\\result\\* .\n    REM \"使用した資材を後始末として削除する。\"\n    RD /S /Q \\\\%%I\\D$\\sagyou\\checkman_Windows_output\n    REM \"共有資源を切断する。\"\n    NET USE \\\\%%I\\D$ /DELETE /Y\n)\n</code></pre></div></div>\n",
      "body": "```\n@ECHO OFF\n\nREM ──────────────────────────────────────────────────\nREM ファイル名：checkman_Windows_output_transfer.bat\nREM 処理概要：各Windowsサーバからバッチファイルのリモート実行結果ファイルを転送する。\nREM 作成日／作成者：2021.07.21／●● ●●\nREM ──────────────────────────────────────────────────\nREM \"コンソールの文字コードをUTF-8に設定する。\"\nCHCP 65001\n\nREM \"環境変数をまとめて設定する。\"\nSET INPUT_FILE=D:\\sagyou\\checkman\\checkman_Windows\\checkman_Windows_output\\checkman_Windows_output_servername.ini\nSET USER=●●●\nSET PASSWORD_USER=●●●\n\nREM \"カレントディレクトリを変更する。\"\nCD /D D:\\sagyou\\checkman\\checkman_Windows\\checkman_Windows_output\\result\n\nREM \"入力ファイルから読み取った各Windowsサーバ名に対してコマンドを実行する。\"\nFOR /F %%I IN (%INPUT_FILE%) DO (\n\tREM \"ユーザー名とそのパスワードを指定して共有資源に接続する。\"\n\tNET USE \\\\%%I\\D$ /USER:%USER% %PASSWORD_USER%\n\tREM \"バッチファイルのリモート実行結果ファイルをコピーする。\"\n\tCOPY \\\\%%I\\D$\\sagyou\\checkman_Windows_output\\result\\* .\n\tREM \"使用した資材を後始末として削除する。\"\n\tRD /S /Q \\\\%%I\\D$\\sagyou\\checkman_Windows_output\n\tREM \"共有資源を切断する。\"\n\tNET USE \\\\%%I\\D$ /DELETE /Y\n)\n```\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2021-09-30T00:35:24+09:00",
      "group": null,
      "id": "fa9dfec3cbf984845b77",
      "likes_count": 0,
      "private": false,
      "reactions_count": 0,
      "tags": [
          {
              "name": "Qiita",
              "versions": []
          }
      ],
      "title": "checkman_Windows_output_transfer",
      "updated_at": "2021-09-30T00:35:24+09:00",
      "url": "https://qiita.com/cinnanaimon/items/fa9dfec3cbf984845b77",
      "user": {
          "description": null,
          "facebook_id": null,
          "followees_count": 0,
          "followers_count": 0,
          "github_login_name": null,
          "id": "cinnanaimon",
          "items_count": 2,
          "linkedin_id": null,
          "location": null,
          "name": "",
          "organization": null,
          "permanent_id": 2104249,
          "profile_image_url": "https://secure.gravatar.com/avatar/f89cfda8046229b6c4a555d68ca5e6b4",
          "team_only": false,
          "twitter_screen_name": null,
          "website_url": null
      },
      "page_views_count": null,
      "team_membership": null
  },
  {
      "rendered_body": "<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>@ECHO OFF\n\nREM ──────────────────────────────────────────────────\nREM ファイル名：checkman_Windows_output_distribute.bat\nREM 処理概要：各Windowsサーバに資材を配布する。\nREM 作成日／作成者：2021.07.21／●● ●●\nREM ──────────────────────────────────────────────────\nREM \"コンソールの文字コードをUTF-8に設定する。\"\nCHCP 65001\n\nREM \"環境変数をまとめて設定する。\"\nSET INPUT_FILE=D:\\sagyou\\checkman\\checkman_Windows\\checkman_Windows_output\\checkman_Windows_output_servername.ini\nSET USER=●●●\nSET PASSWORD_USER=●●●\n\nREM \"カレントディレクトリを変更する。\"\nCD /D D:\\sagyou\\checkman\\checkman_Windows\\checkman_Windows_output\\set\n\nREM \"入力ファイルから読み取った各Windowsサーバ名に対してコマンドを実行する。\"\nFOR /F %%I IN (%INPUT_FILE%) DO (\n    REM \"ユーザー名とそのパスワードを指定して共有資源に接続する。\"\n    NET USE \\\\%%I\\D$ /USER:%USER% %PASSWORD_USER%\n    REM \"資材としてファイルとディレクトリツリーをコピーする。\"\n    XCOPY .\\%%I\\checkman_Windows_output \\\\%%I\\D$\\sagyou\n    REM \"共有資源を切断する。\"\n    NET USE \\\\%%I\\D$ /DELETE /Y\n)\n</code></pre></div></div>\n",
      "body": "```\n@ECHO OFF\n\nREM ──────────────────────────────────────────────────\nREM ファイル名：checkman_Windows_output_distribute.bat\nREM 処理概要：各Windowsサーバに資材を配布する。\nREM 作成日／作成者：2021.07.21／●● ●●\nREM ──────────────────────────────────────────────────\nREM \"コンソールの文字コードをUTF-8に設定する。\"\nCHCP 65001\n\nREM \"環境変数をまとめて設定する。\"\nSET INPUT_FILE=D:\\sagyou\\checkman\\checkman_Windows\\checkman_Windows_output\\checkman_Windows_output_servername.ini\nSET USER=●●●\nSET PASSWORD_USER=●●●\n\nREM \"カレントディレクトリを変更する。\"\nCD /D D:\\sagyou\\checkman\\checkman_Windows\\checkman_Windows_output\\set\n\nREM \"入力ファイルから読み取った各Windowsサーバ名に対してコマンドを実行する。\"\nFOR /F %%I IN (%INPUT_FILE%) DO (\n\tREM \"ユーザー名とそのパスワードを指定して共有資源に接続する。\"\n\tNET USE \\\\%%I\\D$ /USER:%USER% %PASSWORD_USER%\n\tREM \"資材としてファイルとディレクトリツリーをコピーする。\"\n\tXCOPY .\\%%I\\checkman_Windows_output \\\\%%I\\D$\\sagyou\n\tREM \"共有資源を切断する。\"\n\tNET USE \\\\%%I\\D$ /DELETE /Y\n)\n```\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2021-09-30T00:34:36+09:00",
      "group": null,
      "id": "a8fe1728bb73f76ba86e",
      "likes_count": 0,
      "private": false,
      "reactions_count": 0,
      "tags": [
          {
              "name": "Qiita",
              "versions": []
          }
      ],
      "title": "checkman_Windows_output_distribute",
      "updated_at": "2021-09-30T00:34:36+09:00",
      "url": "https://qiita.com/cinnanaimon/items/a8fe1728bb73f76ba86e",
      "user": {
          "description": null,
          "facebook_id": null,
          "followees_count": 0,
          "followers_count": 0,
          "github_login_name": null,
          "id": "cinnanaimon",
          "items_count": 2,
          "linkedin_id": null,
          "location": null,
          "name": "",
          "organization": null,
          "permanent_id": 2104249,
          "profile_image_url": "https://secure.gravatar.com/avatar/f89cfda8046229b6c4a555d68ca5e6b4",
          "team_only": false,
          "twitter_screen_name": null,
          "website_url": null
      },
      "page_views_count": null,
      "team_membership": null
  },
  {
      "rendered_body": "\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p>今までに、論文・発表資料を作成し、以下のシンポジウムで発表する機会をいただきました。</p>\n\n<ul>\n<li>ソフトウェア品質シンポジウム</li>\n<li>ソフトウェア・シンポジウム</li>\n<li>SPI Japan</li>\n</ul>\n\n<p>論文・発表資料を作成を作成するときに、多くの皆様にご指導いただきました。本当にありがとうございます。<br>\n皆様からのご指導を受けた結果、論文・発表資料を作成するときに意識していることをまとめておきます。<br>\n意識することは変わると思いますので、随時追記・整理していきます。</p>\n\n<h1>\n<span id=\"意識していること\" class=\"fragment\"></span><a href=\"#%E6%84%8F%E8%AD%98%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>意識していること</h1>\n\n<h2>\n<span id=\"論文発表資料共通で意識していること\" class=\"fragment\"></span><a href=\"#%E8%AB%96%E6%96%87%E7%99%BA%E8%A1%A8%E8%B3%87%E6%96%99%E5%85%B1%E9%80%9A%E3%81%A7%E6%84%8F%E8%AD%98%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>論文・発表資料共通で意識していること</h2>\n\n<h3>\n<span id=\"内容\" class=\"fragment\"></span><a href=\"#%E5%86%85%E5%AE%B9\"><i class=\"fa fa-link\"></i></a>内容</h3>\n\n<ul>\n<li>自分のプロジェクトで効果を確認する。</li>\n<li>解決する課題は小さくする（小さくてもいい）。</li>\n</ul>\n\n<h3>\n<span id=\"構成\" class=\"fragment\"></span><a href=\"#%E6%A7%8B%E6%88%90\"><i class=\"fa fa-link\"></i></a>構成</h3>\n\n<p>ほぼ、いつも以下の構成で書いている。<br>\n足立久美さんからご指導をいただいて、私が勝手に”足立メソッド”と呼んでいる論文の構成。</p>\n\n<ul>\n<li>概要</li>\n<li>はじめに</li>\n<li>課題設定\n\n<ul>\n<li>現状分析</li>\n<li>課題提起</li>\n</ul>\n</li>\n<li>先行研究</li>\n<li>解決策の提案\n\n<ul>\n<li>課題の解決方針</li>\n<li>（課題の解決策）</li>\n</ul>\n</li>\n<li>解決策の評価\n\n<ul>\n<li>評価方法</li>\n<li>評価結果</li>\n<li>結果の考察</li>\n</ul>\n</li>\n<li>おわりに\n\n<ul>\n<li>まとめ</li>\n<li>今後の課題</li>\n</ul>\n</li>\n<li>謝辞</li>\n<li>参考文献</li>\n</ul>\n\n<h4>\n<span id=\"各章の関係\" class=\"fragment\"></span><a href=\"#%E5%90%84%E7%AB%A0%E3%81%AE%E9%96%A2%E4%BF%82\"><i class=\"fa fa-link\"></i></a>各章の関係</h4>\n\n<ul>\n<li>「概要」を更に詳細に説明するのが、「はじめに」</li>\n<li>「現状分析」の結果をもとに、「課題提起」を述べる</li>\n<li>「先行研究」を参考にして、「課題の解決方針」を決める</li>\n<li>「課題提起」で示されたことが解決されているかを、「解決策の評価」で評価する</li>\n<li>「評価結果」をもとに「考察」を述べる</li>\n<li>「考察」では「（課題の解決策）」が有効であったかを述べる</li>\n<li>「はじめに」に対して「おわりに」がある</li>\n</ul>\n\n<h2>\n<span id=\"論文で意識していること\" class=\"fragment\"></span><a href=\"#%E8%AB%96%E6%96%87%E3%81%A7%E6%84%8F%E8%AD%98%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>論文で意識していること</h2>\n\n<ul>\n<li>同義語をなくす。</li>\n<li>あいまいな修飾語を極力使わない。</li>\n<li>自分の主張の妥当性を高めることになる参考文献を探しだし、「先行研究」等として示す。</li>\n<li>参考文献で使用されている用語を使う。独自の用語を使用する場合には、用語を定義する。</li>\n<li>できるだけ、制約となっているページ数をぴったり埋める。8ページ以内が制約なら8ページぴったり埋める。</li>\n<li>できるだけ、文の途中で、ページが切り替わらないようにする。</li>\n<li>うしろから書く。「まとめ」を述べるために必要なことのみを論文に記載する。</li>\n</ul>\n\n<h2>\n<span id=\"発表資料で意識していること\" class=\"fragment\"></span><a href=\"#%E7%99%BA%E8%A1%A8%E8%B3%87%E6%96%99%E3%81%A7%E6%84%8F%E8%AD%98%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>発表資料で意識していること</h2>\n\n<h3>\n<span id=\"制約\" class=\"fragment\"></span><a href=\"#%E5%88%B6%E7%B4%84\"><i class=\"fa fa-link\"></i></a>制約</h3>\n\n<p>制約を設けることが、文章を見直すきかっけとなる。制約を満たすために、文章を見直さざるを得なくなる。そのときに、余分な情報が削られる。<br>\nまとめを記載することが、文章を見直すきかっけとなる。まとめを記載するために、何が重要かを考えざるを得なくなる。</p>\n\n<ul>\n<li>シート数の上限を決める（シート構成をあらかじめ設計する）</li>\n<li>フォントサイズを決める（14pt以上にする）</li>\n<li>箇条書きの項目は3つ以内にする</li>\n<li>1文は2行以内にする</li>\n<li>基本的には、シート毎に、シートの下部に、まとめを記載する</li>\n</ul>\n\n<h3>\n<span id=\"参考文献\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE\"><i class=\"fa fa-link\"></i></a>参考文献</h3>\n\n<ul>\n<li>論文ではなく発表資料であっても、最後のシートに参考文献を記載する。</li>\n</ul>\n\n<h1>\n<span id=\"謝辞\" class=\"fragment\"></span><a href=\"#%E8%AC%9D%E8%BE%9E\"><i class=\"fa fa-link\"></i></a>謝辞</h1>\n\n<p>足立さん・松尾谷さん・栗田さん・石川さん・小川さんをはじめとしたご指導をいただいた皆様に感謝申し上げます。ありがとうございました。</p>\n\n<h1>\n<span id=\"参考記事\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83%E8%A8%98%E4%BA%8B\"><i class=\"fa fa-link\"></i></a>参考記事</h1>\n\n<p><qiita-embed-ogp src=\"https://qiita.com/kazuo_reve/items/b15d99759d75f942b9f0\"></qiita-embed-ogp></p>\n\n<p><qiita-embed-ogp src=\"https://qiita.com/kaizen_nagoya/items/b27b3f58b8bf265a5cd1\"></qiita-embed-ogp></p>\n\n<p><qiita-embed-ogp src=\"https://qiita.com/kazuo_reve/items/b5e740328bebad179414\"></qiita-embed-ogp></p>\n",
      "body": "# はじめに\n今までに、論文・発表資料を作成し、以下のシンポジウムで発表する機会をいただきました。\n\n* ソフトウェア品質シンポジウム\n* ソフトウェア・シンポジウム\n* SPI Japan\n\n論文・発表資料を作成を作成するときに、多くの皆様にご指導いただきました。本当にありがとうございます。\n皆様からのご指導を受けた結果、論文・発表資料を作成するときに意識していることをまとめておきます。\n意識することは変わると思いますので、随時追記・整理していきます。\n\n# 意識していること\n## 論文・発表資料共通で意識していること\n\n### 内容\n* 自分のプロジェクトで効果を確認する。\n* 解決する課題は小さくする（小さくてもいい）。\n\n### 構成\nほぼ、いつも以下の構成で書いている。\n足立久美さんからご指導をいただいて、私が勝手に”足立メソッド”と呼んでいる論文の構成。\n\n* 概要\n* はじめに\n* 課題設定\n * 現状分析\n * 課題提起\n* 先行研究\n* 解決策の提案\n * 課題の解決方針\n * （課題の解決策）\n* 解決策の評価\n * 評価方法\n * 評価結果\n * 結果の考察\n* おわりに\n * まとめ\n * 今後の課題\n* 謝辞\n* 参考文献\n\n#### 各章の関係\n* 「概要」を更に詳細に説明するのが、「はじめに」\n* 「現状分析」の結果をもとに、「課題提起」を述べる\n* 「先行研究」を参考にして、「課題の解決方針」を決める\n* 「課題提起」で示されたことが解決されているかを、「解決策の評価」で評価する\n* 「評価結果」をもとに「考察」を述べる\n* 「考察」では「（課題の解決策）」が有効であったかを述べる\n* 「はじめに」に対して「おわりに」がある\n\n## 論文で意識していること\n* 同義語をなくす。\n* あいまいな修飾語を極力使わない。\n* 自分の主張の妥当性を高めることになる参考文献を探しだし、「先行研究」等として示す。\n* 参考文献で使用されている用語を使う。独自の用語を使用する場合には、用語を定義する。\n* できるだけ、制約となっているページ数をぴったり埋める。8ページ以内が制約なら8ページぴったり埋める。\n* できるだけ、文の途中で、ページが切り替わらないようにする。\n* うしろから書く。「まとめ」を述べるために必要なことのみを論文に記載する。\n\n## 発表資料で意識していること\n### 制約\n制約を設けることが、文章を見直すきかっけとなる。制約を満たすために、文章を見直さざるを得なくなる。そのときに、余分な情報が削られる。\nまとめを記載することが、文章を見直すきかっけとなる。まとめを記載するために、何が重要かを考えざるを得なくなる。\n\n* シート数の上限を決める（シート構成をあらかじめ設計する）\n* フォントサイズを決める（14pt以上にする）\n* 箇条書きの項目は3つ以内にする\n* 1文は2行以内にする\n* 基本的には、シート毎に、シートの下部に、まとめを記載する\n\n### 参考文献\n* 論文ではなく発表資料であっても、最後のシートに参考文献を記載する。\n\n# 謝辞\n足立さん・松尾谷さん・栗田さん・石川さん・小川さんをはじめとしたご指導をいただいた皆様に感謝申し上げます。ありがとうございました。\n\n# 参考記事\n\nhttps://qiita.com/kazuo_reve/items/b15d99759d75f942b9f0\n\nhttps://qiita.com/kaizen_nagoya/items/b27b3f58b8bf265a5cd1\n\nhttps://qiita.com/kazuo_reve/items/b5e740328bebad179414\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2021-09-30T00:33:52+09:00",
      "group": null,
      "id": "cd3d9c00edb18013ebea",
      "likes_count": 0,
      "private": false,
      "reactions_count": 0,
      "tags": [
          {
              "name": "ポエム",
              "versions": []
          },
          {
              "name": "論文",
              "versions": []
          },
          {
              "name": "発表",
              "versions": []
          },
          {
              "name": "校正",
              "versions": []
          },
          {
              "name": "推敲",
              "versions": []
          }
      ],
      "title": "論文・発表資料を作成するときに意識していること",
      "updated_at": "2021-09-30T00:39:52+09:00",
      "url": "https://qiita.com/kazuo_reve/items/cd3d9c00edb18013ebea",
      "user": {
          "description": "テーラー柏原\r\nhttps://researchmap.jp/reve/\r\n",
          "facebook_id": "100011754548292",
          "followees_count": 340,
          "followers_count": 86,
          "github_login_name": null,
          "id": "kazuo_reve",
          "items_count": 35,
          "linkedin_id": "",
          "location": "",
          "name": "柏原 一雄",
          "organization": "デンソークリエイト",
          "permanent_id": 243842,
          "profile_image_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/243842/c1f088a3aaac6e627f547723e5157ac467713988/large.png?1578409668",
          "team_only": false,
          "twitter_screen_name": "kazuo_reve",
          "website_url": "https://bookmeter.com/users/671909"
      },
      "page_views_count": null,
      "team_membership": null
  },
  {
      "rendered_body": "\n<h1>\n<span id=\"この記事について\" class=\"fragment\"></span><a href=\"#%E3%81%93%E3%81%AE%E8%A8%98%E4%BA%8B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>この記事について</h1>\n\n<p>Aidemyの卒業ブログとして記載しています。<br>\n覚えたての手法を実践することが目的のため、分析手法の妥当性、精度についてはいったん保留しています。<br>\n記事はSIGNATEの情報公開ポリシーに沿って公開しているつもりですが、問題があれば削除します。</p>\n\n<h1>\n<span id=\"データについて\" class=\"fragment\"></span><a href=\"#%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>データについて</h1>\n\n<p>SIGNATEの<a href=\"https://signate.jp/competitions/266/data\" rel=\"nofollow noopener\" target=\"_blank\">【練習問題】民泊サービスの宿泊価格予測 </a>のデータを利用しています。特徴量のデータ詳細は上記ページを参照ください。</p>\n\n<p>欠損値あり、半分以上カテゴリデータとなってます。<br>\nどの特徴量を使うか、欠損値の埋め方、カテゴリデータの変換方法を考えないとですね。。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;\nInt64Index: 55583 entries, 0 to 55582\nData columns (total 28 columns):\n #   Column                  Non-Null Count  Dtype  \n---  ------                  --------------  -----  \n 0   accommodates            55583 non-null  int64  \n 1   amenities               55583 non-null  object \n 2   bathrooms               55436 non-null  float64\n 3   bed_type                55583 non-null  object \n 4   bedrooms                55512 non-null  float64\n 5   beds                    55487 non-null  float64\n 6   cancellation_policy     55583 non-null  object \n 7   city                    55583 non-null  object \n 8   cleaning_fee            55583 non-null  object \n 9   description             55583 non-null  object \n 10  first_review            43675 non-null  object \n 11  host_has_profile_pic    55435 non-null  object \n 12  host_identity_verified  55435 non-null  object \n 13  host_response_rate      41879 non-null  object \n 14  host_since              55435 non-null  object \n 15  instant_bookable        55583 non-null  object \n 16  last_review             43703 non-null  object \n 17  latitude                55583 non-null  float64\n 18  longitude               55583 non-null  float64\n 19  name                    55583 non-null  object \n 20  neighbourhood           50423 non-null  object \n 21  number_of_reviews       55583 non-null  int64  \n 22  property_type           55583 non-null  object \n 23  review_scores_rating    43027 non-null  float64\n 24  room_type               55583 non-null  object \n 25  thumbnail_url           49438 non-null  object \n 26  zipcode                 54867 non-null  object \n 27  y                       55583 non-null  float64\ndtypes: float64(7), int64(2), object(19)\nmemory usage: 12.3+ MB\n</code></pre></div></div>\n\n<h1>\n<span id=\"利用する特徴量の検討\" class=\"fragment\"></span><a href=\"#%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E7%89%B9%E5%BE%B4%E9%87%8F%E3%81%AE%E6%A4%9C%E8%A8%8E\"><i class=\"fa fa-link\"></i></a>利用する特徴量の検討</h1>\n\n<p><strong>数値データの傾向確認</strong><br>\nまずは簡単に確認できる数値データの傾向を確認。<br>\n多重共線性が発生しそうな説明変数同士の強い相関や、問題になりそうな外れ値はありませんでした。（多分）</p>\n\n<p>なお、正解ラベル（\"y\"）と相関の低い特徴量については、以下の対応方針を立てた。</p>\n\n<p>・緯度／経度（'latitude', 'longitude'）については、2つを合成し、新たな特徴量を作成<br>\n・レビュー情報（'number_of_reviews', 'review_scores_rating'）についても、上記同様、合成により新たな特徴量を作成</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>temp = ['accommodates', 'bathrooms', 'bedrooms', 'beds', 'latitude',\n       'longitude', 'number_of_reviews', 'review_scores_rating', 'y']\n\n# 統計量\ndf.describe()\n\n# 相関散布図\nsns.pairplot(df[temp])\n\n# 相関行列\ndf[temp].corr()\n\n# 外れ値確認\ndf[temp].boxplot()\n</code></pre></div></div>\n\n<p>参考）正解ラベル\"y\"と説明変数の散布図<br>\n<a href=\"https://camo.qiitausercontent.com/93ff5982c7228fa6f9ccf6b98789bfe5488fc077/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323035383935302f64656363316230642d343464352d646164652d653733662d6236646162626233396433652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2058950%2Fdecc1b0d-44d5-dade-e73f-b6dabbb39d3e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=21f3036befbbe998a24c8685e3760e60\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2058950/decc1b0d-44d5-dade-e73f-b6dabbb39d3e.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2058950%2Fdecc1b0d-44d5-dade-e73f-b6dabbb39d3e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e2c08e7cbc58c9cfc328b92af7f289c7 1x\" loading=\"lazy\"></a></p>\n\n<p><strong>カテゴリデータの傾向確認</strong><br>\nカテゴリーデータの統計量より以下の対応方針を検討。</p>\n\n<p>・ユニークデータ数の少ない 'host_identity_verified', 'room_type', 'cancellation_policy' をワンホットラベリング<br>\n・\"amenities\"には{}内に様々な情報が入っているため、分解して、意味ありげな要素で特徴量作成にチャレンジ</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code># カテゴリデータの統計量把握\ndf.describe(include=\"O\")\n\n# amenitiesデータのサンプル\n{TV,\"Wireless Internet\",Kitchen,\"Free parking on premises\",Washer,Dryer,\"Smoke detector\"}\n</code></pre></div></div>\n\n<h1>\n<span id=\"新たな特徴量の作成\" class=\"fragment\"></span><a href=\"#%E6%96%B0%E3%81%9F%E3%81%AA%E7%89%B9%E5%BE%B4%E9%87%8F%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>新たな特徴量の作成</h1>\n\n<p><strong>緯度／経度（'latitude', 'longitude'）の合成</strong><br>\n実のところ、ロケーションはカテゴリデータに\"city\"があり、6クラスに分けられるが、もっと細かく分けた方が精度が上がるのでは？と言う想定から、'latitude', 'longitude'を20分割するとどうなるかを確認。<br>\n20分割してもそれほど細かく分かれないようなので、このまま'latitude', 'longitude'を合成してみる。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code># ヒストグラムで20分割時の傾向把握\ndf[[\"latitude\",\"longitude\"]].hist(bins=20)\n\n# 20分割したデータでカラム作成\n# 両データを合成しても判別できるよう、\"latitude\"はラベルを1~20とし、\"longitude\"は100~2000の100単位でラベルを作成\ndf[\"_lati\"] = pd.cut(df[\"latitude\"],20,labels=range(1,21))\ndf[\"_long\"] = pd.cut(df[\"longitude\"],20,labels=range(100,2001,100))\n# クロス集計\npd.crosstab(df[\"_lati\"], df[\"_long\"])\n</code></pre></div></div>\n\n<p><a href=\"https://camo.qiitausercontent.com/fab63458847705b32ffd6225d62ac363e6ca02a6/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f323035383935302f66663164396538362d326336612d336630332d633763312d6331303733343363326537622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2058950%2Fff1d9e86-2c6a-3f03-c7c1-c107343c2e7b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a54f953e15a9a8ab9c878a6e7ec54ac5\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2058950/ff1d9e86-2c6a-3f03-c7c1-c107343c2e7b.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2058950%2Fff1d9e86-2c6a-3f03-c7c1-c107343c2e7b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=15e1d0db5e361bfba2ba54a59002a4bf 1x\" loading=\"lazy\"></a></p>\n\n<p>特徴量の合成にはラベルをintに変換して加算。<br>\n後ほどワンホットラベリングのためにdtypeを\"object\"に変換しておく。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>df[\"location\"] = np.array([int(i) for i in df[\"_lati\"].values]) + np.array([int(j) for j in df[\"_long\"].values])\ndf = df.astype({'location': object})\n</code></pre></div></div>\n\n<p><strong>レビュースコアの合成</strong><br>\nレビュー数（\"number_of_reviews\"）はレビュースコアの信頼度と考え対数化。<br>\n対数化したレビュー数とレビュースコア（\"review_scores_rating\"）を乗算し特徴量を作成。<br>\n欠損値は0で埋める。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>df[\"_rev_score\"] = df[\"number_of_reviews\"].map(lambda x: np.log(x)) * df[\"review_scores_rating\"]\ndf[\"_rev_score\"] = df[\"_rev_score\"].fillna(0)\n</code></pre></div></div>\n\n<p><strong>アメニティから特徴量抽出</strong><br>\n\"amenities\"から要素１つづつ抜き出し、文字列となっている{}内からさらに要素を抽出し辞書化。<br>\n130個の要素を確認。<br>\nその中から一先ずは感覚で\"Wireless Internet\",\"Air conditioning\",\"24-hour check-in\",\"Pool\"を選択。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>import re\nfrom collections import defaultdict\n\ndic = defaultdict(int)\n\nfor _ in range(df[\"amenities\"].shape[0]):\n  keys = re.findall(r'\\{(.*)\\}', df.loc[_,\"amenities\"])[0].split(\",\")\n  for key in keys:\n    dic[key] += 1\n</code></pre></div></div>\n\n<p>上記で選択した\"Wireless Internet\",\"Air conditioning\",\"24-hour check-in\",\"Pool\"でカラムを作成し、ワンホットエンコーディング。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>sele = [\"\\\"Wireless Internet\\\"\",\"\\\"Air conditioning\\\"\",\"\\\"24-hour check-in\\\"\",\"Pool\"]\n\ndf[\"Wireless Internet\"] = 0\ndf[\"Air conditioning\"] = 0\ndf[\"24-hour check-in\"] = 0\ndf[\"Pool\"] = 0\n\nrow_num = 0\n\nfor _ in range(df[\"amenities\"].shape[0]):\n  keys = re.findall(r'\\{(.*)\\}', df.loc[_,\"amenities\"])[0].split(\",\")\n  if \"\\\"Wireless Internet\\\"\" in keys:\n    df.loc[row_num, \"Wireless Internet\"] = 1\n  elif \"\\\"Air conditioning\\\"\" in keys:\n    df.loc[row_num, \"Air conditioning\"] = 1\n  elif \"\\\"24-hour check-in\\\"\" in keys:\n    df.loc[row_num, \"24-hour check-in\"] = 1\n  elif \"Pool\" in keys:\n    df.loc[row_num, \"Pool\"] = 1\n  row_num += 1\n</code></pre></div></div>\n\n<h1>\n<span id=\"欠損値の補完\" class=\"fragment\"></span><a href=\"#%E6%AC%A0%E6%90%8D%E5%80%A4%E3%81%AE%E8%A3%9C%E5%AE%8C\"><i class=\"fa fa-link\"></i></a>欠損値の補完</h1>\n\n<p>特徴量として選択した数値データにいくつか欠損値があるため、補完方法を検討。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code> #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   accommodates  55583 non-null  int64  \n 1   bathrooms     55436 non-null  float64\n 2   bedrooms      55512 non-null  float64\n 3   beds          55487 non-null  float64\n</code></pre></div></div>\n\n<p>冒頭で確認した統計量、相関係数より、欠損値のある特徴量は\"accommodates\"と相関が強く出ているため、\"accommodates\"でグループ化し傾向確認。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>temp = ['accommodates', 'bathrooms', 'bedrooms', 'beds']\n\n# 平均値確認\ndf[temp].groupby(\"accommodates\").mean()\n# 中央値確認\ndf[temp].groupby(\"accommodates\").median()\n</code></pre></div></div>\n\n<p>基本的には中央値で補完すれば問題なさそうだが、中央値が取れない要素が数個あるため、当該要素は\"accommodates\"の半分の値で補完。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>pd.options.display.max_rows = 300\ntemp = ['accommodates', 'bathrooms', 'bedrooms', 'beds']\n\n# 欠損値を抽出したデータフレームを作成\ntest = df.loc[df[temp].isnull().any(axis=1),temp]\n\n# bathroomsの欠損箇所を補完\ntest['_bathrooms'] = test.groupby([\"accommodates\"])[\"bathrooms\"].transform(lambda x: x.fillna(x.median()))\ntest.loc[test[\"_bathrooms\"].isna(),\"_bathrooms\"] = test.loc[test[\"_bathrooms\"].isna(), \"accommodates\"] / 2\n\n# bedroomsの欠損箇所を補完\ntest['_bedrooms'] = test.groupby([\"accommodates\"])[\"bedrooms\"].transform(lambda x: x.fillna(x.median()))\ntest.loc[test[\"_bedrooms\"].isna(),\"_bedrooms\"] = test.loc[test[\"_bedrooms\"].isna(), \"accommodates\"] / 2\n\n# bedsの欠損箇所を補完\ntest['_beds'] = test.groupby([\"accommodates\"])[\"beds\"].transform(lambda x: x.fillna(x.median()))\ntest.loc[test[\"_beds\"].isna(), \"_beds\"] = test.loc[test[\"_beds\"].isna(), \"accommodates\"]\n\n# 上記で作成した補完値で元データを補完\ndf.loc[df[\"bathrooms\"].isna() ,\"bathrooms\"] = test['_bathrooms']\ndf.loc[df[\"bedrooms\"].isna() ,\"bedrooms\"] = test['_bedrooms']\ndf.loc[df[\"beds\"].isna() ,\"beds\"] = test['_beds']\n</code></pre></div></div>\n\n<h1>\n<span id=\"回帰分析\" class=\"fragment\"></span><a href=\"#%E5%9B%9E%E5%B8%B0%E5%88%86%E6%9E%90\"><i class=\"fa fa-link\"></i></a>回帰分析</h1>\n\n<p><strong>分析用データ作成</strong><br>\n利用する特徴量でトレーニングデータを作成し、カテゴリーデータをワンホットエンコーディング。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>temp = ['accommodates', 'bathrooms', 'bedrooms', 'beds', '_rev_score', \n        'location', 'host_identity_verified', 'room_type', 'cancellation_policy','y',\n        \"Wireless Internet\", \"Air conditioning\", \"24-hour check-in\", \"Pool\"]\ndf_test = pd.get_dummies(df[temp])\n</code></pre></div></div>\n\n<p><strong>分析</strong><br>\nトレーニングデータをKFoldで分割し分析。<br>\nLinearRegressionのハイパーパラメーター調整はいったんなしで実行。<br>\nスコアはそれほど悪くなさそうです。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>from sklearn.model_selection import KFold, train_test_split\nfrom sklearn.linear_model import LinearRegression\n\nr = list(df_test.columns)\nr.remove(\"y\")\n\nX_train, X_test, y_train, ytest = train_test_split(df_test[r], df_test[\"y\"], random_state=7)\n\ncv = KFold(n_splits=10, random_state=42, shuffle=True)\nacc_results = []\n\nfor trn_index, val_index in cv.split(X_train):\n  X_trn, X_val = X_train.iloc[trn_index], X_train.iloc[val_index]\n  y_trn, y_val = y_train.iloc[trn_index], y_train.iloc[val_index]\n\n  model = LinearRegression()\n  model.fit(X_trn, y_trn)\n  pred = model.predict(X_val)\n  acc = np.sqrt(sum((y_val - pred)**2)/len(y_val))\n  acc_results.append(acc)\n\nnp.mean(acc_results)\n\n---結果---\n129.30577249199695\n</code></pre></div></div>\n\n<p><strong>傾きと切片の確認</strong><br>\n頑張って作った特徴量は、レビュースコア（\"_rev_score\"）以外はそれなりに計算に影響があったようです。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>print(pd.DataFrame(model.coef_, index=r))\nprint(model.intercept_)\n\n---結果---\naccommodates                          19.018487\nbathrooms                             68.747517\nbedrooms                              36.672900\nbeds                                 -11.329242\n_rev_score                            -0.115965\nWireless Internet                    -15.173891\nAir conditioning                      -2.918114\n24-hour check-in                     -11.302865\nPool                                 -52.899458\nlocation_110                          76.621340\nlocation_201                         -14.307127\nlocation_202                          -4.965153\nlocation_203                         -30.172658\nlocation_204                          -3.022386\nlocation_1419                        -27.533552\nlocation_1420                        -30.521696\nlocation_1813                         48.595823\nlocation_1916                        -39.833978\nlocation_1917                         14.953999\nlocation_2020                         10.185389\nhost_identity_verified_f              -2.579610\nhost_identity_verified_t              -8.606028\nroom_type_Entire home/apt             60.211179\nroom_type_Private room               -14.672023\nroom_type_Shared room                -45.539156\ncancellation_policy_flexible         -91.104716\ncancellation_policy_moderate        -102.609632\ncancellation_policy_strict           -93.470902\ncancellation_policy_super_strict_30  -76.781232\ncancellation_policy_super_strict_60  363.966482\n\n84.5255962833438\n</code></pre></div></div>\n\n<p><strong>推測</strong><br>\n別に配布されてるtest.csvをpredictして提出してます。<br>\n結果は　170.8292272　でした。<br>\nトレーニングデータの分析結果とかなり乖離があるので、、もっと追い込めそうですね。。</p>\n",
      "body": "#この記事について\nAidemyの卒業ブログとして記載しています。\n覚えたての手法を実践することが目的のため、分析手法の妥当性、精度についてはいったん保留しています。\n記事はSIGNATEの情報公開ポリシーに沿って公開しているつもりですが、問題があれば削除します。\n\n#データについて\nSIGNATEの[【練習問題】民泊サービスの宿泊価格予測 ](https://signate.jp/competitions/266/data)のデータを利用しています。特徴量のデータ詳細は上記ページを参照ください。\n\n欠損値あり、半分以上カテゴリデータとなってます。\nどの特徴量を使うか、欠損値の埋め方、カテゴリデータの変換方法を考えないとですね。。\n\n```\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 55583 entries, 0 to 55582\nData columns (total 28 columns):\n #   Column                  Non-Null Count  Dtype  \n---  ------                  --------------  -----  \n 0   accommodates            55583 non-null  int64  \n 1   amenities               55583 non-null  object \n 2   bathrooms               55436 non-null  float64\n 3   bed_type                55583 non-null  object \n 4   bedrooms                55512 non-null  float64\n 5   beds                    55487 non-null  float64\n 6   cancellation_policy     55583 non-null  object \n 7   city                    55583 non-null  object \n 8   cleaning_fee            55583 non-null  object \n 9   description             55583 non-null  object \n 10  first_review            43675 non-null  object \n 11  host_has_profile_pic    55435 non-null  object \n 12  host_identity_verified  55435 non-null  object \n 13  host_response_rate      41879 non-null  object \n 14  host_since              55435 non-null  object \n 15  instant_bookable        55583 non-null  object \n 16  last_review             43703 non-null  object \n 17  latitude                55583 non-null  float64\n 18  longitude               55583 non-null  float64\n 19  name                    55583 non-null  object \n 20  neighbourhood           50423 non-null  object \n 21  number_of_reviews       55583 non-null  int64  \n 22  property_type           55583 non-null  object \n 23  review_scores_rating    43027 non-null  float64\n 24  room_type               55583 non-null  object \n 25  thumbnail_url           49438 non-null  object \n 26  zipcode                 54867 non-null  object \n 27  y                       55583 non-null  float64\ndtypes: float64(7), int64(2), object(19)\nmemory usage: 12.3+ MB\n```\n\n#利用する特徴量の検討\n**数値データの傾向確認**\nまずは簡単に確認できる数値データの傾向を確認。\n多重共線性が発生しそうな説明変数同士の強い相関や、問題になりそうな外れ値はありませんでした。（多分）\n\nなお、正解ラベル（\"y\"）と相関の低い特徴量については、以下の対応方針を立てた。\n\n・緯度／経度（'latitude', 'longitude'）については、2つを合成し、新たな特徴量を作成\n・レビュー情報（'number_of_reviews', 'review_scores_rating'）についても、上記同様、合成により新たな特徴量を作成\n\n```\ntemp = ['accommodates', 'bathrooms', 'bedrooms', 'beds', 'latitude',\n       'longitude', 'number_of_reviews', 'review_scores_rating', 'y']\n\n# 統計量\ndf.describe()\n\n# 相関散布図\nsns.pairplot(df[temp])\n\n# 相関行列\ndf[temp].corr()\n\n# 外れ値確認\ndf[temp].boxplot()\n```\n\n参考）正解ラベル\"y\"と説明変数の散布図\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2058950/decc1b0d-44d5-dade-e73f-b6dabbb39d3e.png)\n\n**カテゴリデータの傾向確認**\nカテゴリーデータの統計量より以下の対応方針を検討。\n\n・ユニークデータ数の少ない 'host_identity_verified', 'room_type', 'cancellation_policy' をワンホットラベリング\n・\"amenities\"には{}内に様々な情報が入っているため、分解して、意味ありげな要素で特徴量作成にチャレンジ\n\n```\n# カテゴリデータの統計量把握\ndf.describe(include=\"O\")\n\n# amenitiesデータのサンプル\n{TV,\"Wireless Internet\",Kitchen,\"Free parking on premises\",Washer,Dryer,\"Smoke detector\"}\n```\n\n# 新たな特徴量の作成\n**緯度／経度（'latitude', 'longitude'）の合成**\n実のところ、ロケーションはカテゴリデータに\"city\"があり、6クラスに分けられるが、もっと細かく分けた方が精度が上がるのでは？と言う想定から、'latitude', 'longitude'を20分割するとどうなるかを確認。\n20分割してもそれほど細かく分かれないようなので、このまま'latitude', 'longitude'を合成してみる。\n\n```\n# ヒストグラムで20分割時の傾向把握\ndf[[\"latitude\",\"longitude\"]].hist(bins=20)\n\n# 20分割したデータでカラム作成\n# 両データを合成しても判別できるよう、\"latitude\"はラベルを1~20とし、\"longitude\"は100~2000の100単位でラベルを作成\ndf[\"_lati\"] = pd.cut(df[\"latitude\"],20,labels=range(1,21))\ndf[\"_long\"] = pd.cut(df[\"longitude\"],20,labels=range(100,2001,100))\n# クロス集計\npd.crosstab(df[\"_lati\"], df[\"_long\"])\n```\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2058950/ff1d9e86-2c6a-3f03-c7c1-c107343c2e7b.png)\n\n\n特徴量の合成にはラベルをintに変換して加算。\n後ほどワンホットラベリングのためにdtypeを\"object\"に変換しておく。\n\n```\ndf[\"location\"] = np.array([int(i) for i in df[\"_lati\"].values]) + np.array([int(j) for j in df[\"_long\"].values])\ndf = df.astype({'location': object})\n```\n\n**レビュースコアの合成**\nレビュー数（\"number_of_reviews\"）はレビュースコアの信頼度と考え対数化。\n対数化したレビュー数とレビュースコア（\"review_scores_rating\"）を乗算し特徴量を作成。\n欠損値は0で埋める。\n\n```\ndf[\"_rev_score\"] = df[\"number_of_reviews\"].map(lambda x: np.log(x)) * df[\"review_scores_rating\"]\ndf[\"_rev_score\"] = df[\"_rev_score\"].fillna(0)\n```\n\n**アメニティから特徴量抽出**\n\"amenities\"から要素１つづつ抜き出し、文字列となっている{}内からさらに要素を抽出し辞書化。\n130個の要素を確認。\nその中から一先ずは感覚で\"Wireless Internet\",\"Air conditioning\",\"24-hour check-in\",\"Pool\"を選択。\n\n```\nimport re\nfrom collections import defaultdict\n\ndic = defaultdict(int)\n\nfor _ in range(df[\"amenities\"].shape[0]):\n  keys = re.findall(r'\\{(.*)\\}', df.loc[_,\"amenities\"])[0].split(\",\")\n  for key in keys:\n    dic[key] += 1\n```\n\n上記で選択した\"Wireless Internet\",\"Air conditioning\",\"24-hour check-in\",\"Pool\"でカラムを作成し、ワンホットエンコーディング。\n\n```\nsele = [\"\\\"Wireless Internet\\\"\",\"\\\"Air conditioning\\\"\",\"\\\"24-hour check-in\\\"\",\"Pool\"]\n\ndf[\"Wireless Internet\"] = 0\ndf[\"Air conditioning\"] = 0\ndf[\"24-hour check-in\"] = 0\ndf[\"Pool\"] = 0\n\nrow_num = 0\n\nfor _ in range(df[\"amenities\"].shape[0]):\n  keys = re.findall(r'\\{(.*)\\}', df.loc[_,\"amenities\"])[0].split(\",\")\n  if \"\\\"Wireless Internet\\\"\" in keys:\n    df.loc[row_num, \"Wireless Internet\"] = 1\n  elif \"\\\"Air conditioning\\\"\" in keys:\n    df.loc[row_num, \"Air conditioning\"] = 1\n  elif \"\\\"24-hour check-in\\\"\" in keys:\n    df.loc[row_num, \"24-hour check-in\"] = 1\n  elif \"Pool\" in keys:\n    df.loc[row_num, \"Pool\"] = 1\n  row_num += 1\n```\n\n#欠損値の補完\n特徴量として選択した数値データにいくつか欠損値があるため、補完方法を検討。\n\n```\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   accommodates  55583 non-null  int64  \n 1   bathrooms     55436 non-null  float64\n 2   bedrooms      55512 non-null  float64\n 3   beds          55487 non-null  float64\n```\n\n冒頭で確認した統計量、相関係数より、欠損値のある特徴量は\"accommodates\"と相関が強く出ているため、\"accommodates\"でグループ化し傾向確認。\n\n```\ntemp = ['accommodates', 'bathrooms', 'bedrooms', 'beds']\n\n# 平均値確認\ndf[temp].groupby(\"accommodates\").mean()\n# 中央値確認\ndf[temp].groupby(\"accommodates\").median()\n```\n\n基本的には中央値で補完すれば問題なさそうだが、中央値が取れない要素が数個あるため、当該要素は\"accommodates\"の半分の値で補完。\n\n```\npd.options.display.max_rows = 300\ntemp = ['accommodates', 'bathrooms', 'bedrooms', 'beds']\n\n# 欠損値を抽出したデータフレームを作成\ntest = df.loc[df[temp].isnull().any(axis=1),temp]\n\n# bathroomsの欠損箇所を補完\ntest['_bathrooms'] = test.groupby([\"accommodates\"])[\"bathrooms\"].transform(lambda x: x.fillna(x.median()))\ntest.loc[test[\"_bathrooms\"].isna(),\"_bathrooms\"] = test.loc[test[\"_bathrooms\"].isna(), \"accommodates\"] / 2\n\n# bedroomsの欠損箇所を補完\ntest['_bedrooms'] = test.groupby([\"accommodates\"])[\"bedrooms\"].transform(lambda x: x.fillna(x.median()))\ntest.loc[test[\"_bedrooms\"].isna(),\"_bedrooms\"] = test.loc[test[\"_bedrooms\"].isna(), \"accommodates\"] / 2\n\n# bedsの欠損箇所を補完\ntest['_beds'] = test.groupby([\"accommodates\"])[\"beds\"].transform(lambda x: x.fillna(x.median()))\ntest.loc[test[\"_beds\"].isna(), \"_beds\"] = test.loc[test[\"_beds\"].isna(), \"accommodates\"]\n\n# 上記で作成した補完値で元データを補完\ndf.loc[df[\"bathrooms\"].isna() ,\"bathrooms\"] = test['_bathrooms']\ndf.loc[df[\"bedrooms\"].isna() ,\"bedrooms\"] = test['_bedrooms']\ndf.loc[df[\"beds\"].isna() ,\"beds\"] = test['_beds']\n```\n\n#回帰分析\n**分析用データ作成**\n利用する特徴量でトレーニングデータを作成し、カテゴリーデータをワンホットエンコーディング。\n\n```\ntemp = ['accommodates', 'bathrooms', 'bedrooms', 'beds', '_rev_score', \n        'location', 'host_identity_verified', 'room_type', 'cancellation_policy','y',\n        \"Wireless Internet\", \"Air conditioning\", \"24-hour check-in\", \"Pool\"]\ndf_test = pd.get_dummies(df[temp])\n```\n\n**分析**\nトレーニングデータをKFoldで分割し分析。\nLinearRegressionのハイパーパラメーター調整はいったんなしで実行。\nスコアはそれほど悪くなさそうです。\n\n```\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.linear_model import LinearRegression\n\nr = list(df_test.columns)\nr.remove(\"y\")\n\nX_train, X_test, y_train, ytest = train_test_split(df_test[r], df_test[\"y\"], random_state=7)\n\ncv = KFold(n_splits=10, random_state=42, shuffle=True)\nacc_results = []\n\nfor trn_index, val_index in cv.split(X_train):\n  X_trn, X_val = X_train.iloc[trn_index], X_train.iloc[val_index]\n  y_trn, y_val = y_train.iloc[trn_index], y_train.iloc[val_index]\n\n  model = LinearRegression()\n  model.fit(X_trn, y_trn)\n  pred = model.predict(X_val)\n  acc = np.sqrt(sum((y_val - pred)**2)/len(y_val))\n  acc_results.append(acc)\n\nnp.mean(acc_results)\n\n---結果---\n129.30577249199695\n```\n\n**傾きと切片の確認**\n頑張って作った特徴量は、レビュースコア（\"_rev_score\"）以外はそれなりに計算に影響があったようです。\n\n```\nprint(pd.DataFrame(model.coef_, index=r))\nprint(model.intercept_)\n\n---結果---\naccommodates                          19.018487\nbathrooms                             68.747517\nbedrooms                              36.672900\nbeds                                 -11.329242\n_rev_score                            -0.115965\nWireless Internet                    -15.173891\nAir conditioning                      -2.918114\n24-hour check-in                     -11.302865\nPool                                 -52.899458\nlocation_110                          76.621340\nlocation_201                         -14.307127\nlocation_202                          -4.965153\nlocation_203                         -30.172658\nlocation_204                          -3.022386\nlocation_1419                        -27.533552\nlocation_1420                        -30.521696\nlocation_1813                         48.595823\nlocation_1916                        -39.833978\nlocation_1917                         14.953999\nlocation_2020                         10.185389\nhost_identity_verified_f              -2.579610\nhost_identity_verified_t              -8.606028\nroom_type_Entire home/apt             60.211179\nroom_type_Private room               -14.672023\nroom_type_Shared room                -45.539156\ncancellation_policy_flexible         -91.104716\ncancellation_policy_moderate        -102.609632\ncancellation_policy_strict           -93.470902\ncancellation_policy_super_strict_30  -76.781232\ncancellation_policy_super_strict_60  363.966482\n\n84.5255962833438\n```\n\n**推測**\n別に配布されてるtest.csvをpredictして提出してます。\n結果は　170.8292272　でした。\nトレーニングデータの分析結果とかなり乖離があるので、、もっと追い込めそうですね。。\n\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2021-09-30T00:31:03+09:00",
      "group": null,
      "id": "2f86f1b78c64c0e7bcb7",
      "likes_count": 0,
      "private": false,
      "reactions_count": 0,
      "tags": [
          {
              "name": "Python",
              "versions": []
          },
          {
              "name": "回帰分析",
              "versions": []
          },
          {
              "name": "SIGNATE",
              "versions": []
          }
      ],
      "title": "初学者のSIGNATE_宿泊の価格予測",
      "updated_at": "2021-09-30T00:33:18+09:00",
      "url": "https://qiita.com/ramutarafarm/items/2f86f1b78c64c0e7bcb7",
      "user": {
          "description": "",
          "facebook_id": "",
          "followees_count": 0,
          "followers_count": 0,
          "github_login_name": null,
          "id": "ramutarafarm",
          "items_count": 4,
          "linkedin_id": "",
          "location": "",
          "name": "",
          "organization": "",
          "permanent_id": 2058950,
          "profile_image_url": "https://lh3.googleusercontent.com/a/AATXAJxn7uwJ5zCQncEVQr1Nth2Bug4iVg81Pc3vfgUy=s50-mo",
          "team_only": false,
          "twitter_screen_name": "mayamaguchi2",
          "website_url": ""
      },
      "page_views_count": null,
      "team_membership": null
  },
  {
      "rendered_body": "\n<h2>\n<span id=\"概要\" class=\"fragment\"></span><a href=\"#%E6%A6%82%E8%A6%81\"><i class=\"fa fa-link\"></i></a>概要</h2>\n\n<p>SQLの検索条件に IS NULL や IS NOT NULL を使用する際にはインデックスは使用されないというものだと思ったが、実際にはインデックスが使用されるようなので確認してみた</p>\n\n<p><qiita-embed-ogp src=\"https://dev.mysql.com/doc/refman/5.6/ja/is-null-optimization.html\"></qiita-embed-ogp></p>\n\n<h2>\n<span id=\"環境\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>環境</h2>\n\n<ul>\n<li>mysql 8.0.23</li>\n</ul>\n\n<h2>\n<span id=\"テストデータの作成\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>テストデータの作成</h2>\n\n<ul>\n<li>title（インデックスあり）と body（インデックスなし）のカラムを作成し、両者とも同じ値を格納</li>\n<li>ストアドプロシージャを使用してテストデータを作成</li>\n<li>title・bodyカラムに入れる値は1から始まり、10件数ごとにnull値を入れることを繰り返して100000レコード作成する</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"sql\"><div class=\"highlight\"><pre><code><span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"k\">CREATE</span> <span class=\"k\">DATABASE</span> <span class=\"n\">sample</span> <span class=\"nb\">character</span> <span class=\"k\">SET</span> <span class=\"n\">utf8mb4</span><span class=\"p\">;</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"n\">messages</span> <span class=\"p\">(</span>\n         <span class=\"n\">id</span> <span class=\"nb\">INT</span> <span class=\"n\">AUTO_INCREMENT</span> <span class=\"k\">PRIMARY</span> <span class=\"k\">KEY</span><span class=\"p\">,</span>\n         <span class=\"n\">title</span> <span class=\"nb\">varchar</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">),</span>\n         <span class=\"n\">body</span> <span class=\"nb\">varchar</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">),</span>\n         <span class=\"k\">index</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">)</span>\n       <span class=\"p\">);</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"k\">DELIMITER</span> <span class=\"o\">//</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"k\">CREATE</span> <span class=\"k\">PROCEDURE</span> <span class=\"n\">create_test_data</span><span class=\"p\">(</span><span class=\"k\">IN</span> <span class=\"n\">i</span> <span class=\"nb\">INT</span><span class=\"p\">)</span>\n       <span class=\"k\">BEGIN</span>\n         <span class=\"k\">DECLARE</span> <span class=\"n\">cnt</span> <span class=\"nb\">INT</span> <span class=\"k\">DEFAULT</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n         <span class=\"k\">DECLARE</span> <span class=\"n\">v</span> <span class=\"nb\">VARCHAR</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">);</span>\n         <span class=\"n\">WHILE</span> <span class=\"n\">cnt</span> <span class=\"o\">&lt;</span> <span class=\"n\">i</span> <span class=\"k\">do</span>\n           <span class=\"k\">SET</span> <span class=\"n\">cnt</span> <span class=\"o\">=</span> <span class=\"n\">cnt</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n           <span class=\"n\">IF</span> <span class=\"p\">(</span><span class=\"n\">cnt</span> <span class=\"o\">%</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span> <span class=\"k\">THEN</span> <span class=\"k\">SET</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">cnt</span><span class=\"p\">;</span>\n           <span class=\"k\">ELSE</span> <span class=\"k\">SET</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"k\">null</span><span class=\"p\">;</span>\n           <span class=\"k\">END</span> <span class=\"n\">IF</span><span class=\"p\">;</span>\n           <span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">messages</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"p\">)</span> <span class=\"k\">VALUES</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">);</span>\n         <span class=\"k\">END</span> <span class=\"n\">WHILE</span><span class=\"p\">;</span>\n       <span class=\"k\">END</span>\n       <span class=\"o\">//</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"k\">DELIMITER</span> <span class=\"p\">;</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"k\">CALL</span> <span class=\"n\">create_test_data</span><span class=\"p\">(</span><span class=\"mi\">100000</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<h3>\n<span id=\"テーブルの中身\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB%E3%81%AE%E4%B8%AD%E8%BA%AB\"><i class=\"fa fa-link\"></i></a>テーブルの中身</h3>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>mysql&gt; SELECT * FROM messages limit 10;\n+----+-------+------+\n| id | title | body |\n+----+-------+------+\n|  1 | 1     | 1    |\n|  2 | 2     | 2    |\n|  3 | 3     | 3    |\n|  4 | 4     | 4    |\n|  5 | 5     | 5    |\n|  6 | 6     | 6    |\n|  7 | 7     | 7    |\n|  8 | 8     | 8    |\n|  9 | 9     | 9    |\n| 10 | NULL  | NULL |\n+----+-------+------+\n10 rows in set (0.00 sec)\n\nmysql&gt; SELECT COUNT(*) FROM messages;\n+----------+\n| COUNT(*) |\n+----------+\n|   100000 |\n+----------+\n1 row in set (0.01 sec)\n\nmysql&gt; SELECT COUNT(*) FROM messages WHERE title IS NULL;\n+----------+\n| COUNT(*) |\n+----------+\n|    10000 |\n+----------+\n1 row in set (0.00 sec)\n\nmysql&gt; SELECT COUNT(*) FROM messages WHERE body IS NULL;\n+----------+\n| COUNT(*) |\n+----------+\n|    10000 |\n+----------+\n1 row in set (0.03 sec)\n</code></pre></div></div>\n\n<h2>\n<span id=\"is-null\" class=\"fragment\"></span><a href=\"#is-null\"><i class=\"fa fa-link\"></i></a>IS NULL</h2>\n\n<h3>\n<span id=\"インデックスなしの場合\" class=\"fragment\"></span><a href=\"#%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9%E3%81%AA%E3%81%97%E3%81%AE%E5%A0%B4%E5%90%88\"><i class=\"fa fa-link\"></i></a>インデックスなしの場合</h3>\n\n<ul>\n<li>typeはALL、rowsは 約100000 件のためテーブルフルスキャンが行われている</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>mysql&gt; EXPLAIN SELECT COUNT(*) FROM messages WHERE body IS NULL;\n+----+-------------+----------+------------+------+---------------+------+---------+------+--------+----------+-------------+\n| id | select_type | table    | partitions | type | possible_keys | key  | key_len | ref  | rows   | filtered | Extra       |\n+----+-------------+----------+------------+------+---------------+------+---------+------+--------+----------+-------------+\n|  1 | SIMPLE      | messages | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 100080 |    10.00 | Using where |\n+----+-------------+----------+------------+------+---------------+------+---------+------+--------+----------+-------------+\n1 row in set, 1 warning (0.00 sec)\n</code></pre></div></div>\n\n<h3>\n<span id=\"インデックスありの場合\" class=\"fragment\"></span><a href=\"#%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9%E3%81%82%E3%82%8A%E3%81%AE%E5%A0%B4%E5%90%88\"><i class=\"fa fa-link\"></i></a>インデックスありの場合</h3>\n\n<ul>\n<li>typeはrefでpossible_keysにtitle、ExtraにもUsing indexとあり、indexが使用されていることが確認できる</li>\n<li>rowsは 10000 件であり、テーブルに存在するNULLレコードの件数と一致する</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>mysql&gt; EXPLAIN SELECT COUNT(*) FROM messages WHERE title IS NULL;\n+----+-------------+----------+------------+------+---------------+-------+---------+-------+-------+----------+--------------------------+\n| id | select_type | table    | partitions | type | possible_keys | key   | key_len | ref   | rows  | filtered | Extra                    |\n+----+-------------+----------+------------+------+---------------+-------+---------+-------+-------+----------+--------------------------+\n|  1 | SIMPLE      | messages | NULL       | ref  | title         | title | 163     | const | 10000 |   100.00 | Using where; Using index |\n+----+-------------+----------+------------+------+---------------+-------+---------+-------+-------+----------+--------------------------+\n1 row in set, 1 warning (0.00 sec)\n</code></pre></div></div>\n\n<h2>\n<span id=\"is-not-null\" class=\"fragment\"></span><a href=\"#is-not-null\"><i class=\"fa fa-link\"></i></a>IS NOT NULL</h2>\n\n<h3>\n<span id=\"インデックスなしの場合-1\" class=\"fragment\"></span><a href=\"#%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9%E3%81%AA%E3%81%97%E3%81%AE%E5%A0%B4%E5%90%88-1\"><i class=\"fa fa-link\"></i></a>インデックスなしの場合</h3>\n\n<ul>\n<li>typeはALL、rowsは 約100000 件のためテーブルフルスキャンが行われている</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>mysql&gt; EXPLAIN SELECT COUNT(*) FROM messages WHERE body IS NOT NULL;\n+----+-------------+----------+------------+------+---------------+------+---------+------+--------+----------+-------------+\n| id | select_type | table    | partitions | type | possible_keys | key  | key_len | ref  | rows   | filtered | Extra       |\n+----+-------------+----------+------------+------+---------------+------+---------+------+--------+----------+-------------+\n|  1 | SIMPLE      | messages | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 100080 |    90.00 | Using where |\n+----+-------------+----------+------------+------+---------------+------+---------+------+--------+----------+-------------+\n1 row in set, 1 warning (0.00 sec)\n</code></pre></div></div>\n\n<h3>\n<span id=\"インデックスありの場合-1\" class=\"fragment\"></span><a href=\"#%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9%E3%81%82%E3%82%8A%E3%81%AE%E5%A0%B4%E5%90%88-1\"><i class=\"fa fa-link\"></i></a>インデックスありの場合</h3>\n\n<ul>\n<li>typeはrangeでpossible_keysにtitle、ExtraにもUsing indexとある</li>\n<li>rowsは 50000 件</li>\n<li>どのように探索範囲を決めているかわからなかったが、IS NOT NULL が検索条件にある際もインデックスが使用されていることが確認できた</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>mysql&gt; EXPLAIN SELECT COUNT(*) FROM messages WHERE title IS NOT NULL;\n+----+-------------+----------+------------+-------+---------------+-------+---------+------+-------+----------+--------------------------+\n| id | select_type | table    | partitions | type  | possible_keys | key   | key_len | ref  | rows  | filtered | Extra                    |\n+----+-------------+----------+------------+-------+---------------+-------+---------+------+-------+----------+--------------------------+\n|  1 | SIMPLE      | messages | NULL       | range | title         | title | 163     | NULL | 50040 |   100.00 | Using where; Using index |\n+----+-------------+----------+------------+-------+---------------+-------+---------+------+-------+----------+--------------------------+\n1 row in set, 1 warning (0.00 sec)\n</code></pre></div></div>\n\n<h2>\n<span id=\"mysql以外のdbについて\" class=\"fragment\"></span><a href=\"#mysql%E4%BB%A5%E5%A4%96%E3%81%AEdb%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>MySQL以外のDBについて</h2>\n\n<ul>\n<li>実際に確認したわけではないですが、MySQLに限らず、PostgreSQLでも検索条件にNULLを指定した際にはインデックスが使用されているらしい</li>\n</ul>\n\n<h3>\n<span id=\"postgresql\" class=\"fragment\"></span><a href=\"#postgresql\"><i class=\"fa fa-link\"></i></a>PostgreSQL</h3>\n\n<blockquote>\n<p>インデックスの付いた列に対するIS NULLやIS NOT NULLでもB-treeインデックスを使用することができます。</p>\n</blockquote>\n\n<p><qiita-embed-ogp src=\"https://www.postgresql.jp/document/13/html/indexes-types.html\"></qiita-embed-ogp></p>\n\n<h2>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h2>\n\n<ul>\n<li><a href=\"https://techblog.istyle.co.jp/archives/1514\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://techblog.istyle.co.jp/archives/1514</a></li>\n</ul>\n",
      "body": "## 概要\n\nSQLの検索条件に IS NULL や IS NOT NULL を使用する際にはインデックスは使用されないというものだと思ったが、実際にはインデックスが使用されるようなので確認してみた\n\nhttps://dev.mysql.com/doc/refman/5.6/ja/is-null-optimization.html\n\n## 環境\n- mysql 8.0.23\n\n## テストデータの作成\n\n- title（インデックスあり）と body（インデックスなし）のカラムを作成し、両者とも同じ値を格納\n- ストアドプロシージャを使用してテストデータを作成\n- title・bodyカラムに入れる値は1から始まり、10件数ごとにnull値を入れることを繰り返して100000レコード作成する\n\n```sql\nmysql> CREATE DATABASE sample character SET utf8mb4;\nmysql> CREATE TABLE messages (\n         id INT AUTO_INCREMENT PRIMARY KEY,\n         title varchar(40),\n         body varchar(40),\n         index(title)\n       );\nmysql> DELIMITER //\nmysql> CREATE PROCEDURE create_test_data(IN i INT)\n       BEGIN\n         DECLARE cnt INT DEFAULT 0;\n         DECLARE v VARCHAR(10);\n         WHILE cnt < i do\n           SET cnt = cnt + 1;\n           IF (cnt % 10) != 0 THEN SET v = cnt;\n           ELSE SET v = null;\n           END IF;\n           INSERT INTO messages(title, body) VALUES(v, v);\n         END WHILE;\n       END\n       //\nmysql> DELIMITER ;\nmysql> CALL create_test_data(100000);\n```\n\n### テーブルの中身\n\n```\nmysql> SELECT * FROM messages limit 10;\n+----+-------+------+\n| id | title | body |\n+----+-------+------+\n|  1 | 1     | 1    |\n|  2 | 2     | 2    |\n|  3 | 3     | 3    |\n|  4 | 4     | 4    |\n|  5 | 5     | 5    |\n|  6 | 6     | 6    |\n|  7 | 7     | 7    |\n|  8 | 8     | 8    |\n|  9 | 9     | 9    |\n| 10 | NULL  | NULL |\n+----+-------+------+\n10 rows in set (0.00 sec)\n\nmysql> SELECT COUNT(*) FROM messages;\n+----------+\n| COUNT(*) |\n+----------+\n|   100000 |\n+----------+\n1 row in set (0.01 sec)\n\nmysql> SELECT COUNT(*) FROM messages WHERE title IS NULL;\n+----------+\n| COUNT(*) |\n+----------+\n|    10000 |\n+----------+\n1 row in set (0.00 sec)\n\nmysql> SELECT COUNT(*) FROM messages WHERE body IS NULL;\n+----------+\n| COUNT(*) |\n+----------+\n|    10000 |\n+----------+\n1 row in set (0.03 sec)\n```\n\n\n\n## IS NULL\n\n### インデックスなしの場合\n\n- typeはALL、rowsは 約100000 件のためテーブルフルスキャンが行われている\n\n```\nmysql> EXPLAIN SELECT COUNT(*) FROM messages WHERE body IS NULL;\n+----+-------------+----------+------------+------+---------------+------+---------+------+--------+----------+-------------+\n| id | select_type | table    | partitions | type | possible_keys | key  | key_len | ref  | rows   | filtered | Extra       |\n+----+-------------+----------+------------+------+---------------+------+---------+------+--------+----------+-------------+\n|  1 | SIMPLE      | messages | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 100080 |    10.00 | Using where |\n+----+-------------+----------+------------+------+---------------+------+---------+------+--------+----------+-------------+\n1 row in set, 1 warning (0.00 sec)\n```\n\n### インデックスありの場合\n\n- typeはrefでpossible_keysにtitle\b、ExtraにもUsing indexとあり、indexが使用されていることが確認できる\n- rowsは 10000 件であり、テーブルに存在するNULLレコードの件数と一致する\n\n```\nmysql> EXPLAIN SELECT COUNT(*) FROM messages WHERE title IS NULL;\n+----+-------------+----------+------------+------+---------------+-------+---------+-------+-------+----------+--------------------------+\n| id | select_type | table    | partitions | type | possible_keys | key   | key_len | ref   | rows  | filtered | Extra                    |\n+----+-------------+----------+------------+------+---------------+-------+---------+-------+-------+----------+--------------------------+\n|  1 | SIMPLE      | messages | NULL       | ref  | title         | title | 163     | const | 10000 |   100.00 | Using where; Using index |\n+----+-------------+----------+------------+------+---------------+-------+---------+-------+-------+----------+--------------------------+\n1 row in set, 1 warning (0.00 sec)\n```\n\n## IS NOT NULL\n\n### インデックスなしの場合\n\n- typeはALL、rowsは 約100000 件のためテーブルフルスキャンが行われている\n\n```\nmysql> EXPLAIN SELECT COUNT(*) FROM messages WHERE body IS NOT NULL;\n+----+-------------+----------+------------+------+---------------+------+---------+------+--------+----------+-------------+\n| id | select_type | table    | partitions | type | possible_keys | key  | key_len | ref  | rows   | filtered | Extra       |\n+----+-------------+----------+------------+------+---------------+------+---------+------+--------+----------+-------------+\n|  1 | SIMPLE      | messages | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 100080 |    90.00 | Using where |\n+----+-------------+----------+------------+------+---------------+------+---------+------+--------+----------+-------------+\n1 row in set, 1 warning (0.00 sec)\n``` \n\n\n### インデックスありの場合\n\n- typeはrangeでpossible_keysにtitle\b、ExtraにもUsing indexとある\n- rowsは 50000 件\n- どのように探索範囲を決めているかわからなかったが、IS NOT NULL が検索条件にある際もインデックスが使用されていることが確認できた\n\n```\nmysql> EXPLAIN SELECT COUNT(*) FROM messages WHERE title IS NOT NULL;\n+----+-------------+----------+------------+-------+---------------+-------+---------+------+-------+----------+--------------------------+\n| id | select_type | table    | partitions | type  | possible_keys | key   | key_len | ref  | rows  | filtered | Extra                    |\n+----+-------------+----------+------------+-------+---------------+-------+---------+------+-------+----------+--------------------------+\n|  1 | SIMPLE      | messages | NULL       | range | title         | title | 163     | NULL | 50040 |   100.00 | Using where; Using index |\n+----+-------------+----------+------------+-------+---------------+-------+---------+------+-------+----------+--------------------------+\n1 row in set, 1 warning (0.00 sec)\n```\n\n\n## MySQL以外のDBについて\n- 実際に確認したわけではないですが、MySQLに限らず、PostgreSQLでも検索条件にNULLを指定した際にはインデックスが使用されているらしい\n\n### PostgreSQL\n>  インデックスの付いた列に対するIS NULLやIS NOT NULLでもB-treeインデックスを使用することができます。\n\nhttps://www.postgresql.jp/document/13/html/indexes-types.html\n\n## 参考\n- https://techblog.istyle.co.jp/archives/1514\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2021-09-30T00:27:47+09:00",
      "group": null,
      "id": "6c9d3018c6ab8fbef7bb",
      "likes_count": 0,
      "private": false,
      "reactions_count": 0,
      "tags": [
          {
              "name": "MySQL",
              "versions": []
          },
          {
              "name": "SQL",
              "versions": []
          },
          {
              "name": "インデックス",
              "versions": []
          }
      ],
      "title": "【MySQL】IS NULL でもインデックスは使用される",
      "updated_at": "2021-09-30T00:27:47+09:00",
      "url": "https://qiita.com/omukaik/items/6c9d3018c6ab8fbef7bb",
      "user": {
          "description": null,
          "facebook_id": null,
          "followees_count": 3,
          "followers_count": 2,
          "github_login_name": null,
          "id": "omukaik",
          "items_count": 26,
          "linkedin_id": null,
          "location": null,
          "name": "",
          "organization": null,
          "permanent_id": 366054,
          "profile_image_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/366054/5f42e39fa422cfa7acfef12d150e62390f0eee54/large.png?1605098772",
          "team_only": false,
          "twitter_screen_name": null,
          "website_url": null
      },
      "page_views_count": null,
      "team_membership": null
  },
  {
      "rendered_body": "<p>詳細は後ほど編集しなおします<br>\nとりあえずコードをうつす</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>import org.apache.spark.sql.SparkSession\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.types._\nimport org.apache.spark.ml.feature.VectorAssembler\nimport org.apache.spark.ml.regression.LinearRegression\nimport org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.feature.{OneHotEncoder, StringIndexer}\nimport org.apache.spark.ml.feature.RFormula\nimport org.apache.spark.ml.evaluation.RegressionEvaluator\n\nval filePath = \"/home/ubuntu/LearningSparkV2/databricks-datasets/learning-spark-v2/sf-airbnb/sf-airbnb-clean.parquet/\"\nval airbnbDF = spark.read.parquet(filePath)\nval Array(trainDF, testDF) = airbnbDF.randomSplit(Array(.8, .2), seed=42)\n\nval vecAssembler = new VectorAssembler().setInputCols(Array(\"bedrooms\", \"bathrooms\")).setOutputCol(\"features\")\nval lr = new LinearRegression().setFeaturesCol(\"features\").setLabelCol(\"price\")\n\nval pipeline = new Pipeline().setStages(Array(vecAssembler, lr))\nval pipelineModel = pipeline.fit(trainDF)\nval predDF = pipelineModel.transform(testDF)\n\n\nval categoricalCols = trainDF.dtypes.filter(_._2 == \"StringType\").map(_._1)\nval indexOutputCols = categoricalCols.map(_ + \"index\")\nval oheOutputCols = categoricalCols.map(_ + \"OHE\")\n\nval stringIndexer = new StringIndexer().setInputCols(categoricalCols).setOutputCols(indexOutputCols).setHandleInvalid(\"skip\")\nval oheEncoder = new OneHotEncoder().setInputCols(categoricalCols).setOutputCols(oheOutputCols)\nval numericCols = trainDF.dtypes.filter{ case (field, dataType) =&gt; dataType == \"DoubleType\" &amp;&amp; field != \"price\"}.map(_._1)\nval assemblerInputs = categoricalCols ++ numericCols\nval vecAssembler = new VectorAssembler().setInputCols(assemblerInputs).setOutputCol(\"features\")\n\nval lr = new LinearRegression().setLabelCol(\"price\").setFeaturesCol(\"features\n\")\nval pipeline = new Pipeline().setStages(Array(stringIndexer, oheEncoder, vecAssembler, lr)\nval pipelineModel = pipeline.fit(trainDF)\nここでなぜかエラー\nERROR Instrumentation: java.lang.IllegalArgumentException: requirement failed: Column host_is_superhost must be of type numeric but was actually of type string.\n以下でも同じらしい(強制的にoheになるからそれでいい時だけっぽい、ただoheするなら以下が処理早いそう)\n\nval rFormula = new RFormula().setFormula(\"price ~ .\").setFeaturesCol(\"features\").setLabelCol(\"price\").setHandleInvalid(\"skip\")\nval pipeline = new Pipeline().setStages(Array(rFormula, lr))\nval pipelineModel = pipeline.fit(trainDF)\nval predDF = pipelineModel.transform(testDF)\n\nval regressionEvaluator = new RegressionEvaluator().setPredictionCol(\"prediction\").setLabelCol(\"price\").setMetricName(\"rmse\")\nval rmse = regressionEvaluator.evaluate(predDF)\n</code></pre></div></div>\n",
      "body": "詳細は後ほど編集しなおします\nとりあえずコードをうつす\n\n```\nimport org.apache.spark.sql.SparkSession\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.types._\nimport org.apache.spark.ml.feature.VectorAssembler\nimport org.apache.spark.ml.regression.LinearRegression\nimport org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.feature.{OneHotEncoder, StringIndexer}\nimport org.apache.spark.ml.feature.RFormula\nimport org.apache.spark.ml.evaluation.RegressionEvaluator\n\nval filePath = \"/home/ubuntu/LearningSparkV2/databricks-datasets/learning-spark-v2/sf-airbnb/sf-airbnb-clean.parquet/\"\nval airbnbDF = spark.read.parquet(filePath)\nval Array(trainDF, testDF) = airbnbDF.randomSplit(Array(.8, .2), seed=42)\n\nval vecAssembler = new VectorAssembler().setInputCols(Array(\"bedrooms\", \"bathrooms\")).setOutputCol(\"features\")\nval lr = new LinearRegression().setFeaturesCol(\"features\").setLabelCol(\"price\")\n\nval pipeline = new Pipeline().setStages(Array(vecAssembler, lr))\nval pipelineModel = pipeline.fit(trainDF)\nval predDF = pipelineModel.transform(testDF)\n\n\nval categoricalCols = trainDF.dtypes.filter(_._2 == \"StringType\").map(_._1)\nval indexOutputCols = categoricalCols.map(_ + \"index\")\nval oheOutputCols = categoricalCols.map(_ + \"OHE\")\n\nval stringIndexer = new StringIndexer().setInputCols(categoricalCols).setOutputCols(indexOutputCols).setHandleInvalid(\"skip\")\nval oheEncoder = new OneHotEncoder().setInputCols(categoricalCols).setOutputCols(oheOutputCols)\nval numericCols = trainDF.dtypes.filter{ case (field, dataType) => dataType == \"DoubleType\" && field != \"price\"}.map(_._1)\nval assemblerInputs = categoricalCols ++ numericCols\nval vecAssembler = new VectorAssembler().setInputCols(assemblerInputs).setOutputCol(\"features\")\n\nval lr = new LinearRegression().setLabelCol(\"price\").setFeaturesCol(\"features\n\")\nval pipeline = new Pipeline().setStages(Array(stringIndexer, oheEncoder, vecAssembler, lr)\nval pipelineModel = pipeline.fit(trainDF)\nここでなぜかエラー\nERROR Instrumentation: java.lang.IllegalArgumentException: requirement failed: Column host_is_superhost must be of type numeric but was actually of type string.\n以下でも同じらしい(強制的にoheになるからそれでいい時だけっぽい、ただoheするなら以下が処理早いそう)\n\nval rFormula = new RFormula().setFormula(\"price ~ .\").setFeaturesCol(\"features\").setLabelCol(\"price\").setHandleInvalid(\"skip\")\nval pipeline = new Pipeline().setStages(Array(rFormula, lr))\nval pipelineModel = pipeline.fit(trainDF)\nval predDF = pipelineModel.transform(testDF)\n\nval regressionEvaluator = new RegressionEvaluator().setPredictionCol(\"prediction\").setLabelCol(\"price\").setMetricName(\"rmse\")\nval rmse = regressionEvaluator.evaluate(predDF)\n```\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2021-09-30T00:24:56+09:00",
      "group": null,
      "id": "6a3ef24c5f9bc953a1e8",
      "likes_count": 0,
      "private": false,
      "reactions_count": 0,
      "tags": [
          {
              "name": "Spark",
              "versions": []
          }
      ],
      "title": "scala spark勉強備忘録⑤ とりあえず機械学習",
      "updated_at": "2021-09-30T00:24:56+09:00",
      "url": "https://qiita.com/758syun/items/6a3ef24c5f9bc953a1e8",
      "user": {
          "description": "見習いデータサイエンティストです",
          "facebook_id": "",
          "followees_count": 1,
          "followers_count": 0,
          "github_login_name": "758syun",
          "id": "758syun",
          "items_count": 6,
          "linkedin_id": "",
          "location": "",
          "name": "104 754",
          "organization": "",
          "permanent_id": 224486,
          "profile_image_url": "https://pbs.twimg.com/profile_images/858360550429835264/zRO2eYGu_normal.jpg",
          "team_only": false,
          "twitter_screen_name": "758syun",
          "website_url": ""
      },
      "page_views_count": null,
      "team_membership": null
  },
  {
      "rendered_body": "<p>sfdxコマンドを使ったリリース手順を整理しました。</p>\n\n<h2>\n<span id=\"リリース用メタデータの作成\" class=\"fragment\"></span><a href=\"#%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E7%94%A8%E3%83%A1%E3%82%BF%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>リリース用メタデータの作成</h2>\n\n<ul>\n<li>sfdxプロジェクトでsfdxコマンドを実行してリリース用メタデータを作成する</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\">\n<div class=\"code-lang\"><span class=\"bold\">​sfdxコマンド.</span></div>\n<div class=\"highlight\"><pre><code>sfdx force:source:convert -d ./リリース用メタデータ出力先のパス -x ./リリース用package.xmlのパス\n</code></pre></div>\n</div>\n\n<p>​</p>\n\n<ul>\n<li>リリース用メタデータ出力先のパスにリリース用メタデータが作成されたことを確認する\n​</li>\n</ul>\n\n<h2>\n<span id=\"メタデータのリリース検証\" class=\"fragment\"></span><a href=\"#%E3%83%A1%E3%82%BF%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E6%A4%9C%E8%A8%BC\"><i class=\"fa fa-link\"></i></a>メタデータのリリース検証</h2>\n\n<p>前項のリリース用メタデータをsfdxコマンドでリリース検証する。<br>\n※事前にデプロイ先Salesforce組織の認証を実施しておくこと。</p>\n\n<div class=\"code-frame\" data-lang=\"text\">\n<div class=\"code-lang\"><span class=\"bold\">sfdxコマンド（ローカルテスト全実行の場合）.</span></div>\n<div class=\"highlight\"><pre><code>sfdx force:mdapi:deploy -d ./リリース用メタデータ出力先のパス -u リリース先環境のエイリアス --checkonly --testlevel RunLocalTests\n</code></pre></div>\n</div>\n\n<p>​</p>\n\n<div class=\"code-frame\" data-lang=\"text\">\n<div class=\"code-lang\"><span class=\"bold\">sfdxコマンド（テストクラス指定実行の場合）.</span></div>\n<div class=\"highlight\"><pre><code>sfdx force:mdapi:deploy -d ./リリース用メタデータ出力先のパス -u リリース先環境のエイリアス --checkonly --testlevel RunSpecifiedTests -r Test01,Test02\n</code></pre></div>\n</div>\n\n<h2>\n<span id=\"メタデータのリリース検証状況の確認\" class=\"fragment\"></span><a href=\"#%E3%83%A1%E3%82%BF%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E6%A4%9C%E8%A8%BC%E7%8A%B6%E6%B3%81%E3%81%AE%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>メタデータのリリース検証状況の確認</h2>\n\n<p>Salesforceのリリース状況画面でメタデータのリリース検証状況を確認する</p>\n\n<h2>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h2>\n\n<p>■Salesforce CLI Command Reference<br>\n<a href=\"https://developer.salesforce.com/docs/atlas.en-us.sfdx_cli_reference.meta/sfdx_cli_reference/cli_reference_force_source.htm\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://developer.salesforce.com/docs/atlas.en-us.sfdx_cli_reference.meta/sfdx_cli_reference/cli_reference_force_source.htm</a></p>\n",
      "body": "sfdxコマンドを使ったリリース手順を整理しました。\n\n## リリース用メタデータの作成\n- sfdxプロジェクトでsfdxコマンドを実行してリリース用メタデータを作成する\n\n``` ​sfdxコマンド.\nsfdx force:source:convert -d ./リリース用メタデータ出力先のパス -x ./リリース用package.xmlのパス\n```\n​\n\n- リリース用メタデータ出力先のパスにリリース用メタデータが作成されたことを確認する\n​\n\n## メタデータのリリース検証\n前項のリリース用メタデータをsfdxコマンドでリリース検証する。\n※事前にデプロイ先Salesforce組織の認証を実施しておくこと。\n\n``` sfdxコマンド（ローカルテスト全実行の場合）.\nsfdx force:mdapi:deploy -d ./リリース用メタデータ出力先のパス -u リリース先環境のエイリアス --checkonly --testlevel RunLocalTests\n```\n​\n\n``` sfdxコマンド（テストクラス指定実行の場合）.\nsfdx force:mdapi:deploy -d ./リリース用メタデータ出力先のパス -u リリース先環境のエイリアス --checkonly --testlevel RunSpecifiedTests -r Test01,Test02\n```\n\n## メタデータのリリース検証状況の確認\nSalesforceのリリース状況画面でメタデータのリリース検証状況を確認する\n\n## 参考\n■Salesforce CLI Command Reference\nhttps://developer.salesforce.com/docs/atlas.en-us.sfdx_cli_reference.meta/sfdx_cli_reference/cli_reference_force_source.htm\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2021-09-30T00:23:20+09:00",
      "group": null,
      "id": "276d1777de6ce76dd849",
      "likes_count": 0,
      "private": false,
      "reactions_count": 0,
      "tags": [
          {
              "name": "Salesforce",
              "versions": []
          },
          {
              "name": "SFDX",
              "versions": []
          }
      ],
      "title": "【Salesforce】sfdxコマンドを使ったリリース手順",
      "updated_at": "2021-09-30T00:23:20+09:00",
      "url": "https://qiita.com/quroooos/items/276d1777de6ce76dd849",
      "user": {
          "description": null,
          "facebook_id": null,
          "followees_count": 0,
          "followers_count": 2,
          "github_login_name": null,
          "id": "quroooos",
          "items_count": 20,
          "linkedin_id": null,
          "location": null,
          "name": "",
          "organization": null,
          "permanent_id": 611228,
          "profile_image_url": "https://secure.gravatar.com/avatar/5d550ac454be1987cbd781bc7f046e57",
          "team_only": false,
          "twitter_screen_name": null,
          "website_url": null
      },
      "page_views_count": null,
      "team_membership": null
  },
  {
      "rendered_body": "\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p>実務1ヵ月たったところで、備忘録として残しておくため投稿させていただきました。<br>\n今回はDto作成する際にでてきたBuilderについて調べてました。</p>\n\n<h1>\n<span id=\"builderパターンとは\" class=\"fragment\"></span><a href=\"#builder%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>Builderパターンとは</h1>\n\n<p>代表的なBuilderパターンは二つあって、一つはGoF（Gang of Four; 4人のギャングたち）によって定義されたデザインパターンの1つであって、Builderパターンはその中でも<strong>「作成系」デザインパターン、オブジェクト作成メカニズムを扱うデザインパターン</strong>です。オブジェクトの生成過程を抽象化することによって、動的なオブジェクトの生成を可能にすることが目的です。<br>\nもう一つは「Effective Java」による、Builderパターンでしょう。こちらは、コンストラクタに多数のコンストラクタ引数が必要になった場合に検討するパターンとして紹介されています。</p>\n\n<p>これだけだとなんかよくわからないため深堀していくと...<br>\nそもそもBuilderパターンとはソフトウェア開発におけるデザインパターンまたは設計パターンの一つであって、過去のソフトウェア設計者が発見し編み出した設計ノウハウを蓄積し、名前をつけ、再利用しやすいように特定の規約に従ってカタログ化したものであることがわかりました。</p>\n\n<p>例えば車を購入するとき。車に製造過程で車種が決まり、オプションをつけることで車に個性をつけることができるため、<br>\n必要に応じて柔軟に車を作ることができることができるようになるのがBuilderパターンを使うメリットになります。</p>\n\n<p>なので、コンストラクタに対して数多くのパラメータをセットする必要がある時に、代わりに使うことが推奨されている実装方法であることがわかりました。</p>\n\n<h1>\n<span id=\"builderlombokの使い方\" class=\"fragment\"></span><a href=\"#builderlombok%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9\"><i class=\"fa fa-link\"></i></a><a href=\"/Builder\" class=\"user-mention js-hovercard\" title=\"Builder\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"Builder\">@Builder</a>(Lombok)の使い方</h1>\n\n<p>Builderの作成方法はいろいろありますが、今回はDto作成などに便利なLombokのBuilderパターンについてまとめてみました。</p>\n\n<ul>\n<li>JavaのClassに<a href=\"/Builder\" class=\"user-mention js-hovercard\" title=\"Builder\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"Builder\">@Builder</a>を付与するだけでBuilderメソッドを生成してくれる。</li>\n<li>クラスに <a href=\"/Getter\" class=\"user-mention js-hovercard\" title=\"Getter\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"Getter\">@Getter</a> を付けると全プロパティにGetterが追加されるのでDtoなどを作るときは非常に便利</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><code><span class=\"c1\">// 呼び出される側</span>\n<span class=\"nd\">@Getter</span> \n<span class=\"nd\">@Builder</span> <span class=\"o\">{</span>\n<span class=\"kd\">public</span> <span class=\"nc\">AudioPlayerDto</span> <span class=\"o\">{</span> \n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">playerId</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"n\">sound</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"n\">music</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><code><span class=\"c1\">// 呼びさす側</span>\n<span class=\"nc\">AudioPlayerDto</span> <span class=\"n\">audioPlayer</span> <span class=\"o\">=</span> <span class=\"nc\">AudioPlayerDto</span><span class=\"o\">.</span><span class=\"na\">builder</span><span class=\"o\">()</span>    <span class=\"c1\">//Builderを生成</span>\n        <span class=\"o\">.</span><span class=\"na\">playerId</span><span class=\"o\">(</span><span class=\"mi\">100</span><span class=\"o\">)</span>   <span class=\"c1\">// プロパティをセット</span>\n        <span class=\"o\">.</span><span class=\"na\">sound</span><span class=\"o\">(</span><span class=\"s\">\"Off\"</span><span class=\"o\">)</span>\n        <span class=\"o\">.</span><span class=\"na\">music</span><span class=\"o\">(</span><span class=\"s\">\"pop\"</span><span class=\"o\">)</span>\n        <span class=\"o\">.</span><span class=\"na\">build</span><span class=\"o\">();</span>    <span class=\"c1\">//　インスタンスを生成</span>\n</code></pre></div></div>\n\n<h3>\n<span id=\"builderを使うメリット\" class=\"fragment\"></span><a href=\"#builder%E3%82%92%E4%BD%BF%E3%81%86%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88\"><i class=\"fa fa-link\"></i></a>Builderを使うメリット</h3>\n\n<p>ビルダパターンでは値を設定する時にフィールド変数名に対応するメソッドを呼び出すためIDEによる補完が効きやすくコーディングが楽になります。コードを後から読むときにもメソッド名からどのフィールド変数へ値を設定しているかも分かりやすいです.</p>\n\n<ul>\n<li>メソッドチェーンでプロパティを初期化できるため、変数名を毎回書かずに済むこと。</li>\n<li>どのプロパティを初期化しているかわかりやすく、初期化する順番も自由に決められること。</li>\n</ul>\n\n<p><strong>　Builderパターンを使わなかった場合　</strong></p>\n\n<ul>\n<li>Setterでセットすると毎回変数名を書く必要があって生成するインスタンスが多いとめんどう</li>\n<li>引数を書く順番も決まっていて、引数が多いて順番を覚えておくのが大変。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><code><span class=\"kd\">final</span> <span class=\"kt\">var</span> <span class=\"nc\">AudioPlayerDto</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">AudioPlayerDto</span><span class=\"o\">();</span>\n<span class=\"nc\">AudioPlayerDto</span><span class=\"o\">.</span><span class=\"na\">setPlayerId</span><span class=\"o\">(</span><span class=\"mi\">100</span><span class=\"o\">);</span>\n<span class=\"nc\">AudioPlayerDto</span><span class=\"o\">.</span><span class=\"na\">setSound</span><span class=\"o\">(</span><span class=\"s\">\"off\"</span><span class=\"o\">);</span>\n<span class=\"nc\">AudioPlayerDto</span><span class=\"o\">.</span><span class=\"na\">isMusic</span><span class=\"o\">(</span><span class=\"s\">\"pop\"</span><span class=\"o\">);</span>\n<span class=\"nc\">AudioPlayerDto</span><span class=\"o\">.</span><span class=\"na\">hoge</span><span class=\"err\">　・・・</span>\n\n<span class=\"kd\">final</span> <span class=\"kt\">var</span> <span class=\"nc\">AuditoPlayerDto</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">AuditoPlayerDto</span><span class=\"o\">(</span><span class=\"mi\">102</span><span class=\"o\">,</span> <span class=\"n\">on</span><span class=\"o\">,</span> <span class=\"n\">jazz</span><span class=\"o\">,</span> <span class=\"n\">hoge</span><span class=\"o\">,</span> <span class=\"err\">・・・</span><span class=\"o\">);</span>\n</code></pre></div></div>\n\n<h3>\n<span id=\"最後に\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"><i class=\"fa fa-link\"></i></a>最後に</h3>\n\n<p>まだまだ捉えきれていないところもありますが、Builderパターン以外にも様々な実装方法が設計思想をもとにあるみたいたので引き続き学習していきたいと思います。</p>\n",
      "body": "# はじめに\n実務1ヵ月たったところで、備忘録として残しておくため投稿させていただきました。\n今回はDto作成する際にでてきたBuilderについて調べてました。\n\n# Builderパターンとは\n代表的なBuilderパターンは二つあって、一つはGoF（Gang of Four; 4人のギャングたち）によって定義されたデザインパターンの1つであって、Builderパターンはその中でも__「作成系」デザインパターン、オブジェクト作成メカニズムを扱うデザインパターン__です。オブジェクトの生成過程を抽象化することによって、動的なオブジェクトの生成を可能にすることが目的です。\nもう一つは「Effective Java」による、Builderパターンでしょう。こちらは、コンストラクタに多数のコンストラクタ引数が必要になった場合に検討するパターンとして紹介されています。\n\nこれだけだとなんかよくわからないため深堀していくと...\nそもそもBuilderパターンとはソフトウェア開発におけるデザインパターンまたは設計パターンの一つであって、過去のソフトウェア設計者が発見し編み出した設計ノウハウを蓄積し、名前をつけ、再利用しやすいように特定の規約に従ってカタログ化したものであることがわかりました。\n\n例えば車を購入するとき。車に製造過程で車種が決まり、オプションをつけることで車に個性をつけることができるため、\n必要に応じて柔軟に車を作ることができることができるようになるのがBuilderパターンを使うメリットになります。\n\nなので、コンストラクタに対して数多くのパラメータをセットする必要がある時に、代わりに使うことが推奨されている実装方法であることがわかりました。\n\n# @Builder(Lombok)の使い方\nBuilderの作成方法はいろいろありますが、今回はDto作成などに便利なLombokのBuilderパターンについてまとめてみました。\n\n- JavaのClassに@Builderを付与するだけでBuilderメソッドを生成してくれる。\n- クラスに @Getter を付けると全プロパティにGetterが追加されるのでDtoなどを作るときは非常に便利\n\n```java:\n\b// 呼び出される側\n@Getter \n@Builder {\npublic AudioPlayerDto { \n    private int playerId;\n    private String sound;\n    private String music;\n}\n```\n\n\n```java:\n// 呼びさす側\nAudioPlayerDto audioPlayer = AudioPlayerDto.builder()    //Builderを生成\n        .playerId(100)   // プロパティをセット\n        .sound(\"Off\")\n        .music(\"pop\")\n        .build();    //　インスタンスを生成\n```\n\n### Builderを使うメリット\nビルダパターンでは値を設定する時にフィールド変数名に対応するメソッドを呼び出すためIDEによる補完が効きやすくコーディングが楽になります。コードを後から読むときにもメソッド名からどのフィールド変数へ値を設定しているかも分かりやすいです.\n\n- メソッドチェーンでプロパティを初期化できるため、変数名を毎回書かずに済むこと。\n- どのプロパティを初期化しているかわかりやすく、初期化する順番も自由に決められること。\n\n **　Builderパターンを使わなかった場合　**\n\n- Setterでセットすると毎回変数名を書く必要があって生成するインスタンスが多いとめんどう\n- 引数を書く順番も決まっていて、引数が多いて順番を覚えておくのが大変。\n\n\n```java\nfinal var AudioPlayerDto = new AudioPlayerDto();\nAudioPlayerDto.setPlayerId(100);\nAudioPlayerDto.setSound(\"off\");\nAudioPlayerDto.isMusic(\"pop\");\nAudioPlayerDto.hoge　・・・\n\nfinal var AuditoPlayerDto = new AuditoPlayerDto(102, on, jazz, hoge, ・・・);\n```\n\n### 最後に\nまだまだ捉えきれていないところもありますが、Builderパターン以外にも様々な実装方法が設計思想をもとにあるみたいたので引き続き学習していきたいと思います。\n\n\n\n\n\n\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2021-09-30T00:22:49+09:00",
      "group": null,
      "id": "7f7a0af0686329687b62",
      "likes_count": 0,
      "private": false,
      "reactions_count": 0,
      "tags": [
          {
              "name": "BuilderPattern",
              "versions": []
          }
      ],
      "title": "Builderパターンについて",
      "updated_at": "2021-09-30T00:22:49+09:00",
      "url": "https://qiita.com/yama0877/items/7f7a0af0686329687b62",
      "user": {
          "description": "駆け出しエンジニア\r\nスキル：Java, Ruby on Rails, JavaScript,　Docker,　phython；",
          "facebook_id": "",
          "followees_count": 0,
          "followers_count": 0,
          "github_login_name": "Toyosato-Yamaguchi",
          "id": "yama0877",
          "items_count": 2,
          "linkedin_id": "",
          "location": "",
          "name": "yama 877",
          "organization": "",
          "permanent_id": 1049515,
          "profile_image_url": "https://lh6.googleusercontent.com/-xwcTwH_jJ4E/AAAAAAAAAAI/AAAAAAAAAAA/AMZuucl6WS8NbW_dK_3iy8mxr9mkZ-fOUg/s50/photo.jpg",
          "team_only": false,
          "twitter_screen_name": "toyo11_tech",
          "website_url": ""
      },
      "page_views_count": null,
      "team_membership": null
  },
  {
      "rendered_body": "\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p>AngularなどのSPAアプリケーションの作成が面倒だったが、BlazorでSPAが実装できると聞いてお試しメモ書きついでの手順化<br>\nTypeScriptやJavascriptを使わずに、C#とHTMLとCSSだけでレッツSPA!!!</p>\n\n<p>本番環境(Azure)での動作を目指して構築していきます。</p>\n\n<h2>\n<span id=\"全体目次\" class=\"fragment\"></span><a href=\"#%E5%85%A8%E4%BD%93%E7%9B%AE%E6%AC%A1\"><i class=\"fa fa-link\"></i></a>全体目次</h2>\n\n<ul>\n<li>第1章 プロジェクトの作成と動作確認 &lt;= この章はここ</li>\n<li>第2章 Syncfusion(UIコンポーネント)の導入と使い方(予定)</li>\n<li>第3章 日本語環境化、SQLとの連動(Entity Framework経由でのCRUD)(予定)</li>\n<li>第4章以降 検討中・・・</li>\n</ul>\n\n<h2>\n<span id=\"この章でやること\" class=\"fragment\"></span><a href=\"#%E3%81%93%E3%81%AE%E7%AB%A0%E3%81%A7%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>この章でやること</h2>\n\n<ol>\n<li>開発環境の確認</li>\n<li>プロジェクトの新規作成</li>\n<li>Azure SQL Serverへの接続設定</li>\n<li>動作確認</li>\n</ol>\n\n<h2>\n<span id=\"使用する言語\" class=\"fragment\"></span><a href=\"#%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E8%A8%80%E8%AA%9E\"><i class=\"fa fa-link\"></i></a>使用する言語</h2>\n\n<ul>\n<li>C#</li>\n<li>HTML</li>\n<li>CSS</li>\n</ul>\n\n<h2>\n<span id=\"1-開発環境の確認\" class=\"fragment\"></span><a href=\"#1-%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%E3%81%AE%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>1. 開発環境の確認</h2>\n\n<h3>\n<span id=\"今回使用するツール\" class=\"fragment\"></span><a href=\"#%E4%BB%8A%E5%9B%9E%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E3%83%84%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>今回使用するツール</h3>\n\n<ul>\n<li>VisualStudio 2019 Community</li>\n<li>Microsoft Azure SQL Server (ローカルで開発する場合は SQL Server Express)</li>\n</ul>\n\n<h3>\n<span id=\"次回以降使用する予定のツール\" class=\"fragment\"></span><a href=\"#%E6%AC%A1%E5%9B%9E%E4%BB%A5%E9%99%8D%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E4%BA%88%E5%AE%9A%E3%81%AE%E3%83%84%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>次回以降使用する予定のツール</h3>\n\n<ul>\n<li>Microsoft Azure WebApps</li>\n</ul>\n\n<h3>\n<span id=\"必要に応じて使うツール\" class=\"fragment\"></span><a href=\"#%E5%BF%85%E8%A6%81%E3%81%AB%E5%BF%9C%E3%81%98%E3%81%A6%E4%BD%BF%E3%81%86%E3%83%84%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>必要に応じて使うツール</h3>\n\n<ul>\n<li>Microsoft SQL Management Studio(通称:SSMS)</li>\n</ul>\n\n<div class=\"note warn\">\n<span class=\"fa fa-fw fa-exclamation-circle\"></span><p>環境構築は説明しません。環境がセットアップされている前提で話を行います。\nVisual Studioは必ず最新のバージョンにアップデートしてください。\n</p>\n</div>\n\n<blockquote>\n<p>【参考】 私のVisualStudioのワークロード設定<br>\n<a href=\"https://camo.qiitausercontent.com/6458789cb2c7b4b598e47019955b5561a47a2157/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3432333739392f63646361373561332d363636332d306231302d343564302d3232333463326366643535382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2Fcdca75a3-6663-0b10-45d0-2234c2cfd558.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2e727db9860d1a528b0270d1c3937494\" width=\"50%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/cdca75a3-6663-0b10-45d0-2234c2cfd558.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2Fcdca75a3-6663-0b10-45d0-2234c2cfd558.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7cc6ba75a50ed95c04134911c5d47ee0 1x\" loading=\"lazy\"></a></p>\n</blockquote>\n\n<h2>\n<span id=\"2-プロジェクトの新規作成\" class=\"fragment\"></span><a href=\"#2-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E6%96%B0%E8%A6%8F%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>2. プロジェクトの新規作成</h2>\n\n<p>新しいプロジェクトから、【Blazor WebAssembly アプリ】を選択し「次へ」をクリック。<br>\n<a href=\"https://camo.qiitausercontent.com/1e42c13f62f01a88b9607dfc5747d47a7b0a0866/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3432333739392f61316465623331342d613866662d666134362d366461632d3239313762323138313338342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2Fa1deb314-a8ff-fa46-6dac-2917b2181384.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c7b4b7c10236a5ab0f336f89fa4558ac\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/a1deb314-a8ff-fa46-6dac-2917b2181384.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2Fa1deb314-a8ff-fa46-6dac-2917b2181384.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=2d9b47c7bc9bb0524880cc2850e38e61 1x\" loading=\"lazy\"></a></p>\n\n<p>プロジェクト名を設定して次へ<br>\n※ここでは「BlazorLerning」と設定。<br>\n<a href=\"https://camo.qiitausercontent.com/b6ed34864c17e294a783cd355598deac34b17971/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3432333739392f30663432616538662d306565612d656430352d386363652d6166356332636237373863362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2F0f42ae8f-0eea-ed05-8cce-af5c2cb778c6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=4dd4087b4339e8e3cb38f750345ca621\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/0f42ae8f-0eea-ed05-8cce-af5c2cb778c6.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2F0f42ae8f-0eea-ed05-8cce-af5c2cb778c6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=faf3a34e8a01cdf4fe26cda1fdcfd6da 1x\" loading=\"lazy\"></a></p>\n\n<p>以下の設定をして「作成」をクリック</p>\n\n<ul>\n<li>ターゲットフレームワークを「.NET 5.0」</li>\n<li>認証の種類を「個別のアカウント」</li>\n<li>「HTTPS用の構成」にチェック</li>\n<li>「ASP.NET Coreでホストされた」にチェック</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/75a6b9befdc6015c7d443e1530c63be2745e40b0/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3432333739392f33393133306233352d383731312d356137322d356332652d6164383733353535366334352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2F39130b35-8711-5a72-5c2e-ad8735556c45.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e145b51e540395954bf8b3a045246b50\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/39130b35-8711-5a72-5c2e-ad8735556c45.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2F39130b35-8711-5a72-5c2e-ad8735556c45.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=db570e3c3576ef3abb0ec6f068300880 1x\" loading=\"lazy\"></a></p>\n\n<h2>\n<span id=\"3-azure-sql-serverへの接続設定\" class=\"fragment\"></span><a href=\"#3-azure-sql-server%E3%81%B8%E3%81%AE%E6%8E%A5%E7%B6%9A%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>3. Azure SQL Serverへの接続設定</h2>\n\n<div class=\"note info\">\n<span class=\"fa fa-fw fa-check-circle\"></span><p>Azureで開発できない、ローカルで実行したい人はこの頁はスキップして次の頁へ移動してください。\nこの頁を始める方は、事前にAzure SQL Serverで空のDBを作成し、サーバーファイヤーウォールの設定を実施してください。\n</p>\n</div>\n\n<p>作成された3つのプロジェクトから、「****(プロジェクト名).Server」直下の「appsettings.json」を開く<br>\n<a href=\"https://camo.qiitausercontent.com/e77442b792e5fc2f85568d0c9b9dde8171e17ac2/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3432333739392f61323464336231372d643263332d643564302d646133642d3034613366383430653630322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2Fa24d3b17-d2c3-d5d0-da3d-04a3f840e602.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5d04d05faf36f7e0d89997c967761e76\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/a24d3b17-d2c3-d5d0-da3d-04a3f840e602.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2Fa24d3b17-d2c3-d5d0-da3d-04a3f840e602.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=8af260d931a1054e320a25369d1314a6 1x\" loading=\"lazy\"></a></p>\n\n<p>DefaultConnection項目の接続文字列をAzure SQL DBの接続先に書き換える。</p>\n\n<div class=\"code-frame\" data-lang=\"JSON\"><div class=\"highlight\"><pre><code><span class=\"w\"> </span><span class=\"nl\">\"ConnectionStrings\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"DefaultConnection\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"data source=サーバー名.database.windows.net;initial catalog=データベース名;user id=ユーザID;password=パスワード;MultipleActiveResultSets=true;\"</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p><a href=\"https://camo.qiitausercontent.com/af684a515285adea5dc0263d5c5f848fec386e5e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3432333739392f63306238313530632d303865642d623733322d326136382d3162316536336430666230382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2Fc0b8150c-08ed-b732-2a68-1b1e63d0fb08.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5c90581f127444dadefd2d6b38bdbf49\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/c0b8150c-08ed-b732-2a68-1b1e63d0fb08.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2Fc0b8150c-08ed-b732-2a68-1b1e63d0fb08.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6f5dbabb68707f26a50de85f064f32bf 1x\" loading=\"lazy\"></a></p>\n\n<h2>\n<span id=\"4-動作確認\" class=\"fragment\"></span><a href=\"#4-%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>4. 動作確認</h2>\n\n<p>アプリケーションをデバッグ実行します。<br>\n<a href=\"https://camo.qiitausercontent.com/4fda591b8f7f04ef83aec495dc4e4f18537f9801/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3432333739392f35366339313762642d623666312d346130652d343161312d3637336565376466633532662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2F56c917bd-b6f1-4a0e-41a1-673ee7dfc52f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=8f141644b2c790ef6b35dadf86b50b28\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/56c917bd-b6f1-4a0e-41a1-673ee7dfc52f.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2F56c917bd-b6f1-4a0e-41a1-673ee7dfc52f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=11ed94d24c997c2a8fc6a7e671d7fb72 1x\" loading=\"lazy\"></a></p>\n\n<p>「Register」をクリックして登録画面に移動します。<br>\n<a href=\"https://camo.qiitausercontent.com/240371a1ce86c8ace167c2fdd591074f74914859/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3432333739392f61613936396364622d626461352d353063622d373733372d3932626635333531666561352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2Faa969cdb-bda5-50cb-7737-92bf5351fea5.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b189c543f89f8ea7be1821b0a9778116\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/aa969cdb-bda5-50cb-7737-92bf5351fea5.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2Faa969cdb-bda5-50cb-7737-92bf5351fea5.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=4cc2422ba3c482f9b2fc92d6c8c57bbc 1x\" loading=\"lazy\"></a></p>\n\n<p>適当なアカウントを設定して、「Register」をクリック</p>\n\n<div class=\"note info\">\n<span class=\"fa fa-fw fa-check-circle\"></span><p>ここでは登録されないので、本当に適当で良いです。\n</p>\n</div>\n\n<p><a href=\"https://camo.qiitausercontent.com/f2677c2975b5c4f76392f57ef714cf5ed3798065/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3432333739392f62383134336333322d303663312d623733382d363666342d3665653864343166643966352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2Fb8143c32-06c1-b738-66f4-6ee8d41fd9f5.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a4a28e8b6d01059c7ebd15ac3a29a7b9\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/b8143c32-06c1-b738-66f4-6ee8d41fd9f5.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2Fb8143c32-06c1-b738-66f4-6ee8d41fd9f5.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=877c990e259e0bad252417ccd375f01c 1x\" loading=\"lazy\"></a></p>\n\n<p>DB上に必要なテーブルがないため、作成してよいか確認が出るので「Apply Migrations」をクリック<br>\n<a href=\"https://camo.qiitausercontent.com/a287b818e85b6940cb97331db179cb38557f12e3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3432333739392f66643835393736332d353663342d383263652d363065652d6530656530613334303830622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2Ffd859763-56c4-82ce-60ee-e0ee0a34080b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ea6c69cda0c97018f92ac2620d0eaccd\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/fd859763-56c4-82ce-60ee-e0ee0a34080b.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2Ffd859763-56c4-82ce-60ee-e0ee0a34080b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=d4420fddc37ebf7f8433ad0545f43a76 1x\" loading=\"lazy\"></a></p>\n\n<blockquote>\n<p>この時点でDB上に必要なテーブルが自動生成されています。<br>\n<a href=\"https://camo.qiitausercontent.com/5f4ee7a2efb9f61e36e328b252ae01dadea47bec/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3432333739392f39326230646633382d626138362d656263632d646439612d3830303865643761363330302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2F92b0df38-ba86-ebcc-dd9a-8008ed7a6300.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a8d9158393bb7c41c8ff25cac771d3b8\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/92b0df38-ba86-ebcc-dd9a-8008ed7a6300.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2F92b0df38-ba86-ebcc-dd9a-8008ed7a6300.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=93d96b72aadb1174dd61da900de912de 1x\" loading=\"lazy\"></a></p>\n</blockquote>\n\n<p>「Try refreshing the page」と表示されたらブラウザを更新する<br>\n<a href=\"https://camo.qiitausercontent.com/2e144aafd99f032d9f3c816fe906ddad1e13dc58/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3432333739392f39346165653835662d663462382d613035612d666235392d3839376334333066316137352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2F94aee85f-f4b8-a05a-fb59-897c430f1a75.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=673623f45cade8e0430d6c138cf8af85\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/94aee85f-f4b8-a05a-fb59-897c430f1a75.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2F94aee85f-f4b8-a05a-fb59-897c430f1a75.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7e25815f10ae217c086700b175471cc9 1x\" loading=\"lazy\"></a></p>\n\n<p>アカウント情報を入力して「Register」をクリック</p>\n\n<div class=\"note info\">\n<span class=\"fa fa-fw fa-check-circle\"></span><p>今後の動作確認で使用するアカウントなので、自分の正しいメールアドレスを登録してください。\n</p>\n</div>\n\n<p><a href=\"https://camo.qiitausercontent.com/f2677c2975b5c4f76392f57ef714cf5ed3798065/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3432333739392f62383134336333322d303663312d623733382d363666342d3665653864343166643966352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2Fb8143c32-06c1-b738-66f4-6ee8d41fd9f5.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a4a28e8b6d01059c7ebd15ac3a29a7b9\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/b8143c32-06c1-b738-66f4-6ee8d41fd9f5.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2Fb8143c32-06c1-b738-66f4-6ee8d41fd9f5.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=877c990e259e0bad252417ccd375f01c 1x\" loading=\"lazy\"></a></p>\n\n<p>「Register confimation」と表示されたらDBにアカウント情報が問題なく保存されています。<br>\n<a href=\"https://camo.qiitausercontent.com/36ac6076222f501d4c9afff4ab7c3ce489adaf93/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3432333739392f66393436666332662d656366612d316130632d636238622d3961326132656233643837362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2Ff946fc2f-ecfa-1a0c-cb8b-9a2a2eb3d876.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=be8bd937d594c206b557c53f947b8f81\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/f946fc2f-ecfa-1a0c-cb8b-9a2a2eb3d876.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2Ff946fc2f-ecfa-1a0c-cb8b-9a2a2eb3d876.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=2950b86431ee941cf111d5a99ee1a41b 1x\" loading=\"lazy\"></a></p>\n\n<p>この時点ではメール認証が実装されていないので、画面に表示された「Click here to confirm your account」をクリックしてメール認証を実施。<br>\n<a href=\"https://camo.qiitausercontent.com/df8d4619329502934d5b0ce73a89b7e8add6e66f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3432333739392f30383538326134302d326663322d613866322d396135312d3135653638343131653238632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2F08582a40-2fc2-a8f2-9a51-15e68411e28c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e7cf85e49dcba977196a46bd1f03ba4c\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/08582a40-2fc2-a8f2-9a51-15e68411e28c.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2F08582a40-2fc2-a8f2-9a51-15e68411e28c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=fb8d77dccfd0506b9004d308a7d8b2ef 1x\" loading=\"lazy\"></a></p>\n\n<p>ロゴをクリックして、アプリのトップページに移動します。<br>\n<a href=\"https://camo.qiitausercontent.com/3c9dbc7c6ee51dc44b9e3988c6728c1773fd96ab/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3432333739392f66643962393436662d366539312d653732362d383733312d6437366666343066333534322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2Ffd9b946f-6e91-e726-8731-d76ff40f3542.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=96aa3132970b1fa5cd511eff65427065\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/fd9b946f-6e91-e726-8731-d76ff40f3542.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2Ffd9b946f-6e91-e726-8731-d76ff40f3542.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e3af2778ab4b8f636b18f926afe256e6 1x\" loading=\"lazy\"></a></p>\n\n<p>[Fetch data]をクリックして、ログインが必要なページに遷移します。<br>\n<a href=\"https://camo.qiitausercontent.com/7de55896b16f38b176d95c0661e7e66c9351a52d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3432333739392f33393438336239372d626562312d643934332d383963622d3837636138633639623136622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2F39483b97-beb1-d943-89cb-87ca8c69b16b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=096b45614a9915e171b1983360a4a327\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/39483b97-beb1-d943-89cb-87ca8c69b16b.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2F39483b97-beb1-d943-89cb-87ca8c69b16b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=a0b7f3c1418eae98d77a7bfac1cd34c4 1x\" loading=\"lazy\"></a></p>\n\n<p>ログインされていない状態であれば、ログイン画面が表示されますので先ほど登録したアカウントでログインします。<br>\n<a href=\"https://camo.qiitausercontent.com/d59fc190000c87351b1c92be1c2a298cbd36bdc0/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3432333739392f34643365323563652d626366352d316463372d396339612d3634633731636437323231612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2F4d3e25ce-bcf5-1dc7-9c9a-64c71cd7221a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3951925c682e07aba87781bd1a3a3a2a\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/4d3e25ce-bcf5-1dc7-9c9a-64c71cd7221a.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2F4d3e25ce-bcf5-1dc7-9c9a-64c71cd7221a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=89c8e9a366a9c4616837599750d2f77c 1x\" loading=\"lazy\"></a></p>\n\n<p>天気情報のページが表示されたら動作テスト完了です。<br>\n<a href=\"https://camo.qiitausercontent.com/e06020dd38c9f0c2c2359535d79e37f960d12994/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3432333739392f62333263393338332d623464352d303163372d613762662d3834323564376363326231662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2Fb32c9383-b4d5-01c7-a7bf-8425d7cc2b1f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a445e2473b3db035293e69de1980a093\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/b32c9383-b4d5-01c7-a7bf-8425d7cc2b1f.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F423799%2Fb32c9383-b4d5-01c7-a7bf-8425d7cc2b1f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=51db7f38e99dcb2aff6996581d66b27e 1x\" loading=\"lazy\"></a></p>\n\n<h2>\n<span id=\"次の章へ\" class=\"fragment\"></span><a href=\"#%E6%AC%A1%E3%81%AE%E7%AB%A0%E3%81%B8\"><i class=\"fa fa-link\"></i></a>次の章へ</h2>\n\n<p>まだ作成中です。</p>\n",
      "body": "# はじめに\nAngularなどのSPAアプリケーションの作成が面倒だったが、BlazorでSPAが実装できると聞いてお試しメモ書きついでの手順化\nTypeScriptやJavascriptを使わずに、C#とHTMLとCSSだけでレッツSPA!!!\n\n本番環境(Azure)での動作を目指して構築していきます。\n\n## 全体目次\n- 第1章 プロジェクトの作成と動作確認 <= この章はここ\n- 第2章 Syncfusion(UIコンポーネント)の導入と使い方(予定)\n- 第3章 日本語環境化、SQLとの連動(Entity Framework経由でのCRUD)(予定)\n- 第4章以降 検討中・・・\n\n## この章でやること\n1. 開発環境の確認\n1. プロジェクトの新規作成\n1. Azure SQL Serverへの接続設定\n1. 動作確認\n\n## 使用する言語\n- C#\n- HTML\n- CSS\n\n## 1. 開発環境の確認\n### 今回使用するツール\n- VisualStudio 2019 Community\n- Microsoft Azure SQL Server (ローカルで開発する場合は SQL Server Express)\n\n### 次回以降使用する予定のツール\n- Microsoft Azure WebApps\n\n### 必要に応じて使うツール\n- Microsoft SQL Management Studio(通称:SSMS)\n\n:::note warn\n環境構築は説明しません。環境がセットアップされている前提で話を行います。\nVisual Studioは必ず最新のバージョンにアップデートしてください。\n:::\n\n>【参考】 私のVisualStudioのワークロード設定\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/cdca75a3-6663-0b10-45d0-2234c2cfd558.png\" width=50%>\n\n## 2. プロジェクトの新規作成\n新しいプロジェクトから、【Blazor WebAssembly アプリ】を選択し「次へ」をクリック。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/a1deb314-a8ff-fa46-6dac-2917b2181384.png)\n\nプロジェクト名を設定して次へ\n※ここでは「BlazorLerning」と設定。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/0f42ae8f-0eea-ed05-8cce-af5c2cb778c6.png)\n\n以下の設定をして「作成」をクリック\n\n- ターゲットフレームワークを「.NET 5.0」\n- 認証の種類を「個別のアカウント」\n- 「HTTPS用の構成」にチェック\n- 「ASP.NET Coreでホストされた」にチェック\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/39130b35-8711-5a72-5c2e-ad8735556c45.png)\n\n## 3. Azure SQL Serverへの接続設定\n\n:::note info\nAzureで開発できない、ローカルで実行したい人はこの頁はスキップして次の頁へ移動してください。\nこの頁を始める方は、事前にAzure SQL Serverで空のDBを作成し、サーバーファイヤーウォールの設定を実施してください。\n:::\n\n作成された3つのプロジェクトから、「****(プロジェクト名).Server」直下の「appsettings.json」を開く\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/a24d3b17-d2c3-d5d0-da3d-04a3f840e602.png)\n\nDefaultConnection項目の接続文字列をAzure SQL DBの接続先に書き換える。\n\n```JSON\n \"ConnectionStrings\": {\n    \"DefaultConnection\": \"data source=サーバー名.database.windows.net;initial catalog=データベース名;user id=ユーザID;password=パスワード;MultipleActiveResultSets=true;\"\n  }\n```\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/c0b8150c-08ed-b732-2a68-1b1e63d0fb08.png)\n\n\n## 4. 動作確認\n\nアプリケーションをデバッグ実行します。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/56c917bd-b6f1-4a0e-41a1-673ee7dfc52f.png)\n\n「Register」をクリックして登録画面に移動します。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/aa969cdb-bda5-50cb-7737-92bf5351fea5.png)\n\n適当なアカウントを設定して、「Register」をクリック\n\n:::note info\nここでは登録されないので、本当に適当で良いです。\n:::\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/b8143c32-06c1-b738-66f4-6ee8d41fd9f5.png)\n\nDB上に必要なテーブルがないため、作成してよいか確認が出るので「Apply Migrations」をクリック\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/fd859763-56c4-82ce-60ee-e0ee0a34080b.png)\n\n>この時点でDB上に必要なテーブルが自動生成されています。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/92b0df38-ba86-ebcc-dd9a-8008ed7a6300.png)\n\n「Try refreshing the page」と表示されたらブラウザを更新する\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/94aee85f-f4b8-a05a-fb59-897c430f1a75.png)\n\nアカウント情報を入力して「Register」をクリック\n\n:::note info\n今後の動作確認で使用するアカウントなので、自分の正しいメールアドレスを登録してください。\n:::\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/b8143c32-06c1-b738-66f4-6ee8d41fd9f5.png)\n\n「Register confimation」と表示されたらDBにアカウント情報が問題なく保存されています。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/f946fc2f-ecfa-1a0c-cb8b-9a2a2eb3d876.png)\n\nこの時点ではメール認証が実装されていないので、画面に表示された「Click here to confirm your account」をクリックしてメール認証を実施。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/08582a40-2fc2-a8f2-9a51-15e68411e28c.png)\n\nロゴをクリックして、アプリのトップページに移動します。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/fd9b946f-6e91-e726-8731-d76ff40f3542.png)\n\n[Fetch data]をクリックして、ログインが必要なページに遷移します。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/39483b97-beb1-d943-89cb-87ca8c69b16b.png)\n\nログインされていない状態であれば、ログイン画面が表示されますので先ほど登録したアカウントでログインします。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/4d3e25ce-bcf5-1dc7-9c9a-64c71cd7221a.png)\n\n天気情報のページが表示されたら動作テスト完了です。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/423799/b32c9383-b4d5-01c7-a7bf-8425d7cc2b1f.png)\n\n## 次の章へ\nまだ作成中です。\n\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2021-09-30T00:22:34+09:00",
      "group": null,
      "id": "46ba76d6bca17a1095dc",
      "likes_count": 0,
      "private": false,
      "reactions_count": 0,
      "tags": [
          {
              "name": "C#",
              "versions": []
          },
          {
              "name": "WebAssembly",
              "versions": []
          },
          {
              "name": "Blazor",
              "versions": []
          },
          {
              "name": ".NET5.0",
              "versions": []
          }
      ],
      "title": "【第1章】C# + .NET 5.0 + Blazor WebAssemblyで簡単SPA開発【プロジェクトの作成と動作確認】",
      "updated_at": "2021-09-30T00:44:02+09:00",
      "url": "https://qiita.com/jp_enngawa/items/46ba76d6bca17a1095dc",
      "user": {
          "description": null,
          "facebook_id": null,
          "followees_count": 0,
          "followers_count": 0,
          "github_login_name": null,
          "id": "jp_enngawa",
          "items_count": 2,
          "linkedin_id": null,
          "location": null,
          "name": "",
          "organization": null,
          "permanent_id": 423799,
          "profile_image_url": "https://pbs.twimg.com/profile_images/1128245753040625664/XnDf6Yhc_bigger.jpg",
          "team_only": false,
          "twitter_screen_name": "jp_enngawa",
          "website_url": null
      },
      "page_views_count": null,
      "team_membership": null
  },
  {
      "rendered_body": "<p>Salesforceにコンテンツ配信という機能がありますが、その公開リンクを表示するとSalesforce標準のファイルプレビュー画面が表示されます。<br>\nただ、このSalesforce標準のファイルプレビュー機能は少し表示に時間がかかります。<br>\n今回はコンテンツ配信のPDFプレビューを高速化する方法を試してみました。</p>\n\n<p>↓Salesforce標準のファイルプレビュー画面<br>\n<a href=\"https://camo.qiitausercontent.com/0e28c76786980d9c120dad8aec7c098f24f47319/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3631313232382f39633831363862382d313632302d326430332d336666622d3532363131646362323131342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F611228%2F9c8168b8-1620-2d03-3ffb-52611dcb2114.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=6bc3419eb194f789a5124d76b7398cee\" alt=\"pdf01.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/611228/9c8168b8-1620-2d03-3ffb-52611dcb2114.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F611228%2F9c8168b8-1620-2d03-3ffb-52611dcb2114.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=abddf96fc6a96d69b58db708a1063816 1x\" loading=\"lazy\"></a></p>\n\n<h2>\n<span id=\"pdfプレビューを高速化する方法\" class=\"fragment\"></span><a href=\"#pdf%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E3%82%92%E9%AB%98%E9%80%9F%E5%8C%96%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>PDFプレビューを高速化する方法</h2>\n\n<p>コンテンツ配信リンクから元のPDFファイルを取得してiframeで表示してみました。<br>\n元のPDFファイルを取得するURLは以下です。</p>\n\n<div class=\"code-frame\" data-lang=\"text\">\n<div class=\"code-lang\"><span class=\"bold\">コンテンツ配信から元のPDFファイルを取得するURL.</span></div>\n<div class=\"highlight\"><pre><code>https://ドメイン/sfc/dist/version/renditionDownload?rendition=ORIGINAL_pdf&amp;versionId=XXXX&amp;d=XXXX&amp;oid=XXXX\n</code></pre></div>\n</div>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align: center\">パラメータ</th>\n<th style=\"text-align: center\">値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: center\">rendition</td>\n<td style=\"text-align: center\">ORIGINAL_pdf</td>\n</tr>\n<tr>\n<td style=\"text-align: center\">versionId</td>\n<td style=\"text-align: center\">コンテンツバージョンのID</td>\n</tr>\n<tr>\n<td style=\"text-align: center\">d</td>\n<td style=\"text-align: center\">コンテンツ配信の「ContentDownloadUrl」項目のパラメータ「d」から取得</td>\n</tr>\n<tr>\n<td style=\"text-align: center\">oid</td>\n<td style=\"text-align: center\">コンテンツ配信の「ContentDownloadUrl」項目のパラメータ「oid」から取得</td>\n</tr>\n</tbody>\n</table>\n\n<p>このURLをiframeで表示してみるとUIの変更はありますが、PDFプレビューの表示が確かに高速化されました。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/236b711cc3adcd47523d06007fd02bb949b2c8ea/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3631313232382f35393364333839342d653231312d613833632d653639332d3732323433353138306337322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F611228%2F593d3894-e211-a83c-e693-722435180c72.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9ef4bca9a99e06d322e4a559b33907d1\" alt=\"pdf02.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/611228/593d3894-e211-a83c-e693-722435180c72.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F611228%2F593d3894-e211-a83c-e693-722435180c72.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=2f64feabde007e4d0418811c567718ee 1x\" loading=\"lazy\"></a></p>\n\n<h2>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h2>\n\n<p>■ ContentDistribution<br>\n<a href=\"https://developer.salesforce.com/docs/atlas.ja-jp.api.meta/api/sforce_api_objects_contentdistribution.htm\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://developer.salesforce.com/docs/atlas.ja-jp.api.meta/api/sforce_api_objects_contentdistribution.htm</a></p>\n",
      "body": "Salesforceにコンテンツ配信という機能がありますが、その公開リンクを表示するとSalesforce標準のファイルプレビュー画面が表示されます。\nただ、このSalesforce標準のファイルプレビュー機能は少し表示に時間がかかります。\n今回はコンテンツ配信のPDFプレビューを高速化する方法を試してみました。\n\n↓Salesforce標準のファイルプレビュー画面\n![pdf01.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/611228/9c8168b8-1620-2d03-3ffb-52611dcb2114.png)\n\n## PDFプレビューを高速化する方法\nコンテンツ配信リンクから元のPDFファイルを取得してiframeで表示してみました。\n元のPDFファイルを取得するURLは以下です。\n\n```コンテンツ配信から元のPDFファイルを取得するURL.\nhttps://ドメイン/sfc/dist/version/renditionDownload?rendition=ORIGINAL_pdf&versionId=XXXX&d=XXXX&oid=XXXX\n```\n\n|パラメータ|値|\n|:-:|:-:|\n|rendition|ORIGINAL_pdf|\n|versionId|コンテンツバージョンのID|\n|d|コンテンツ配信の「ContentDownloadUrl」項目のパラメータ「d」から取得|\n|oid|コンテンツ配信の「ContentDownloadUrl」項目のパラメータ「oid」から取得|\n\nこのURLをiframeで表示してみるとUIの変更はありますが、PDFプレビューの表示が確かに高速化されました。\n\n![pdf02.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/611228/593d3894-e211-a83c-e693-722435180c72.png)\n\n## 参考\n■ ContentDistribution\nhttps://developer.salesforce.com/docs/atlas.ja-jp.api.meta/api/sforce_api_objects_contentdistribution.htm\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2021-09-30T00:20:20+09:00",
      "group": null,
      "id": "4fa638f529745f12364d",
      "likes_count": 0,
      "private": false,
      "reactions_count": 0,
      "tags": [
          {
              "name": "PDF",
              "versions": []
          },
          {
              "name": "Salesforce",
              "versions": []
          }
      ],
      "title": "【Salesforce】コンテンツ配信のPDFプレビューを高速化する方法",
      "updated_at": "2021-09-30T00:20:20+09:00",
      "url": "https://qiita.com/quroooos/items/4fa638f529745f12364d",
      "user": {
          "description": null,
          "facebook_id": null,
          "followees_count": 0,
          "followers_count": 2,
          "github_login_name": null,
          "id": "quroooos",
          "items_count": 20,
          "linkedin_id": null,
          "location": null,
          "name": "",
          "organization": null,
          "permanent_id": 611228,
          "profile_image_url": "https://secure.gravatar.com/avatar/5d550ac454be1987cbd781bc7f046e57",
          "team_only": false,
          "twitter_screen_name": null,
          "website_url": null
      },
      "page_views_count": null,
      "team_membership": null
  },
  {
      "rendered_body": "\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p><a href=\"https://qiita.com/ykami/items/df59544313ad256d850b\" id=\"reference-35a277029afaf3c54461\">こちら</a>の続きです。</p>\n\n<h1>\n<span id=\"同時実行制御\" class=\"fragment\"></span><a href=\"#%E5%90%8C%E6%99%82%E5%AE%9F%E8%A1%8C%E5%88%B6%E5%BE%A1\"><i class=\"fa fa-link\"></i></a>同時実行制御</h1>\n\n<p>並行して実行されているトランザクションを処理するための技術。大まかに以下に分類できる。</p>\n\n<ol>\n<li>楽観的同時実行制御\n\n<ul>\n<li>Optimistic Concurrency Control / OCC</li>\n<li>複数のトランザクションは互いにブロックすることなく、お互いの処理がコミットされる際に競合の有無をチェックする。競合があった場合には、一方の処理が中断させられる。</li>\n</ul>\n</li>\n<li>マルチバージョン同時実行制御\n\n<ul>\n<li>Multiversion Concurrency Control / MVCC</li>\n<li>レコードにタイムスタンプが異なる複数バージョンの存在を許容し、過去のある時点における一貫性の取れた参照を提供する。</li>\n</ul>\n</li>\n<li>悲観的または保守的同時実行制御\n\n<ul>\n<li>Pessimistic Concurrency Control / PCC</li>\n<li>ロックベース\n\n<ul>\n<li>トランザクションはレコードに対するロックを管理する必要がある。</li>\n</ul>\n</li>\n<li>ロックなし\n\n<ul>\n<li>読み取り操作と書き込み操作のリストを管理し、終了していないトランザクションのスケジュールに応じて操作を制限する。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n\n<h2>\n<span id=\"直列化可能性\" class=\"fragment\"></span><a href=\"#%E7%9B%B4%E5%88%97%E5%8C%96%E5%8F%AF%E8%83%BD%E6%80%A7\"><i class=\"fa fa-link\"></i></a>直列化可能性</h2>\n\n<p>一連のトランザクションを実行するために必要な操作のリストをスケジュールという。スケジュールはその中のトランザクションが完全に独立して連続的に実行（すべての先行するトランザクションが実行された後で次のトランザクションが開始）される場合、シリアルであるという。この場合、システムのスループットが著しく低下し、パフォーマンスを損なう。</p>\n\n<p>そこで、シリアルなスケジュールの正確性と単純性を維持しつつ、トランザクションの複数並行に実行する必要性が生まれる。この課題は直列化可能なスケジュールで解決される。直列化可能なスケジュールは、一連のトランザクションを特定の順序で1つずつ順番に実行したのと同様の結果を生成する。</p>\n\n<h2>\n<span id=\"トランザクションの分離\" class=\"fragment\"></span><a href=\"#%E3%83%88%E3%83%A9%E3%83%B3%E3%82%B6%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E5%88%86%E9%9B%A2\"><i class=\"fa fa-link\"></i></a>トランザクションの分離</h2>\n\n<p>いつどのようにしてトランザクションの各部分（途中経過など）を可視化するかを指定するものとして分離レベルが定義される。</p>\n\n<p>トランザクション分離レベルの定義に応じた読み取り・書き込みのアノマリー（異常）として、以下が想定される。</p>\n\n<ul>\n<li>ダーティリード\n\n<ul>\n<li>あるトランザクションの未コミットの変更を別のトランザクションが参照できる</li>\n</ul>\n</li>\n<li>ノンリピータブルリード\n\n<ul>\n<li>ファジーリードと呼ばれる場合もある</li>\n<li>あるトランザクションが同じ行への問い合わせを2回行い、それぞれで異なる結果を得る\n\n<ul>\n<li>例えば、あるトランザクションを行を読み取り、そのトランザクション内でもう一度読み取るまでの間に、別のトランザクションがその行を修正してコミットしていた場合</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>ファントムリード\n\n<ul>\n<li>トランザクション中に範囲読み取りを使用した場合に発生</li>\n<li>トランザクションが同じ行のセットを2度要求し、異なる結果を受け取る</li>\n</ul>\n</li>\n<li>ロストアップデート\n\n<ul>\n<li>2つのトランザクションでそれぞれが同一の値を読み取った後、先のトランザクションが値を更新してコミットし、後のトランザクションも値を更新してコミットする。このとき、先に更新した値は後の更新で上書きされる。</li>\n</ul>\n</li>\n<li>ダーティライト\n\n<ul>\n<li>ダーティリードした値を更新してコミットする。</li>\n</ul>\n</li>\n<li>ライトスキュー\n\n<ul>\n<li>個々のトランザクションは必要な要件を満たしているが、組み合わせで要件を満たさなくなる。\n\n<ul>\n<li>2つのトランザクションが、2つの口座の値を変更するとする。</li>\n<li>それぞれの口座残高は$100と$150として、これらの合計が負の値にならないことが要件である。（個別の口座残高が負になることは許容する）</li>\n<li>このとき、それぞれの口座から$200引くことを試みると、それぞれのトランザクション開始時点では$100 + $150 = $250であることから、どちらの口座も$200引くことができる。</li>\n<li>しかし、コミット後にはそれぞれ-$100と-$50となり、要件を満たさなくなる。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"分離レベル\" class=\"fragment\"></span><a href=\"#%E5%88%86%E9%9B%A2%E3%83%AC%E3%83%99%E3%83%AB\"><i class=\"fa fa-link\"></i></a>分離レベル</h2>\n\n<ul>\n<li>read uncommited(未コミット読み取り)\n\n<ul>\n<li>最も弱い分離レベル</li>\n<li>ダーティリードが許容される</li>\n</ul>\n</li>\n<li>read commited(コミット済み読み取り)\n\n<ul>\n<li>ダーティリードは許容されない</li>\n<li>ファントムリード、ノンリピータブルリードは許容される</li>\n</ul>\n</li>\n<li>repeatable read(反復可能な読み取り)\n\n<ul>\n<li>ダーティリード、ノンリピータブルリードは許容されない</li>\n<li>ファントムリードは許容される</li>\n</ul>\n</li>\n<li>serializability(直列化可能性)\n\n<ul>\n<li>複数のトランザクションがシリアルに実行されたかのように、結果が特定の順序で現れることが保証される。</li>\n<li>ダーティリード、ノンリピータブルリード、ファントムリードが許容されない</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"楽観的同時実行制御\" class=\"fragment\"></span><a href=\"#%E6%A5%BD%E8%A6%B3%E7%9A%84%E5%90%8C%E6%99%82%E5%AE%9F%E8%A1%8C%E5%88%B6%E5%BE%A1\"><i class=\"fa fa-link\"></i></a>楽観的同時実行制御</h2>\n\n<p>トランザクションの競合がめったに発生しないことを前提としたもの。</p>\n\n<h2>\n<span id=\"マルチバージョン同時実行制御\" class=\"fragment\"></span><a href=\"#%E3%83%9E%E3%83%AB%E3%83%81%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E5%90%8C%E6%99%82%E5%AE%9F%E8%A1%8C%E5%88%B6%E5%BE%A1\"><i class=\"fa fa-link\"></i></a>マルチバージョン同時実行制御</h2>\n\n<p>複数のレコードバージョンを許容し、単調に増加するトランザクションIDやタイムスタンプを使用することでトランザクションの一貫性を達成する。</p>\n\n<h2>\n<span id=\"悲観的同時実行制御\" class=\"fragment\"></span><a href=\"#%E6%82%B2%E8%A6%B3%E7%9A%84%E5%90%8C%E6%99%82%E5%AE%9F%E8%A1%8C%E5%88%B6%E5%BE%A1\"><i class=\"fa fa-link\"></i></a>悲観的同時実行制御</h2>\n\n<p>実行中にトランザクションの競合を特定してそれらの実行をブロックまたは中断する。<br>\n最も単純な考え方の一つにはタイムスタンプによる順序付けがあり、これはトランザクションがそれぞれタイムスタンプを持ち、より早いタイムスタンプを持つトランザクションがコミットしているかにより実行可否を決定するものである。</p>\n",
      "body": "# はじめに\n\n[こちら](https://qiita.com/ykami/items/df59544313ad256d850b)の続きです。\n\n# 同時実行制御\n\n並行して実行されているトランザクションを処理するための技術。大まかに以下に分類できる。\n\n1. 楽観的同時実行制御\n    - Optimistic Concurrency Control / OCC\n    - 複数のトランザクションは互いにブロックすることなく、お互いの処理がコミットされる際に競合の有無をチェックする。競合があった場合には、一方の処理が中断させられる。\n1. マルチバージョン同時実行制御\n    - Multiversion Concurrency Control / MVCC\n    - レコードにタイムスタンプが異なる複数バージョンの存在を許容し、過去のある時点における一貫性の取れた参照を提供する。\n1. 悲観的または保守的同時実行制御\n    - Pessimistic Concurrency Control / PCC\n    - ロックベース\n        - トランザクションはレコードに対するロックを管理する必要がある。\n    - ロックなし\n        - 読み取り操作と書き込み操作のリストを管理し、終了していないトランザクションのスケジュールに応じて操作を制限する。\n\n## 直列化可能性\n\n一連のトランザクションを実行するために必要な操作のリストをスケジュールという。スケジュールはその中のトランザクションが完全に独立して連続的に実行（すべての先行するトランザクションが実行された後で次のトランザクションが開始）される場合、シリアルであるという。この場合、システムのスループットが著しく低下し、パフォーマンスを損なう。\n\nそこで、シリアルなスケジュールの正確性と単純性を維持しつつ、トランザクションの複数並行に実行する必要性が生まれる。この課題は直列化可能なスケジュールで解決される。直列化可能なスケジュールは、一連のトランザクションを特定の順序で1つずつ順番に実行したのと同様の結果を生成する。\n\n## トランザクションの分離\n\nいつどのようにしてトランザクションの各部分（途中経過など）を可視化するかを指定するものとして分離レベルが定義される。\n\nトランザクション分離レベルの定義に応じた読み取り・書き込みのアノマリー（異常）として、以下が想定される。\n\n* ダーティリード\n    * あるトランザクションの未コミットの変更を別のトランザクションが参照できる\n* ノンリピータブルリード\n    * ファジーリードと呼ばれる場合もある\n    * あるトランザクションが同じ行への問い合わせを2回行い、それぞれで異なる結果を得る\n        * 例えば、あるトランザクションを行を読み取り、そのトランザクション内でもう一度読み取るまでの間に、別のトランザクションがその行を修正してコミットしていた場合\n* ファントムリード\n    * トランザクション中に範囲読み取りを使用した場合に発生\n    * トランザクションが同じ行のセットを2度要求し、異なる結果を受け取る\n* ロストアップデート\n    * 2つのトランザクションでそれぞれが同一の値を読み取った後、先のトランザクションが値を更新してコミットし、後のトランザクションも値を更新してコミットする。このとき、先に更新した値は後の更新で上書きされる。\n* ダーティライト\n    * ダーティリードした値を更新してコミットする。\n* ライトスキュー\n    * 個々のトランザクションは必要な要件を満たしているが、組み合わせで要件を満たさなくなる。\n        * 2つのトランザクションが、2つの口座の値を変更するとする。\n        * それぞれの口座残高は$100と$150として、これらの合計が負の値にならないことが要件である。（個別の口座残高が負になることは許容する）\n        * このとき、それぞれの口座から$200引くことを試みると、それぞれのトランザクション開始時点では$100 + $150 = $250であることから、どちらの口座も$200引くことができる。\n        * しかし、コミット後にはそれぞれ-$100と-$50となり、要件を満たさなくなる。\n\n## 分離レベル\n\n* read uncommited(未コミット読み取り)\n    * 最も弱い分離レベル\n    * ダーティリードが許容される\n* read commited(コミット済み読み取り)\n    * ダーティリードは許容されない\n    * ファントムリード、ノンリピータブルリードは許容される\n* repeatable read(反復可能な読み取り)\n    * ダーティリード、ノンリピータブルリードは許容されない\n    * ファントムリードは許容される\n* serializability(直列化可能性)\n    * 複数のトランザクションがシリアルに実行されたかのように、結果が特定の順序で現れることが保証される。\n    * ダーティリード、ノンリピータブルリード、ファントムリードが許容されない\n\n## 楽観的同時実行制御\n\nトランザクションの競合がめったに発生しないことを前提としたもの。\n\n## マルチバージョン同時実行制御\n\n複数のレコードバージョンを許容し、単調に増加するトランザクションIDやタイムスタンプを使用することでトランザクションの一貫性を達成する。\n\n## 悲観的同時実行制御\n\n実行中にトランザクションの競合を特定してそれらの実行をブロックまたは中断する。\n最も単純な考え方の一つにはタイムスタンプによる順序付けがあり、これはトランザクションがそれぞれタイムスタンプを持ち、より早いタイムスタンプを持つトランザクションがコミットしているかにより実行可否を決定するものである。\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2021-09-30T00:19:49+09:00",
      "group": null,
      "id": "5b9cc4ac811688186774",
      "likes_count": 0,
      "private": false,
      "reactions_count": 0,
      "tags": [
          {
              "name": "データベース",
              "versions": []
          }
      ],
      "title": "データベースのトランザクション処理について整理する（その2）",
      "updated_at": "2021-09-30T00:19:49+09:00",
      "url": "https://qiita.com/ykami/items/5b9cc4ac811688186774",
      "user": {
          "description": "",
          "facebook_id": "",
          "followees_count": 1,
          "followers_count": 2,
          "github_login_name": "Kamihara",
          "id": "ykami",
          "items_count": 10,
          "linkedin_id": "",
          "location": "",
          "name": "Kamihara",
          "organization": "",
          "permanent_id": 69132,
          "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/69132/profile-images/1541491455",
          "team_only": false,
          "twitter_screen_name": null,
          "website_url": ""
      },
      "page_views_count": null,
      "team_membership": null
  },
  {
      "rendered_body": "\n<h1>\n<span id=\"コレクション内の情報をエクスポートする\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%AC%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E5%86%85%E3%81%AE%E6%83%85%E5%A0%B1%E3%82%92%E3%82%A8%E3%82%AF%E3%82%B9%E3%83%9D%E3%83%BC%E3%83%88%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>コレクション内の情報をエクスポートする</h1>\n\n<p>collectionの内容をエクスポートしてほかのコレクションに適用したりコレクションの情報を別で保存しておきたいときがあると思います。(私があったので記事を書いているのですが…)<br>\nということで、コレクションの情報をエクスポートするプログラムをTypescriptで作りました。<br>\nエクスポートする情報は以下です。</p>\n\n<ul>\n<li>コンフィグ</li>\n<li>ドキュメント</li>\n<li>トレーニングデータ</li>\n<li>エクスパンション(同義語)</li>\n</ul>\n\n<p>ソースは<a href=\"https://github.com/Ryota-Amano/ibmcloud-discovery-export\" rel=\"nofollow noopener\" target=\"_blank\">git</a>にあります。<br>\nQiitaの記事ではプログラムの仕様や概要を説明します。利用方法はgitをご覧ください。<br>\n<strong>ご利用は自己責任でお願いいたします。</strong><br>\n改善点や不明点等ございましたら連絡いただけますと嬉しいです。</p>\n\n<h1>\n<span id=\"環境\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>環境</h1>\n\n<ul>\n<li>Windows10</li>\n<li>Node　v14.17.0</li>\n<li>npm　7.15.1</li>\n</ul>\n\n<h1>\n<span id=\"仕様\" class=\"fragment\"></span><a href=\"#%E4%BB%95%E6%A7%98\"><i class=\"fa fa-link\"></i></a>仕様</h1>\n\n<ul>\n<li>資格情報はプログラム実行前に<code>Authentication.yaml</code>に記載しておく</li>\n<li>ドキュメントのエクスポートは1万件まで</li>\n</ul>\n\n<h1>\n<span id=\"フォルダ構成\" class=\"fragment\"></span><a href=\"#%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E6%A7%8B%E6%88%90\"><i class=\"fa fa-link\"></i></a>フォルダ構成</h1>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>ibmcloud-discovery-export/(root)\n ├─ dist/\n ├─ node_modules/\n ├─ src/\n │   ├─ api/\n │   │   └─ Discovery.ts\n |   ├─ interface/\n │   │   └─ index.ts\n │   ├─ ConfigurationDetails.ts\n │   ├─ ExpansionList.ts\n │   ├─ Loading.ts\n │   ├─ QueryCollection.ts\n │   ├─ TrainingList.ts\n │   └─ UserInput.ts\n ├─ .gitignore\n ├─ app.ts\n ├─ Authentication.yaml\n ├─ package-lock.json\n ├─ package.json\n ├─ RRADME.md\n └─ tsconfig.json\n</code></pre></div></div>\n\n<p><strong><code>dist/</code></strong>　tsをコンパイルした後のjsファイルが格納されている。プログラム実行時はdist/app.jsを実行する。<br>\n<strong><code>Discovery.ts</code></strong>  DiscoveryへのAPIコール処理を行うtsファイル<br>\n<strong><code>ConfigurationDetails.ts</code></strong>コンフィグの取得を行うtsファイル<br>\n<strong><code>ExpansionList.ts</code></strong> エクスパンション(同義語)の取得を行うtsファイル<br>\n<strong><code>TrainingList.ts</code></strong> トレーニングの取得を行うtsファイル<br>\n<strong><code>QueryCollection.ts</code></strong> ドキュメントの取得を行うtsファイル<br>\n<strong><code>UserInput.ts</code></strong> プログラム実行後の入力を促す処理を行うtsファイル<br>\n<strong><code>app.ts</code></strong> メインのTypeScriptファイル<br>\n<strong><code>Authentication.yaml</code></strong> Discoveryの資格情報と出力名を入力しておくyamlファイル</p>\n\n<h1>\n<span id=\"フローチャート\" class=\"fragment\"></span><a href=\"#%E3%83%95%E3%83%AD%E3%83%BC%E3%83%81%E3%83%A3%E3%83%BC%E3%83%88\"><i class=\"fa fa-link\"></i></a>フローチャート</h1>\n\n<p>大まかな流れをフローチャートで書きました。<br>\n綺麗なものではないですがご勘弁ください。<br>\n<a href=\"https://camo.qiitausercontent.com/6fccce5a1bbc4fb884b0270b6f23e40e4011edff/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3634393939322f35326266353361342d396133332d316161662d386362342d3466373037643664613236612e6a706567\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F649992%2F52bf53a4-9a33-1aaf-8cb4-4f707d6da26a.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9750b0b4c747b013f03510ffa605ce1e\" alt=\"discoveryExport.jpg\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/649992/52bf53a4-9a33-1aaf-8cb4-4f707d6da26a.jpeg\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F649992%2F52bf53a4-9a33-1aaf-8cb4-4f707d6da26a.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=30c082f6f2062ab9c2f20fb76abc3cf4 1x\" loading=\"lazy\"></a></p>\n\n<h1>\n<span id=\"終わりに\" class=\"fragment\"></span><a href=\"#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>終わりに</h1>\n\n<p>エクスポートをしてもインポートができなければあまり意味がありません。。。。<br>\n大丈夫です！！インポートプログラムも近々で作成予定です。</p>\n",
      "body": "# コレクション内の情報をエクスポートする\ncollectionの内容をエクスポートしてほかのコレクションに適用したりコレクションの情報を別で保存しておきたいときがあると思います。(私があったので記事を書いているのですが…)\nということで、コレクションの情報をエクスポートするプログラムをTypescriptで作りました。\nエクスポートする情報は以下です。\n\n- コンフィグ\n- ドキュメント\n- トレーニングデータ\n- エクスパンション(同義語)\n\nソースは[git](https://github.com/Ryota-Amano/ibmcloud-discovery-export)にあります。\nQiitaの記事ではプログラムの仕様や概要を説明します。利用方法はgitをご覧ください。\n**ご利用は自己責任でお願いいたします。**\n改善点や不明点等ございましたら連絡いただけますと嬉しいです。\n\n# 環境\n- Windows10\n- Node　v14.17.0\n- npm　7.15.1\n\n\n# 仕様\n\n- 資格情報はプログラム実行前に`Authentication.yaml`に記載しておく\n- ドキュメントのエクスポートは1万件まで\n\n#フォルダ構成\n\n```\nibmcloud-discovery-export/(root)\n ├─ dist/\n ├─ node_modules/\n ├─ src/\n │   ├─ api/\n │   │   └─ Discovery.ts\n |   ├─ interface/\n │   │   └─ index.ts\n │   ├─ ConfigurationDetails.ts\n │   ├─ ExpansionList.ts\n │   ├─ Loading.ts\n │   ├─ QueryCollection.ts\n │   ├─ TrainingList.ts\n │   └─ UserInput.ts\n ├─ .gitignore\n ├─ app.ts\n ├─ Authentication.yaml\n ├─ package-lock.json\n ├─ package.json\n ├─ RRADME.md\n └─ tsconfig.json\n```\n\n**`dist/`**　tsをコンパイルした後のjsファイルが格納されている。プログラム実行時はdist/app.jsを実行する。\n**`Discovery.ts`**  DiscoveryへのAPIコール処理を行うtsファイル\n**`ConfigurationDetails.ts`**コンフィグの取得を行うtsファイル\n**`ExpansionList.ts`** エクスパンション(同義語)の取得を行うtsファイル\n**`TrainingList.ts`** トレーニングの取得を行うtsファイル\n**`QueryCollection.ts`** ドキュメントの取得を行うtsファイル\n**`UserInput.ts`** プログラム実行後の入力を促す処理を行うtsファイル\n**`app.ts`** メインのTypeScriptファイル\n**`Authentication.yaml`** Discoveryの資格情報と出力名を入力しておくyamlファイル\n\n\n#フローチャート\n大まかな流れをフローチャートで書きました。\n綺麗なものではないですがご勘弁ください。\n![discoveryExport.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/649992/52bf53a4-9a33-1aaf-8cb4-4f707d6da26a.jpeg)\n\n# 終わりに\nエクスポートをしてもインポートができなければあまり意味がありません。。。。\n大丈夫です！！インポートプログラムも近々で作成予定です。\n\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2021-09-30T00:16:27+09:00",
      "group": null,
      "id": "d4a2fd8a0f67b45e69c6",
      "likes_count": 0,
      "private": false,
      "reactions_count": 0,
      "tags": [
          {
              "name": "Node.js",
              "versions": []
          },
          {
              "name": "TypeScript",
              "versions": []
          },
          {
              "name": "Watson",
              "versions": []
          },
          {
              "name": "ibmcloud",
              "versions": []
          },
          {
              "name": "Discovery",
              "versions": []
          }
      ],
      "title": "Watson Discovery便利プログラム ~Export編~",
      "updated_at": "2021-09-30T00:16:27+09:00",
      "url": "https://qiita.com/RyotaAmano/items/d4a2fd8a0f67b45e69c6",
      "user": {
          "description": "4年目のポンコツSEです。今までのことやこれから触っていくものについて発信していきたいと思います。\r\n最近NodeとReactを触り始めました。",
          "facebook_id": "",
          "followees_count": 0,
          "followers_count": 1,
          "github_login_name": null,
          "id": "RyotaAmano",
          "items_count": 12,
          "linkedin_id": "",
          "location": "",
          "name": "天野 僚太",
          "organization": "株式会社シーアイエス",
          "permanent_id": 649992,
          "profile_image_url": "https://secure.gravatar.com/avatar/1a42ae5badef6d9fe43a209191c731d8",
          "team_only": false,
          "twitter_screen_name": null,
          "website_url": ""
      },
      "page_views_count": null,
      "team_membership": null
  },
  {
      "rendered_body": "<p>Eclipse+MavenでJavaFXを使い、Eclipseからの実行と、実行可能jarの作成ができるまでの手順を記載する。<br>\nこの手順で環境構築を行った例は以下。<br>\n<a href=\"https://github.com/tsyki/javafx-example\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/tsyki/javafx-example</a></p>\n\n<h1>\n<span id=\"javafx用のeclipseプラグインefxclipseを入れる任意\" class=\"fragment\"></span><a href=\"#javafx%E7%94%A8%E3%81%AEeclipse%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3efxclipse%E3%82%92%E5%85%A5%E3%82%8C%E3%82%8B%E4%BB%BB%E6%84%8F\"><i class=\"fa fa-link\"></i></a>JavaFX用のEclipseプラグイン「e(fx)clipse」を入れる(任意)</h1>\n\n<p>マーケットプレイスからインストールする。<br>\n入れなくてもJavaFXのアプリの実行はできるが、入れておくとFXMLの編集がやりやすくなる。<br>\n例えば、FXMLで指定したIDに対応するプロパティがコントローラで定義されていない、といった場合に警告を出してくれる。<br>\n2021/9版のpleiadesにe(fx)clipse3.7を入れて動作することを確認済み</p>\n\n<h1>\n<span id=\"新規mavenプロジェクトを作成\" class=\"fragment\"></span><a href=\"#%E6%96%B0%E8%A6%8Fmaven%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>新規Mavenプロジェクトを作成</h1>\n\n<p>「シンプルなプロジェクトの作成」をONにして作成する</p>\n\n<h1>\n<span id=\"pomxmlに以下を追加\" class=\"fragment\"></span><a href=\"#pomxml%E3%81%AB%E4%BB%A5%E4%B8%8B%E3%82%92%E8%BF%BD%E5%8A%A0\"><i class=\"fa fa-link\"></i></a>pom.xmlに以下を追加</h1>\n\n<div class=\"code-frame\" data-lang=\"xml\"><div class=\"highlight\"><pre><code>        <span class=\"nt\">&lt;dependency&gt;</span>\n            <span class=\"nt\">&lt;groupId&gt;</span>org.openjfx<span class=\"nt\">&lt;/groupId&gt;</span>\n            <span class=\"nt\">&lt;artifactId&gt;</span>javafx-controls<span class=\"nt\">&lt;/artifactId&gt;</span>\n            <span class=\"nt\">&lt;version&gt;</span>17<span class=\"nt\">&lt;/version&gt;</span>\n        <span class=\"nt\">&lt;/dependency&gt;</span>\n        <span class=\"nt\">&lt;dependency&gt;</span>\n            <span class=\"nt\">&lt;groupId&gt;</span>org.openjfx<span class=\"nt\">&lt;/groupId&gt;</span>\n            <span class=\"nt\">&lt;artifactId&gt;</span>javafx-fxml<span class=\"nt\">&lt;/artifactId&gt;</span>\n            <span class=\"nt\">&lt;version&gt;</span>17<span class=\"nt\">&lt;/version&gt;</span>\n        <span class=\"nt\">&lt;/dependency&gt;</span>\n</code></pre></div></div>\n\n<h1>\n<span id=\"新規javafxプロジェクトを作成作成されたファイルを上記mavenプロジェクトにコピー\" class=\"fragment\"></span><a href=\"#%E6%96%B0%E8%A6%8Fjavafx%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90%E4%BD%9C%E6%88%90%E3%81%95%E3%82%8C%E3%81%9F%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E4%B8%8A%E8%A8%98maven%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AB%E3%82%B3%E3%83%94%E3%83%BC\"><i class=\"fa fa-link\"></i></a>新規JavaFXプロジェクトを作成。作成されたファイルを上記Mavenプロジェクトにコピー</h1>\n\n<p>FXMLを使う想定なので、ウィザードの宣言的UIはFXMLにしておく。<br>\nこれにより、<code>Main.java</code>、<code>SampleControler.java</code>、<code>application.css</code>、<code>Sample.fxml</code>の4ファイルが作成される。<br>\nJavaFXプロジェクトだと、上記fxml、cssファイルもjavaファイルと同ディレクトリに配置されるが、Mavenプロジェクトの場合、そうすると実行可能jarを作成する際にfxml、cssファイルがjarに含まれない。<br>\nこのため、Mavenプロジェクトにコピーする際は、fxml、cssファイルはresources以下に配置する。<br>\n(開発時はFXMLと対応するコントローラは同ディレクトリにあった方がやりやすいのだが…)</p>\n\n<h1>\n<span id=\"mainを実行するクラスを新規に追加する\" class=\"fragment\"></span><a href=\"#main%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%92%E6%96%B0%E8%A6%8F%E3%81%AB%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>mainを実行するクラスを新規に追加する</h1>\n\n<p>上記手順で作成されたMainクラスがmainを実装しているが、これを直接Eclipseから実行しようとすると、<code>エラー: JavaFXランタイム・コンポーネントが不足しており、このアプリケーションの実行に必要です</code>のエラーが発生して実行できない。<br>\nこれを避けるために、Mainクラスのmainを呼ぶだけのクラスを作成し、そこから実行するようにする。<br>\n参考：<a href=\"https://torutk.hatenablog.jp/entry/2018/12/01/215113\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://torutk.hatenablog.jp/entry/2018/12/01/215113</a></p>\n\n<h1>\n<span id=\"maven-assemblyプラグインを入れる\" class=\"fragment\"></span><a href=\"#maven-assembly%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%82%92%E5%85%A5%E3%82%8C%E3%82%8B\"><i class=\"fa fa-link\"></i></a>maven-assemblyプラグインを入れる</h1>\n\n<p>以下をpom.xmlに追加する。これにより<code>mvn package</code>で実行可能jarが作成可能となる。</p>\n\n<div class=\"code-frame\" data-lang=\"xml\"><div class=\"highlight\"><pre><code>    <span class=\"nt\">&lt;build&gt;</span>\n        <span class=\"nt\">&lt;plugins&gt;</span>\n            <span class=\"c\">&lt;!-- 実行可能jarファイル用のプラグイン --&gt;</span>\n            <span class=\"nt\">&lt;plugin&gt;</span>\n                <span class=\"nt\">&lt;groupId&gt;</span>org.apache.maven.plugins<span class=\"nt\">&lt;/groupId&gt;</span>\n                <span class=\"nt\">&lt;artifactId&gt;</span>maven-assembly-plugin<span class=\"nt\">&lt;/artifactId&gt;</span>\n                <span class=\"nt\">&lt;version&gt;</span>3.3.0<span class=\"nt\">&lt;/version&gt;</span>\n                <span class=\"nt\">&lt;configuration&gt;</span>\n                    <span class=\"c\">&lt;!-- TODO jarファイルの名前になるので適宜修正 --&gt;</span>\n                    <span class=\"nt\">&lt;finalName&gt;</span>javafx-example<span class=\"nt\">&lt;/finalName&gt;</span>\n                    <span class=\"nt\">&lt;descriptorRefs&gt;</span>\n                        <span class=\"c\">&lt;!-- 依存するリソースをすべてjarに同梱する --&gt;</span>\n                        <span class=\"nt\">&lt;descriptorRef&gt;</span>jar-with-dependencies<span class=\"nt\">&lt;/descriptorRef&gt;</span>\n                    <span class=\"nt\">&lt;/descriptorRefs&gt;</span>\n                    <span class=\"nt\">&lt;archive&gt;</span>\n                        <span class=\"nt\">&lt;manifest&gt;</span>\n                            <span class=\"c\">&lt;!-- TODO mainを実行するクラスを指定 --&gt;</span>\n                            <span class=\"nt\">&lt;mainClass&gt;</span>jp.gr.java_conf.tsyki.javafx.EntryPoint<span class=\"nt\">&lt;/mainClass&gt;</span>\n                        <span class=\"nt\">&lt;/manifest&gt;</span>\n                    <span class=\"nt\">&lt;/archive&gt;</span>\n                <span class=\"nt\">&lt;/configuration&gt;</span>\n                <span class=\"nt\">&lt;executions&gt;</span>\n                    <span class=\"nt\">&lt;execution&gt;</span>\n                        <span class=\"c\">&lt;!-- idタグは任意の文字列であれば何でもよい --&gt;</span>\n                        <span class=\"nt\">&lt;id&gt;</span>make-assembly<span class=\"nt\">&lt;/id&gt;</span>\n                        <span class=\"nt\">&lt;phase&gt;</span>package<span class=\"nt\">&lt;/phase&gt;</span>\n                        <span class=\"nt\">&lt;goals&gt;</span>\n                            <span class=\"nt\">&lt;goal&gt;</span>single<span class=\"nt\">&lt;/goal&gt;</span>\n                        <span class=\"nt\">&lt;/goals&gt;</span>\n                    <span class=\"nt\">&lt;/execution&gt;</span>\n                <span class=\"nt\">&lt;/executions&gt;</span>\n            <span class=\"nt\">&lt;/plugin&gt;</span>\n        <span class=\"nt\">&lt;/plugins&gt;</span>\n    <span class=\"nt\">&lt;/build&gt;</span>\n</code></pre></div></div>\n",
      "body": "Eclipse+MavenでJavaFXを使い、Eclipseからの実行と、実行可能jarの作成ができるまでの手順を記載する。\nこの手順で環境構築を行った例は以下。\nhttps://github.com/tsyki/javafx-example\n\n# JavaFX用のEclipseプラグイン「e(fx)clipse」を入れる(任意)\nマーケットプレイスからインストールする。\n入れなくてもJavaFXのアプリの実行はできるが、入れておくとFXMLの編集がやりやすくなる。\n例えば、FXMLで指定したIDに対応するプロパティがコントローラで定義されていない、といった場合に警告を出してくれる。\n2021/9版のpleiadesにe(fx)clipse3.7を入れて動作することを確認済み\n# 新規Mavenプロジェクトを作成\n「シンプルなプロジェクトの作成」をONにして作成する\n# pom.xmlに以下を追加\n```xml\n\t\t<dependency>\n\t\t\t<groupId>org.openjfx</groupId>\n\t\t\t<artifactId>javafx-controls</artifactId>\n\t\t\t<version>17</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.openjfx</groupId>\n\t\t\t<artifactId>javafx-fxml</artifactId>\n\t\t\t<version>17</version>\n\t\t</dependency>\n```\n# 新規JavaFXプロジェクトを作成。作成されたファイルを上記Mavenプロジェクトにコピー\nFXMLを使う想定なので、ウィザードの宣言的UIはFXMLにしておく。\nこれにより、`Main.java`、`SampleControler.java`、`application.css`、`Sample.fxml`の4ファイルが作成される。\nJavaFXプロジェクトだと、上記fxml、cssファイルもjavaファイルと同ディレクトリに配置されるが、Mavenプロジェクトの場合、そうすると実行可能jarを作成する際にfxml、cssファイルがjarに含まれない。\nこのため、Mavenプロジェクトにコピーする際は、fxml、cssファイルはresources以下に配置する。\n(開発時はFXMLと対応するコントローラは同ディレクトリにあった方がやりやすいのだが…)\n# mainを実行するクラスを新規に追加する\n上記手順で作成されたMainクラスがmainを実装しているが、これを直接Eclipseから実行しようとすると、`エラー: JavaFXランタイム・コンポーネントが不足しており、このアプリケーションの実行に必要です`のエラーが発生して実行できない。\nこれを避けるために、Mainクラスのmainを呼ぶだけのクラスを作成し、そこから実行するようにする。\n参考：https://torutk.hatenablog.jp/entry/2018/12/01/215113\n# maven-assemblyプラグインを入れる\n以下をpom.xmlに追加する。これにより`mvn package`で実行可能jarが作成可能となる。\n\n```xml\n\t<build>\n\t\t<plugins>\n\t\t\t<!-- 実行可能jarファイル用のプラグイン -->\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-assembly-plugin</artifactId>\n\t\t\t\t<version>3.3.0</version>\n\t\t\t\t<configuration>\n\t\t\t\t\t<!-- TODO jarファイルの名前になるので適宜修正 -->\n\t\t\t\t\t<finalName>javafx-example</finalName>\n\t\t\t\t\t<descriptorRefs>\n\t\t\t\t\t\t<!-- 依存するリソースをすべてjarに同梱する -->\n\t\t\t\t\t\t<descriptorRef>jar-with-dependencies</descriptorRef>\n\t\t\t\t\t</descriptorRefs>\n\t\t\t\t\t<archive>\n\t\t\t\t\t\t<manifest>\n\t\t\t\t\t\t\t<!-- TODO mainを実行するクラスを指定 -->\n\t\t\t\t\t\t\t<mainClass>jp.gr.java_conf.tsyki.javafx.EntryPoint</mainClass>\n\t\t\t\t\t\t</manifest>\n\t\t\t\t\t</archive>\n\t\t\t\t</configuration>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<!-- idタグは任意の文字列であれば何でもよい -->\n\t\t\t\t\t\t<id>make-assembly</id>\n\t\t\t\t\t\t<phase>package</phase>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>single</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n```\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2021-09-30T00:10:48+09:00",
      "group": null,
      "id": "77e8421244eed6c53fc4",
      "likes_count": 0,
      "private": false,
      "reactions_count": 0,
      "tags": [
          {
              "name": "Java",
              "versions": []
          },
          {
              "name": "Eclipse",
              "versions": []
          },
          {
              "name": "JavaFX",
              "versions": []
          }
      ],
      "title": "Eclipse+MavenでJavaFXの環境構築を行う",
      "updated_at": "2021-09-30T00:10:48+09:00",
      "url": "https://qiita.com/tsyki/items/77e8421244eed6c53fc4",
      "user": {
          "description": null,
          "facebook_id": null,
          "followees_count": 0,
          "followers_count": 0,
          "github_login_name": "tsyki",
          "id": "tsyki",
          "items_count": 4,
          "linkedin_id": null,
          "location": null,
          "name": "",
          "organization": null,
          "permanent_id": 140943,
          "profile_image_url": "https://avatars.githubusercontent.com/u/20718223?v=3",
          "team_only": false,
          "twitter_screen_name": null,
          "website_url": null
      },
      "page_views_count": null,
      "team_membership": null
  },
  {
      "rendered_body": "<p>Qiita 10周年記念イベントということでこの記事を作成してみました</p>\n\n<p>前々から自分のブログを作ってみたいなあと思いつつ、WordPressはサーバー代結構かかるなあと思ってなかなか手が出せずにいました。</p>\n\n<p>でいろいろ調べた結果、SSGなら運用コスト0円でサイトを作れると知り、その中でも人気のHugoを使ってみた結果思いのほか良かったので、HugoとWordPressの比較＆検証をしてみました。</p>\n\n<p>ちなみに自分の作ったブログがこちらです！<br><br>\n<a href=\"https://engineer-life.okdyy75.com\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://engineer-life.okdyy75.com</a></p>\n\n<p>よくあるWordPressのブログっぽいデザインで作りました</p>\n\n<p>運用コストはドメイン代の年1,540円のみで、GitLab Pagesでホスティングしています。<br>\nGitLab Pagesはプライベートリポジトリでサイトを公開できるのでオススメです</p>\n\n<h1>\n<span id=\"比較\" class=\"fragment\"></span><a href=\"#%E6%AF%94%E8%BC%83\"><i class=\"fa fa-link\"></i></a>比較</h1>\n\n<h3>\n<span id=\"基本\" class=\"fragment\"></span><a href=\"#%E5%9F%BA%E6%9C%AC\"><i class=\"fa fa-link\"></i></a>①基本</h3>\n\n<table>\n<thead>\n<tr>\n<th></th>\n<th>WordPress</th>\n<th>Hugo</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>サイト構築の難易度</td>\n<td>○</td>\n<td>△</td>\n</tr>\n<tr>\n<td>記事執筆の手軽さ</td>\n<td>○</td>\n<td>○</td>\n</tr>\n<tr>\n<td>テーマの種類</td>\n<td>○</td>\n<td>△</td>\n</tr>\n<tr>\n<td>カスタマイズ</td>\n<td>○</td>\n<td>○</td>\n</tr>\n</tbody>\n</table>\n\n<h3>\n<span id=\"インフラ面\" class=\"fragment\"></span><a href=\"#%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E9%9D%A2\"><i class=\"fa fa-link\"></i></a>②インフラ面</h3>\n\n<table>\n<thead>\n<tr>\n<th></th>\n<th>WordPress</th>\n<th>Hugo</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>運用コスト</td>\n<td>△</td>\n<td>○</td>\n</tr>\n<tr>\n<td>パフォーマンス</td>\n<td>△</td>\n<td>○</td>\n</tr>\n<tr>\n<td>セキュリティー</td>\n<td>△</td>\n<td>○</td>\n</tr>\n<tr>\n<td>バージョン管理</td>\n<td>△</td>\n<td>○</td>\n</tr>\n<tr>\n<td>複数環境での運用</td>\n<td>×</td>\n<td>○</td>\n</tr>\n<tr>\n<td>別環境への移行</td>\n<td>△</td>\n<td>△</td>\n</tr>\n</tbody>\n</table>\n\n<h3>\n<span id=\"細かい点\" class=\"fragment\"></span><a href=\"#%E7%B4%B0%E3%81%8B%E3%81%84%E7%82%B9\"><i class=\"fa fa-link\"></i></a>③細かい点</h3>\n\n<table>\n<thead>\n<tr>\n<th></th>\n<th>WordPress</th>\n<th>Hugo</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ユーザーの管理</td>\n<td>○</td>\n<td>×</td>\n</tr>\n<tr>\n<td>コメント機能</td>\n<td>○</td>\n<td>×</td>\n</tr>\n<tr>\n<td>お問い合わせ</td>\n<td>○</td>\n<td>×</td>\n</tr>\n<tr>\n<td>サイト内検索</td>\n<td>○</td>\n<td>×</td>\n</tr>\n<tr>\n<td>人気記事</td>\n<td>○</td>\n<td>×</td>\n</tr>\n<tr>\n<td>関連記事</td>\n<td>○</td>\n<td>○</td>\n</tr>\n<tr>\n<td>ブログカード</td>\n<td>○</td>\n<td>×</td>\n</tr>\n<tr>\n<td>SEO</td>\n<td>○</td>\n<td>○</td>\n</tr>\n<tr>\n<td>画像管理</td>\n<td>○</td>\n<td>○</td>\n</tr>\n</tbody>\n</table>\n\n<h1>\n<span id=\"解説\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E8%AA%AC\"><i class=\"fa fa-link\"></i></a>解説</h1>\n\n<h2>\n<span id=\"基本-1\" class=\"fragment\"></span><a href=\"#%E5%9F%BA%E6%9C%AC-1\"><i class=\"fa fa-link\"></i></a>①基本</h2>\n\n<h3>\n<span id=\"サイト構築の難易度\" class=\"fragment\"></span><a href=\"#%E3%82%B5%E3%82%A4%E3%83%88%E6%A7%8B%E7%AF%89%E3%81%AE%E9%9B%A3%E6%98%93%E5%BA%A6\"><i class=\"fa fa-link\"></i></a>サイト構築の難易度</h3>\n\n<ul>\n<li>WordPressはプログラミング未経験の人でも構築できる</li>\n<li>Hugoの場合は最低限Gitが使えないと構築が難しい</li>\n</ul>\n\n<h3>\n<span id=\"記事執筆の手軽さ\" class=\"fragment\"></span><a href=\"#%E8%A8%98%E4%BA%8B%E5%9F%B7%E7%AD%86%E3%81%AE%E6%89%8B%E8%BB%BD%E3%81%95\"><i class=\"fa fa-link\"></i></a>記事執筆の手軽さ</h3>\n\n<ul>\n<li>WordPressはhtml、WYSIWYG、マークダウンで記事をかける。プレビュー・予約投稿可能</li>\n<li>Hugoはhtml、マークダウンで記事が書ける。プレビュー・予約投稿可能。ネットに繋がっていなくてもローカルで確認できる</li>\n</ul>\n\n<h3>\n<span id=\"テーマの種類\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%83%BC%E3%83%9E%E3%81%AE%E7%A8%AE%E9%A1%9E\"><i class=\"fa fa-link\"></i></a>テーマの種類</h3>\n\n<ul>\n<li>WordPressはテーマの数も多く、使いやすいテーマもそれなりにあると感じた</li>\n<li>HugoはWordPressに比べて数も少なく、使いやすいテーマも少ないと感じた</li>\n</ul>\n\n<h3>\n<span id=\"カスタマイズ\" class=\"fragment\"></span><a href=\"#%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA\"><i class=\"fa fa-link\"></i></a>カスタマイズ</h3>\n\n<ul>\n<li>WordPressはGUI上で簡単にサイトのレイアウトを変更したりカスタマイズできるのがメリット。アクションやフィルターなど使って細かいカスタマイズも可能。ただしWordPressのお作法に則った記述が必要。動的サイトのため、webでできることはなんでもできる（と思う）</li>\n<li>Hugoはゼロからフルカスタムで作りやすいのがメリット。そのための機能も十分用意されている。既存のテーマを使う場合はconfigを設定するだけで簡単に使うことも可能。ただしconfigで設定できる以上のことをしたい場合は自分でコードを書く必要がある。静的サイトのため、できることには限りがある。</li>\n</ul>\n\n<h2>\n<span id=\"インフラ面-1\" class=\"fragment\"></span><a href=\"#%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E9%9D%A2-1\"><i class=\"fa fa-link\"></i></a>②インフラ面</h2>\n\n<h3>\n<span id=\"運用コスト\" class=\"fragment\"></span><a href=\"#%E9%81%8B%E7%94%A8%E3%82%B3%E3%82%B9%E3%83%88\"><i class=\"fa fa-link\"></i></a>運用コスト</h3>\n\n<p>できるだけ最低料金で1年契約とするといくらかかるか計算してみた（※2021年9月29日時点）<br>\nちなみに独自ドメインを使う場合は +1,540円かかる（Googleドメインの場合）</p>\n\n<h4>\n<span id=\"-1-wordpress\" class=\"fragment\"></span><a href=\"#-1-wordpress\"><i class=\"fa fa-link\"></i></a>②-1 WordPress</h4>\n\n<ul>\n<li>Herokuを使えば0円でも可能だが、常時起動できない＆画像管理できない等、現実的ではないので除外</li>\n<li>有名どころのサーバーは月平均500円ほど</li>\n</ul>\n\n<h5>\n<span id=\"ロリポップの場合\" class=\"fragment\"></span><a href=\"#%E3%83%AD%E3%83%AA%E3%83%9D%E3%83%83%E3%83%97%E3%81%AE%E5%A0%B4%E5%90%88\"><i class=\"fa fa-link\"></i></a>ロリポップの場合</h5>\n\n<ul>\n<li>ライトプラン 5,610円（初期費用 1,650円 + 利用料金 330円/月 × 12か月）\n\n<ul>\n<li>ディスク容量 160GB, 転送量 500GB/日, DB容量 500MB</li>\n</ul>\n</li>\n</ul>\n\n<p><qiita-embed-ogp src=\"https://lolipop.jp/pricing/\"></qiita-embed-ogp></p>\n\n<h5>\n<span id=\"さくらのレンタルサーバの場合\" class=\"fragment\"></span><a href=\"#%E3%81%95%E3%81%8F%E3%82%89%E3%81%AE%E3%83%AC%E3%83%B3%E3%82%BF%E3%83%AB%E3%82%B5%E3%83%BC%E3%83%90%E3%81%AE%E5%A0%B4%E5%90%88\"><i class=\"fa fa-link\"></i></a>さくらのレンタルサーバの場合</h5>\n\n<ul>\n<li>スタンダード 6,286円（初期費用 1,048円 + 利用料金 5,238円 一括払い）\n\n<ul>\n<li>ディスク容量 100GB, 転送量 300GB/月, DB容量 3GB</li>\n</ul>\n</li>\n</ul>\n\n<p><qiita-embed-ogp src=\"https://rs.sakura.ad.jp/plans.html\"></qiita-embed-ogp></p>\n\n<h5>\n<span id=\"スターサーバーの場合\" class=\"fragment\"></span><a href=\"#%E3%82%B9%E3%82%BF%E3%83%BC%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%81%AE%E5%A0%B4%E5%90%88\"><i class=\"fa fa-link\"></i></a>スターサーバーの場合</h5>\n\n<ul>\n<li>ライトプラン 4,950円（初期費用 1,650円 + 利用料金 275円/月 × 12か月）（今ならキャンペーン中で3,300円らしい）\n\n<ul>\n<li>ディスク容量 160GB, 転送量 500GB/日, DB容量 1GB</li>\n</ul>\n</li>\n</ul>\n\n<p><qiita-embed-ogp src=\"https://www.star.ne.jp/service/index.php\"></qiita-embed-ogp></p>\n\n<h5>\n<span id=\"リトルサーバーの場合\" class=\"fragment\"></span><a href=\"#%E3%83%AA%E3%83%88%E3%83%AB%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%81%AE%E5%A0%B4%E5%90%88\"><i class=\"fa fa-link\"></i></a>リトルサーバーの場合</h5>\n\n<ul>\n<li>ミニプラン 2,720円（初期費用 920円 + 利用料金 150円/月 × 12か月）\n\n<ul>\n<li>ディスク容量 20GB, 転送量 30GB/時, DB容量 1GB</li>\n</ul>\n</li>\n</ul>\n\n<p><qiita-embed-ogp src=\"https://lsv.jp/?planall\"></qiita-embed-ogp></p>\n\n<h4>\n<span id=\"-2-hugo\" class=\"fragment\"></span><a href=\"#-2-hugo\"><i class=\"fa fa-link\"></i></a>②-2 Hugo</h4>\n\n<ul>\n<li>Hugoの場合、GitHub PagesやGitLab Pagesを使えば0円でも運用可</li>\n</ul>\n\n<h5>\n<span id=\"githubの場合\" class=\"fragment\"></span><a href=\"#github%E3%81%AE%E5%A0%B4%E5%90%88\"><i class=\"fa fa-link\"></i></a>GitHubの場合</h5>\n\n<ul>\n<li>無料アカウント パブリックリポジトリ 0円\n\n<ul>\n<li>1ファイル 上限100MB, リポジトリサイズ 無制限だが推奨1GB, Pagesサイズ 1GBまで, 転送量 100GB/月, 10ビルド/1時間, CI 2000分/月<br>\n</li>\n</ul>\n</li>\n<li>プライベートリポジトリを使うなら Proプラン 5,340円（$4/月（445円ほど）× 12か月）</li>\n</ul>\n\n<p><qiita-embed-ogp src=\"https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-large-files-on-github\"></qiita-embed-ogp></p>\n\n<p><qiita-embed-ogp src=\"https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages#usage-limits\"></qiita-embed-ogp></p>\n\n<h5>\n<span id=\"gitlabの場合\" class=\"fragment\"></span><a href=\"#gitlab%E3%81%AE%E5%A0%B4%E5%90%88\"><i class=\"fa fa-link\"></i></a>GitLabの場合</h5>\n\n<ul>\n<li>無料アカウント プライベートリポジトリ 0円\n\n<ul>\n<li>1ファイル 上限10GB？, リポジトリサイズ 10GB, Pagesサイズ 1GBまで, 転送量 上限なし, ビルド上限なし, CI 400分/月</li>\n</ul>\n</li>\n</ul>\n\n<p><qiita-embed-ogp src=\"https://docs.gitlab.com/ee/user/admin_area/settings/account_and_limit_settings.html#repository-size-limit\"></qiita-embed-ogp></p>\n\n<p><qiita-embed-ogp src=\"https://forum.gitlab.com/t/what-are-the-restrictions-for-gitlab-pages-sites/15067\"></qiita-embed-ogp></p>\n\n<h3>\n<span id=\"パフォーマンス\" class=\"fragment\"></span><a href=\"#%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9\"><i class=\"fa fa-link\"></i></a>パフォーマンス</h3>\n\n<ul>\n<li>WordPressはリクエスト処理+DB処理が走るので静的サイトに比べその分重い。記事や画像、プラグインが増えればサイト全体が重くなる。WordPress本体の処理は削れないので、チューニングにも限界がある。</li>\n<li>HugoはWordPressに比べ静的サイトなのでかなり速い。記事や画像が増えてもビルド時間が増えるだけで、比例してサイト全体が重くなることはない。ゼロから自作すればかなりチューニングできる</li>\n</ul>\n\n<h3>\n<span id=\"セキュリティー\" class=\"fragment\"></span><a href=\"#%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3%E3%83%BC\"><i class=\"fa fa-link\"></i></a>セキュリティー</h3>\n\n<ul>\n<li>WordPressは動的なサーバーを使う以上常に脆弱性のリスクがある。WordPress本体、php、使用プラグイン等のバージョンも随時上げていく必要がある</li>\n<li>Hugoは静的サイトなのでできることも限られるがリスクはかなり低い。秘匿情報をgit上にあげる事がなければ</li>\n</ul>\n\n<h3>\n<span id=\"バージョン管理\" class=\"fragment\"></span><a href=\"#%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E7%AE%A1%E7%90%86\"><i class=\"fa fa-link\"></i></a>バージョン管理</h3>\n\n<ul>\n<li>WordPressは自分でソースとDBのバージョン管理が必要。前のバージョンに戻したい場合はそれなりに面倒</li>\n<li>Hugoはgitの使用が前提なので、前のバージョンに戻したい場合も簡単</li>\n</ul>\n\n<h3>\n<span id=\"複数環境での運用\" class=\"fragment\"></span><a href=\"#%E8%A4%87%E6%95%B0%E7%92%B0%E5%A2%83%E3%81%A7%E3%81%AE%E9%81%8B%E7%94%A8\"><i class=\"fa fa-link\"></i></a>複数環境での運用</h3>\n\n<ul>\n<li>WordPressはサイトの設定をDBで管理するため、複数環境を作っても本番との乖離が生まれやすい。そのため結局本番の設定を直接いじったりして障害になる場合も。。大きなデザイン変更やサイト全体のカスタマイズの場合、一度本番と同じ環境をローカルに作ってと手間がかかる。</li>\n<li>Hugoはサイトの設定をソースで管理するため、本番との乖離がほぼ生まれない。ローカルで確認→本番デプロイの流れがあるので、障害も出にくく、大きなデザイン変更やサイト全体のカスタマイズもしやすい</li>\n</ul>\n\n<h3>\n<span id=\"別環境への移行\" class=\"fragment\"></span><a href=\"#%E5%88%A5%E7%92%B0%E5%A2%83%E3%81%B8%E3%81%AE%E7%A7%BB%E8%A1%8C\"><i class=\"fa fa-link\"></i></a>別環境への移行</h3>\n\n<ul>\n<li>WordPressは引越し用のプラグインもあるので難しくはないと思うが、インフラ周りの差分があれば合わせる必要があり、それなりに面倒</li>\n<li>HugoはGitHub、GitLabへの移行は簡単だが、それ以外のレンタルサーバーの場合はgitのインストールや、CIでデプロイ環境を構築する必要があるので面倒</li>\n</ul>\n\n<h1>\n<span id=\"細かい点-1\" class=\"fragment\"></span><a href=\"#%E7%B4%B0%E3%81%8B%E3%81%84%E7%82%B9-1\"><i class=\"fa fa-link\"></i></a>③細かい点</h1>\n\n<h3>\n<span id=\"ユーザーの管理\" class=\"fragment\"></span><a href=\"#%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%81%AE%E7%AE%A1%E7%90%86\"><i class=\"fa fa-link\"></i></a>ユーザーの管理</h3>\n\n<ul>\n<li>WordPressはユーザーの管理ができるため、複数人でのサイト運用や、読者向けにメルマガ配信といったことが可能</li>\n<li>Hugo（SSG全般）はできない</li>\n</ul>\n\n<h3>\n<span id=\"コメント機能\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E6%A9%9F%E8%83%BD\"><i class=\"fa fa-link\"></i></a>コメント機能</h3>\n\n<ul>\n<li>WordPressは標準搭載</li>\n<li>Hugo（SSG全般）はできない。Disqusという外部ツールを使えば可能。実際使ってみた感じ、匿名でのコメントは一応できるが、名前＆メールアドレス＆画像認証が必要とかなりハードルが高く正直使いづらい。一応Disqus以外にも色々選択肢はあるので公式をチェック</li>\n</ul>\n\n<p><qiita-embed-ogp src=\"https://gohugo.io/content-management/comments/\"></qiita-embed-ogp></p>\n\n<h3>\n<span id=\"お問い合わせ\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E5%95%8F%E3%81%84%E5%90%88%E3%82%8F%E3%81%9B\"><i class=\"fa fa-link\"></i></a>お問い合わせ</h3>\n\n<ul>\n<li>WordPressはプラグインで簡単に設置可能</li>\n<li>Hugo（SSG全般）はできない。Googleフォームを使えば可能</li>\n</ul>\n\n<h3>\n<span id=\"サイト内検索\" class=\"fragment\"></span><a href=\"#%E3%82%B5%E3%82%A4%E3%83%88%E5%86%85%E6%A4%9C%E7%B4%A2\"><i class=\"fa fa-link\"></i></a>サイト内検索</h3>\n\n<ul>\n<li>WordPressは標準搭載</li>\n<li>Hugoでも一応できるが、実装がけっこう面倒</li>\n</ul>\n\n<h3>\n<span id=\"人気記事\" class=\"fragment\"></span><a href=\"#%E4%BA%BA%E6%B0%97%E8%A8%98%E4%BA%8B\"><i class=\"fa fa-link\"></i></a>人気記事</h3>\n\n<ul>\n<li>プラグインで対応可能</li>\n<li>Hugo（SSG全般）はできない。自前でAPIサーバーを建てたりすれば可能だが、けっこう面倒。</li>\n</ul>\n\n<h3>\n<span id=\"関連記事\" class=\"fragment\"></span><a href=\"#%E9%96%A2%E9%80%A3%E8%A8%98%E4%BA%8B\"><i class=\"fa fa-link\"></i></a>関連記事</h3>\n\n<ul>\n<li>WordPressはプラグインで対応可能。関連させたいタイトル、内容、カテゴリ、タグ、関連度の閾値などの設定も可能</li>\n<li>Hugoは標準搭載。関連させたいタグ、カテゴリ、関連度の閾値などの設定も可能</li>\n</ul>\n\n<h3>\n<span id=\"ブログカード\" class=\"fragment\"></span><a href=\"#%E3%83%96%E3%83%AD%E3%82%B0%E3%82%AB%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>ブログカード</h3>\n\n<ul>\n<li>WordPressは内部リンクなら標準搭載。外部リンクはプラグインで対応可能。</li>\n<li>Hugo（SSG全般）はできない。はてなのブログカードやブックマークレットなど他の方法で代替可能</li>\n</ul>\n\n<h3>\n<span id=\"seo\" class=\"fragment\"></span><a href=\"#seo\"><i class=\"fa fa-link\"></i></a>SEO</h3>\n\n<ul>\n<li>WordPressはSEOを意識したテーマが多く、記事編集画面に必要な項目を入力すれば、自動的にメタタグや構造化データ、ampを自動で生成してくれるものもあるので簡単。</li>\n<li>HugoはSEOを意識したテーマは少なく、基本必要なタグは自分で実装する必要がある。が、表示速度が非常に速いので、その点はSEO的にかなりプラス要素</li>\n</ul>\n\n<h3>\n<span id=\"画像管理\" class=\"fragment\"></span><a href=\"#%E7%94%BB%E5%83%8F%E7%AE%A1%E7%90%86\"><i class=\"fa fa-link\"></i></a>画像管理</h3>\n\n<ul>\n<li>WordPressは標準でGUIからリサイズ・トリミングが可能。プラグインを使って画像の一括圧縮やwebpへの変換もできる</li>\n<li>Hugoはリサイズ・トリミング・画像フォーマットの変換・圧縮（圧縮率も設定可）などが可能。webpへの変換もできる</li>\n</ul>\n\n<h2>\n<span id=\"hugoは未来のwordpressになりうるのか\" class=\"fragment\"></span><a href=\"#hugo%E3%81%AF%E6%9C%AA%E6%9D%A5%E3%81%AEwordpress%E3%81%AB%E3%81%AA%E3%82%8A%E3%81%86%E3%82%8B%E3%81%AE%E3%81%8B\"><i class=\"fa fa-link\"></i></a>Hugoは未来のWordPressになりうるのか？</h2>\n\n<p>現時点では一部基本的な機能（コメントや人気記事など）が使えないので、まだWordPressを超えたとは言えませんが</p>\n\n<p>最近はSSG構成のサイトも増えているので、これらを解決する外部ツールやSaaSが増えた時、HugoがWordPressを超えることになると思います。</p>\n\n<p>10年内には解決すると思うので十分Hugoは未来のWordPressになりえると思います！</p>\n\n<h3>\n<span id=\"最後にhugoを推したい\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%ABhugo%E3%82%92%E6%8E%A8%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>最後にHugoを推したい</h3>\n\n<p>WordPressを使っていて下記点を感じたらぜひHugo使ってみてください！</p>\n\n<ul>\n<li>意外とデザイン変えたりカスタマイズしづらい。色々いじってカスタマイズしたら動かなくなった！！\n\n<ul>\n<li>→ Hugoならローカルで簡単にカスタマイズ＆確認できます。本番障害起きにくいです</li>\n</ul>\n</li>\n<li>管理画面やサイトの速度が遅くてストレス\n\n<ul>\n<li>→ Hugoであればローカルの起動も高速でリアルタイムに記事を書けます。作成されるサイトも静的サイトなので動的サイトより圧倒的に高速です。</li>\n</ul>\n</li>\n<li>wordpress本体やプラグインのアップデート、定期的なバックアップなどセキュリティーリスクを気にするのが面倒\n\n<ul>\n<li>→ Hugoは作成されるサイトが静的サイトなので、動的サイトに比べるとセキュリティーリスクは低いです</li>\n</ul>\n</li>\n<li>維持費が結構かかってきつい\n\n<ul>\n<li>→ Hugoなら運用コスト0円でいけます</li>\n</ul>\n</li>\n</ul>\n\n<p>Hugoはカスタマイズがしやすい＆速度も速い＆運用も楽＆コストも安く抑えられるので、めちゃくちゃオススメです！</p>\n",
      "body": "Qiita 10周年記念イベントということでこの記事を作成してみました\n\n前々から自分のブログを作ってみたいなあと思いつつ、WordPressはサーバー代結構かかるなあと思ってなかなか手が出せずにいました。\n\nでいろいろ調べた結果、SSGなら運用コスト0円でサイトを作れると知り、その中でも人気のHugoを使ってみた結果思いのほか良かったので、HugoとWordPressの比較＆検証をしてみました。\n\nちなみに自分の作ったブログがこちらです！  \nhttps://engineer-life.okdyy75.com\n\nよくあるWordPressのブログっぽいデザインで作りました\n\n運用コストはドメイン代の年1,540円のみで、GitLab Pagesでホスティングしています。\nGitLab Pagesはプライベートリポジトリでサイトを公開できるのでオススメです\n\n# 比較\n### ①基本\n|                 | WordPress | Hugo |\n|-----------------|-----------|------|\n| サイト構築の難易度 | ○         | △    |\n| 記事執筆の手軽さ   | ○         | ○    |\n| テーマの種類      | ○          | △    |\n| カスタマイズ      | ○         | ○    |\n\n### ②インフラ面\n|                    | WordPress | Hugo |\n|--------------------|-----------|------|\n| 運用コスト          | △         | ○    |\n| パフォーマンス       | △         | ○    |\n| セキュリティー       | △         | ○    |\n| バージョン管理       | △         | ○    |\n| 複数環境での運用     | ×         | ○    |\n| 別環境への移行       | △         | △    |\n\n### ③細かい点\n|                 | WordPress | Hugo |\n|-----------------|-----------|------|\n| ユーザーの管理     | ○         | ×    |\n| コメント機能       | ○         | ×    |\n| お問い合わせ       | ○         | ×    |\n| サイト内検索       | ○         | ×    |\n| 人気記事          | ○         | ×    |\n| 関連記事          | ○         | ○    |\n| ブログカード       | ○         | ×    |\n| SEO              | ○         | ○    |\n| 画像管理          | ○         | ○    |\n\n# 解説\n## ①基本\n### サイト構築の難易度\n- WordPressはプログラミング未経験の人でも構築できる\n- Hugoの場合は最低限Gitが使えないと構築が難しい\n\n### 記事執筆の手軽さ\n- WordPressはhtml、WYSIWYG、マークダウンで記事をかける。プレビュー・予約投稿可能\n- Hugoはhtml、マークダウンで記事が書ける。プレビュー・予約投稿可能。ネットに繋がっていなくてもローカルで確認できる\n\n### テーマの種類\n- WordPressはテーマの数も多く、使いやすいテーマもそれなりにあると感じた\n- HugoはWordPressに比べて数も少なく、使いやすいテーマも少ないと感じた\n\n### カスタマイズ\n- WordPressはGUI上で簡単にサイトのレイアウトを変更したりカスタマイズできるのがメリット。アクションやフィルターなど使って細かいカスタマイズも可能。ただしWordPressのお作法に則った記述が必要。動的サイトのため、webでできることはなんでもできる（と思う）\n- Hugoはゼロからフルカスタムで作りやすいのがメリット。そのための機能も十分用意されている。既存のテーマを使う場合はconfigを設定するだけで簡単に使うことも可能。ただしconfigで設定できる以上のことをしたい場合は自分でコードを書く必要がある。静的サイトのため、できることには限りがある。\n\n## ②インフラ面\n### 運用コスト\nできるだけ最低料金で1年契約とするといくらかかるか計算してみた（※2021年9月29日時点）\nちなみに独自ドメインを使う場合は +1,540円かかる（Googleドメインの場合）\n\n#### ②-1 WordPress\n- Herokuを使えば0円でも可能だが、常時起動できない＆画像管理できない等、現実的ではないので除外\n- 有名どころのサーバーは月平均500円ほど\n\n##### ロリポップの場合\n- ライトプラン 5,610円（初期費用 1,650円 + 利用料金 330円/月 × 12か月）\n  - ディスク容量 160GB, 転送量 500GB/日, DB容量 500MB\n\nhttps://lolipop.jp/pricing/\n\n##### さくらのレンタルサーバの場合\n- スタンダード 6,286円（初期費用 1,048円 + 利用料金 5,238円 一括払い）\n  - ディスク容量 100GB, 転送量 300GB/月, DB容量 3GB\n\nhttps://rs.sakura.ad.jp/plans.html\n\n##### スターサーバーの場合\n- ライトプラン 4,950円（初期費用 1,650円 + 利用料金 275円/月 × 12か月）（今ならキャンペーン中で3,300円らしい）\n  - ディスク容量 160GB, 転送量 500GB/日, DB容量 1GB\n\nhttps://www.star.ne.jp/service/index.php\n\n##### リトルサーバーの場合\n- ミニプラン 2,720円（初期費用 920円 + 利用料金 150円/月 × 12か月）\n  - ディスク容量 20GB, 転送量 30GB/時, DB容量 1GB\n\nhttps://lsv.jp/?planall\n\n#### ②-2 Hugo\n- Hugoの場合、GitHub PagesやGitLab Pagesを使えば0円でも運用可\n\n##### GitHubの場合\n- 無料アカウント パブリックリポジトリ 0円\n  - 1ファイル 上限100MB, リポジトリサイズ 無制限だが推奨1GB, Pagesサイズ 1GBまで, 転送量 100GB/月, 10ビルド/1時間, CI 2000分/月  \n- プライベートリポジトリを使うなら Proプラン 5,340円（$4/月（445円ほど）× 12か月）\n\nhttps://docs.github.com/en/repositories/working-with-files/managing-large-files/about-large-files-on-github\n\nhttps://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages#usage-limits\n\n##### GitLabの場合\n- 無料アカウント プライベートリポジトリ 0円\n  - 1ファイル 上限10GB？, リポジトリサイズ 10GB, Pagesサイズ 1GBまで, 転送量 上限なし, ビルド上限なし, CI 400分/月\n\nhttps://docs.gitlab.com/ee/user/admin_area/settings/account_and_limit_settings.html#repository-size-limit\n\nhttps://forum.gitlab.com/t/what-are-the-restrictions-for-gitlab-pages-sites/15067\n\n### パフォーマンス\n- WordPressはリクエスト処理+DB処理が走るので静的サイトに比べその分重い。記事や画像、プラグインが増えればサイト全体が重くなる。WordPress本体の処理は削れないので、チューニングにも限界がある。\n- HugoはWordPressに比べ静的サイトなのでかなり速い。記事や画像が増えてもビルド時間が増えるだけで、比例してサイト全体が重くなることはない。ゼロから自作すればかなりチューニングできる\n\n### セキュリティー\n- WordPressは動的なサーバーを使う以上常に脆弱性のリスクがある。WordPress本体、php、使用プラグイン等のバージョンも随時上げていく必要がある\n- Hugoは静的サイトなのでできることも限られるがリスクはかなり低い。秘匿情報をgit上にあげる事がなければ\n\n### バージョン管理\n- WordPressは自分でソースとDBのバージョン管理が必要。前のバージョンに戻したい場合はそれなりに面倒\n- Hugoはgitの使用が前提なので、前のバージョンに戻したい場合も簡単\n\n### 複数環境での運用\n- WordPressはサイトの設定をDBで管理するため、複数環境を作っても本番との乖離が生まれやすい。そのため結局本番の設定を直接いじったりして障害になる場合も。。大きなデザイン変更やサイト全体のカスタマイズの場合、一度本番と同じ環境をローカルに作ってと手間がかかる。\n- Hugoはサイトの設定をソースで管理するため、本番との乖離がほぼ生まれない。ローカルで確認→本番デプロイの流れがあるので、障害も出にくく、大きなデザイン変更やサイト全体のカスタマイズもしやすい\n\n### 別環境への移行\n- WordPressは引越し用のプラグインもあるので難しくはないと思うが、インフラ周りの差分があれば合わせる必要があり、それなりに面倒\n- HugoはGitHub、GitLabへの移行は簡単だが、それ以外のレンタルサーバーの場合はgitのインストールや、CIでデプロイ環境を構築する必要があるので面倒\n\n# ③細かい点\n### ユーザーの管理\n- WordPressはユーザーの管理ができるため、複数人でのサイト運用や、読者向けにメルマガ配信といったことが可能\n- Hugo（SSG全般）はできない\n\n### コメント機能\n- WordPressは標準搭載\n- Hugo（SSG全般）はできない。Disqusという外部ツールを使えば可能。実際使ってみた感じ、匿名でのコメントは一応できるが、名前＆メールアドレス＆画像認証が必要とかなりハードルが高く正直使いづらい。一応Disqus以外にも色々選択肢はあるので公式をチェック\n\nhttps://gohugo.io/content-management/comments/\n\n### お問い合わせ\n- WordPressはプラグインで簡単に設置可能\n- Hugo（SSG全般）はできない。Googleフォームを使えば可能\n\n### サイト内検索\n- WordPressは標準搭載\n- Hugoでも一応できるが、実装がけっこう面倒\n\n### 人気記事\n- プラグインで対応可能\n- Hugo（SSG全般）はできない。自前でAPIサーバーを建てたりすれば可能だが、けっこう面倒。\n\n### 関連記事\n- WordPressはプラグインで対応可能。関連させたいタイトル、内容、カテゴリ、タグ、関連度の閾値などの設定も可能\n- Hugoは標準搭載。関連させたいタグ、カテゴリ、関連度の閾値などの設定も可能\n\n### ブログカード\n- WordPressは内部リンクなら標準搭載。外部リンクはプラグインで対応可能。\n- Hugo（SSG全般）はできない。はてなのブログカードやブックマークレットなど他の方法で代替可能\n\n### SEO\n- WordPressはSEOを意識したテーマが多く、記事編集画面に必要な項目を入力すれば、自動的にメタタグや構造化データ、ampを自動で生成してくれるものもあるので簡単。\n- HugoはSEOを意識したテーマは少なく、基本必要なタグは自分で実装する必要がある。が、表示速度が非常に速いので、その点はSEO的にかなりプラス要素\n\n### 画像管理\n- WordPressは標準でGUIからリサイズ・トリミングが可能。プラグインを使って画像の一括圧縮やwebpへの変換もできる\n- Hugoはリサイズ・トリミング・画像フォーマットの変換・圧縮（圧縮率も設定可）などが可能。webpへの変換もできる\n\n## Hugoは未来のWordPressになりうるのか？\n現時点では一部基本的な機能（コメントや人気記事など）が使えないので、まだWordPressを超えたとは言えませんが\n\n最近はSSG構成のサイトも増えているので、これらを解決する外部ツールやSaaSが増えた時、HugoがWordPressを超えることになると思います。\n\n10年内には解決すると思うので十分Hugoは未来のWordPressになりえると思います！\n\n### 最後にHugoを推したい\n\nWordPressを使っていて下記点を感じたらぜひHugo使ってみてください！\n\n- 意外とデザイン変えたりカスタマイズしづらい。色々いじってカスタマイズしたら動かなくなった！！\n  - → Hugoならローカルで簡単にカスタマイズ＆確認できます。本番障害起きにくいです\n- 管理画面やサイトの速度が遅くてストレス\n  - → Hugoであればローカルの起動も高速でリアルタイムに記事を書けます。作成されるサイトも静的サイトなので動的サイトより圧倒的に高速です。\n- wordpress本体やプラグインのアップデート、定期的なバックアップなどセキュリティーリスクを気にするのが面倒\n  - → Hugoは作成されるサイトが静的サイトなので、動的サイトに比べるとセキュリティーリスクは低いです\n- 維持費が結構かかってきつい\n  - → Hugoなら運用コスト0円でいけます\n\nHugoはカスタマイズがしやすい＆速度も速い＆運用も楽＆コストも安く抑えられるので、めちゃくちゃオススメです！\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2021-09-30T00:07:14+09:00",
      "group": null,
      "id": "33fb835dd64d3248a83a",
      "likes_count": 0,
      "private": false,
      "reactions_count": 0,
      "tags": [
          {
              "name": "WordPress",
              "versions": []
          },
          {
              "name": "Hugo",
              "versions": []
          },
          {
              "name": "Qiita10th_未来",
              "versions": []
          }
      ],
      "title": "Hugoは未来のWordPressになりうるのか？",
      "updated_at": "2021-09-30T00:07:14+09:00",
      "url": "https://qiita.com/okdyy75/items/33fb835dd64d3248a83a",
      "user": {
          "description": null,
          "facebook_id": null,
          "followees_count": 10,
          "followers_count": 11,
          "github_login_name": "okdyy75",
          "id": "okdyy75",
          "items_count": 48,
          "linkedin_id": null,
          "location": null,
          "name": "",
          "organization": null,
          "permanent_id": 275540,
          "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/275540/profile-images/1532886809",
          "team_only": false,
          "twitter_screen_name": "okdyy75",
          "website_url": null
      },
      "page_views_count": null,
      "team_membership": null
  },
  {
      "rendered_body": "\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p>コントローラーの処理は不要で、ビューのみ表示したい場合（主にトップページ）の簡潔な記述を残します。</p>\n\n<h1>\n<span id=\"やったこと\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やったこと</h1>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">app/controllers/homes_controller.rb</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nf\">top</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n</div>\n\n<p>いつもならこう書いていましたが、</p>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">app/controllers/homes_controller.rb</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nf\">top</span><span class=\"p\">:</span> <span class=\"k\">end</span>\n</code></pre></div>\n</div>\n\n<p>わずかにですが、一行で書けるようになります。</p>\n",
      "body": "#はじめに\nコントローラーの処理は不要で、ビューのみ表示したい場合（主にトップページ）の簡潔な記述を残します。\n\n#やったこと\n\n```ruby:app/controllers/homes_controller.rb\ndef top\nend\n```\n\nいつもならこう書いていましたが、\n\n```ruby:app/controllers/homes_controller.rb\ndef top: end\n```\n\nわずかにですが、一行で書けるようになります。\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2021-09-30T00:06:24+09:00",
      "group": null,
      "id": "0c0f34a68a86af54f6ce",
      "likes_count": 0,
      "private": false,
      "reactions_count": 0,
      "tags": [
          {
              "name": "Ruby",
              "versions": []
          },
          {
              "name": "Rails",
              "versions": []
          },
          {
              "name": "RubyOnRails5.2",
              "versions": []
          }
      ],
      "title": "【Rails】homesコントローラーでビューのみ使用する場合（コントローラー記述なし/アクションのみ用意）",
      "updated_at": "2021-09-30T00:06:24+09:00",
      "url": "https://qiita.com/ysdiary/items/0c0f34a68a86af54f6ce",
      "user": {
          "description": null,
          "facebook_id": null,
          "followees_count": 0,
          "followers_count": 0,
          "github_login_name": null,
          "id": "ysdiary",
          "items_count": 16,
          "linkedin_id": null,
          "location": null,
          "name": "",
          "organization": null,
          "permanent_id": 1902432,
          "profile_image_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/1902432/d980ebc61b7854ef4a33f8901359aeac739e4400/large.png?1630317874",
          "team_only": false,
          "twitter_screen_name": null,
          "website_url": null
      },
      "page_views_count": null,
      "team_membership": null
  },
  {
      "rendered_body": "<p><a href=\"https://qiita.com/yamachita0109/items/37e0913bfef56b1ed9c2\" id=\"reference-d28bc2f74093925d249d\">前回</a>、クリーンアーキテクチャの構成で簡単なLambdaを構築してみましたが、デザインパターンなどのアーキテクチャの前知識がないと理解が難しい様子。</p>\n\n<p>なので、今回は全人類共通言語である<strong>恋愛</strong>でクリーンアーキテクチャを例えたいと思います。</p>\n\n<h2>\n<span id=\"そもそもクリーンアーキテクチャとは\" class=\"fragment\"></span><a href=\"#%E3%81%9D%E3%82%82%E3%81%9D%E3%82%82%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>そもそもクリーンアーキテクチャとは</h2>\n\n<p><a href=\"https://camo.qiitausercontent.com/df5935346ebd540504b1e9b2574ab67742e53bbe/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3330303433302f33383733616130382d323237352d626631352d633064642d6234316562633637613866622e6a706567\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F300430%2F3873aa08-2275-bf15-c0dd-b41ebc67a8fb.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0330b59478c05867d26c29b0cc301363\" alt=\"クリーンアーキテクチャ.jpeg\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/300430/3873aa08-2275-bf15-c0dd-b41ebc67a8fb.jpeg\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F300430%2F3873aa08-2275-bf15-c0dd-b41ebc67a8fb.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=67d40749236d3b7e5aef46ac53bbce5e 1x\" loading=\"lazy\"></a></p>\n\n<p>はい。こんな図形が有名ですが、全く意味がわからないですよね。<br>\n各レイヤーの説明と、内側へのみの単一方向依存性を表しているそうなのですが、これらの要素を<strong>恋愛</strong>で例えます。</p>\n\n<h2>\n<span id=\"クリーンアーキテクチャ恋愛ver\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3%E6%81%8B%E6%84%9Bver\"><i class=\"fa fa-link\"></i></a>クリーンアーキテクチャ〜恋愛Ver〜</h2>\n\n<h3>\n<span id=\"図解\" class=\"fragment\"></span><a href=\"#%E5%9B%B3%E8%A7%A3\"><i class=\"fa fa-link\"></i></a>図解</h3>\n\n<p><a href=\"https://camo.qiitausercontent.com/8c8ae56da9b3245e2223ec5c2283498e6239f387/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3330303433302f36323565333037332d636132312d396239342d636161332d3361616537306631666261362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F300430%2F625e3073-ca21-9b94-caa3-3aae70f1fba6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=93f8839a323fdc2aa243bfdd1048dc3c\" width=\"80%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/300430/625e3073-ca21-9b94-caa3-3aae70f1fba6.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F300430%2F625e3073-ca21-9b94-caa3-3aae70f1fba6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ce723a8ccc42fc3eb72200a63d18a0f7 1x\" loading=\"lazy\"></a></p>\n\n<p>クリーンアーキテクチャ〜恋愛Ver〜を例の円形の図形に合わせて書き直してみました。<br>\n各レイヤーについて説明します。</p>\n\n<h3>\n<span id=\"各レイヤー\" class=\"fragment\"></span><a href=\"#%E5%90%84%E3%83%AC%E3%82%A4%E3%83%A4%E3%83%BC\"><i class=\"fa fa-link\"></i></a>各レイヤー</h3>\n\n<h4>\n<span id=\"外的要因\" class=\"fragment\"></span><a href=\"#%E5%A4%96%E7%9A%84%E8%A6%81%E5%9B%A0\"><i class=\"fa fa-link\"></i></a>外的要因</h4>\n\n<p>天気など、直接恋愛に関係ないものになります。</p>\n\n<h4>\n<span id=\"自分自身の思考選択\" class=\"fragment\"></span><a href=\"#%E8%87%AA%E5%88%86%E8%87%AA%E8%BA%AB%E3%81%AE%E6%80%9D%E8%80%83%E9%81%B8%E6%8A%9E\"><i class=\"fa fa-link\"></i></a>自分自身の思考・選択</h4>\n\n<p>恋愛において、自分自身の<strong>戦術の選択</strong>及び、<strong>行動</strong>が<strong>とても大事</strong>です。<br>\n相手に合わせたデートスポットの選択は勿論、時間帯、テンションなどなど。<br>\nここでは戦術・行動の思考・選択を行います。</p>\n\n<h4>\n<span id=\"具体的な行動\" class=\"fragment\"></span><a href=\"#%E5%85%B7%E4%BD%93%E7%9A%84%E3%81%AA%E8%A1%8C%E5%8B%95\"><i class=\"fa fa-link\"></i></a>具体的な行動</h4>\n\n<p>ここは具体的な行動です。</p>\n\n<ul>\n<li>ディズニーランドへ行く</li>\n<li>八景島シーパラダイスへ行く</li>\n<li>ディナークルージングへ行く</li>\n<li>伊香保温泉旅行へ行く</li>\n</ul>\n\n<p>などなど</p>\n\n<h4>\n<span id=\"彼女\" class=\"fragment\"></span><a href=\"#%E5%BD%BC%E5%A5%B3\"><i class=\"fa fa-link\"></i></a>彼女</h4>\n\n<p><strong>一番大事。</strong></p>\n\n<h3>\n<span id=\"ポイント\" class=\"fragment\"></span><a href=\"#%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88\"><i class=\"fa fa-link\"></i></a>ポイント</h3>\n\n<p>ポイントとしては、</p>\n\n<ul>\n<li>内側のレイヤーが恋愛において<strong>より重要な要素</strong>になる</li>\n<li>外側のレイヤーが内側のレイヤーへ影響を及ぼすが、<strong>逆はない</strong>\n</li>\n</ul>\n\n<p>この2点です。<br>\nまず、「<strong>内側のレイヤーが恋愛において重要な要素</strong>になる」についてですが、そりゃ恋愛において<strong>相手の存在</strong>が一番大事ですよね？</p>\n\n<p>続いて、「外側のレイヤーが内側のレイヤーへ影響を及ぼすが、<strong>逆はない</strong>」についてですが、<br>\n例えば、<strong>具体的な行動</strong>によって<strong>彼女</strong>へ好感度が上がったり下がったりと<em>影響を及ぼす</em>ことはありますが、<strong>彼女</strong>によって<strong>具体的な行動</strong>へは影響がないのです。</p>\n\n<h2>\n<span id=\"具体例\" class=\"fragment\"></span><a href=\"#%E5%85%B7%E4%BD%93%E4%BE%8B\"><i class=\"fa fa-link\"></i></a>具体例</h2>\n\n<p>山田くんの恋愛ケースをサンプルとしてみてみましょう。</p>\n\n<blockquote>\n<p>山田くん28歳。<br>\n西野ちゃんに恋心を抱いている。<br>\nある晴れた日、ついに西野ちゃんと遊園地デートへ行くことに。</p>\n</blockquote>\n\n<h3>\n<span id=\"図解-1\" class=\"fragment\"></span><a href=\"#%E5%9B%B3%E8%A7%A3-1\"><i class=\"fa fa-link\"></i></a>図解</h3>\n\n<p>山田くんのサンプルケースをクリーンアーキテクチャで表現すると</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/cca95d2e782b4e1c62a11c493f28727986ba148b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3330303433302f38633364313734662d623265342d373736322d396638302d6265353835323063386161632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F300430%2F8c3d174f-b2e4-7762-9f80-be58520c8aac.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=709bd8cda8dd9e8873ff2a2b34516ec7\" width=\"80%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/300430/8c3d174f-b2e4-7762-9f80-be58520c8aac.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F300430%2F8c3d174f-b2e4-7762-9f80-be58520c8aac.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3cafb817fcbc7e2f8b3d058c01946a60 1x\" loading=\"lazy\"></a></p>\n\n<p>図の通り、</p>\n\n<ol>\n<li>\n<strong>晴れ</strong>たので</li>\n<li>\n<strong>山田くんの思考・選択</strong>で</li>\n<li>\n<strong>遊園地でデート</strong>して</li>\n<li>\n<strong>西野ちゃん</strong>の好感度UP</li>\n</ol>\n\n<p>といった流れになります。</p>\n\n<h3>\n<span id=\"メリット\" class=\"fragment\"></span><a href=\"#%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88\"><i class=\"fa fa-link\"></i></a>メリット</h3>\n\n<p>恋愛の要素をそれぞ<strong>分離</strong>し、影響関係を外から内への一方通行にすることで、各要素が<strong>疎結合</strong>となります。<br>\n疎結合となることで、恋愛の<strong>メンテナンス</strong>や<strong>カスタマイズ</strong>などが容易に行えるようになります。<br>\n例えば、<strong>遊園地でデート</strong>を<strong>水族館でデート</strong>に変更した場合、</p>\n\n<ol>\n<li>\n<strong>晴れ</strong>たので</li>\n<li>\n<strong>山田くんの思考・選択</strong>で</li>\n<li>\n<del>遊園地</del> <strong>水族館でデート</strong>して</li>\n<li>\n<strong>西野ちゃん</strong>の好感度UP</li>\n</ol>\n\n<p>といった風に、3.のデート場所だけを変更すれば、その他の要素は<strong>そのまま流用できる</strong>ということです。</p>\n\n<h3>\n<span id=\"これでいいのか\" class=\"fragment\"></span><a href=\"#%E3%81%93%E3%82%8C%E3%81%A7%E3%81%84%E3%81%84%E3%81%AE%E3%81%8B\"><i class=\"fa fa-link\"></i></a>これでいいのか・・・？</h3>\n\n<p>ただ、今のままでは重大な欠陥が・・・<br>\n今の構成では、<strong>彼女</strong>レイヤーのリアクションを受けて<strong>自分自身の思考・選択</strong>を行えません。<br>\nサンプルで例えると、<strong>西野ちゃん</strong>のリアクションお構いなしに、<strong>山田くんが思考・行動をしている</strong>ということになります。</p>\n\n<p>そんな自己満クソ野郎では恋愛は成立しません。</p>\n\n<p>クリーンアーキテクチャは欠陥なのか・・・？</p>\n\n<p>いいえ、ちゃんと西野ちゃんのリアクションを考慮して山田くんが思考・行動することはできます。</p>\n\n<h2>\n<span id=\"依存関係逆転の原則dip\" class=\"fragment\"></span><a href=\"#%E4%BE%9D%E5%AD%98%E9%96%A2%E4%BF%82%E9%80%86%E8%BB%A2%E3%81%AE%E5%8E%9F%E5%89%87dip\"><i class=\"fa fa-link\"></i></a>依存関係逆転の原則(DIP)</h2>\n\n<p>クリーンアーキテクチャの図形右下に謎の線と箱がありましたよね。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/1776bd38a1043d1ed4769162b9c99fae1c46a3d1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3330303433302f66343361336166372d653930332d353764372d643832632d6535626332316430383636342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F300430%2Ff43a3af7-e903-57d7-d82c-e5bc21d08664.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ec41fbfe446bd526e14aa2906ceba4cf\" alt=\"https___qiita-image-store.s3.ap-northeast-1.amazonaws.com_0_530799_2918a4cb-10a9-6dbe-d6f7-8ea8c1e5bc4f.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/300430/f43a3af7-e903-57d7-d82c-e5bc21d08664.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F300430%2Ff43a3af7-e903-57d7-d82c-e5bc21d08664.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7a29943de6353801427ba7ab93e516a7 1x\" loading=\"lazy\"></a></p>\n\n<p>訳分からない図形ですが、これは恋愛で言うと、<strong>誰だか知らないけど、デート楽しかった。ｷｭﾝ</strong>という感じです。<br>\n山田くんのケースで例えましょう。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/d324ee4fc5b7f2d87e1bdebf6f9fd415111f7308/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3330303433302f38613966326433632d383461362d333965612d393732312d3432366665393763303736352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F300430%2F8a9f2d3c-84a6-39ea-9721-426fe97c0765.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=6fc796248d879c9aee66aa4bc789422a\" width=\"60%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/300430/8a9f2d3c-84a6-39ea-9721-426fe97c0765.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F300430%2F8a9f2d3c-84a6-39ea-9721-426fe97c0765.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=2ffe92a478ff98fb4efa146cf152a461 1x\" loading=\"lazy\"></a></p>\n\n<p>山田くんのケースで言うと、<br>\n遊園地デートが終わって、<strong>西野ちゃんがデートの感想をSNSでつぶやき</strong>、山田くんが<strong>西野ちゃんのSNSのつぶやきをこっそり見て</strong>次のデートプランを考える。<br>\nといったことが可能なのです。</p>\n\n<p>ここのポイントは<br>\n西野ちゃんは外側のレイヤーにいる<strong>山田くんを考慮した動きをしていない</strong>のにも関わらず、山田くんは<strong>西野ちゃんのデートの感想を取得できた</strong>。<br>\nと言うことです。</p>\n\n<p>これで、山田くんは<strong>自己満クソ野郎</strong>ではなく、（こっそりと）相手のフィードバックを得て次のアクションを考えることができる普通の青年になることができたのでした。</p>\n\n<h2>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n\n<p>今回の目的は、システムの設計についてあまり詳しくない人でもクリーンアーキテクチャについてふんわりと理解してもらうことでした。<br>\n達成できたのかどうかわかりませんが、かなりの怪文書になってしまいました。</p>\n\n<p>この文章を読んで少しでもシステム設計に興味を持って頂けたら嬉しいです。</p>\n",
      "body": "[前回](https://qiita.com/yamachita0109/items/37e0913bfef56b1ed9c2)、クリーンアーキテクチャの構成で簡単なLambdaを構築してみましたが、デザインパターンなどのアーキテクチャの前知識がないと理解が難しい様子。\n\nなので、今回は全人類共通言語である**恋愛**でクリーンアーキテクチャを例えたいと思います。\n\n## そもそもクリーンアーキテクチャとは\n\n![クリーンアーキテクチャ.jpeg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/300430/3873aa08-2275-bf15-c0dd-b41ebc67a8fb.jpeg)\n\nはい。こんな図形が有名ですが、全く意味がわからないですよね。\n各レイヤーの説明と、内側へのみの単一方向依存性を表しているそうなのですが、これらの要素を**恋愛**で例えます。\n\n## クリーンアーキテクチャ〜恋愛Ver〜\n\n### 図解\n\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/300430/625e3073-ca21-9b94-caa3-3aae70f1fba6.png\" width=\"80%\">\n\nクリーンアーキテクチャ〜恋愛Ver〜を例の円形の図形に合わせて書き直してみました。\n各レイヤーについて説明します。\n\n### 各レイヤー\n\n#### 外的要因\n\n天気など、直接恋愛に関係ないものになります。\n\n#### 自分自身の思考・選択\n\n恋愛において、自分自身の**戦術の選択**及び、**行動**が**とても大事**です。\n相手に合わせたデートスポットの選択は勿論、時間帯、テンションなどなど。\nここでは戦術・行動の思考・選択を行います。\n\n#### 具体的な行動\n\nここは具体的な行動です。\n\n - ディズニーランドへ行く\n - 八景島シーパラダイスへ行く\n - ディナークルージングへ行く\n - 伊香保温泉旅行へ行く\n\nなどなど\n\n#### 彼女\n\n**一番大事。**\n\n### ポイント\n\nポイントとしては、\n\n - 内側のレイヤーが恋愛において**より重要な要素**になる\n - 外側のレイヤーが内側のレイヤーへ影響を及ぼすが、**逆はない**\n\nこの2点です。\nまず、「**内側のレイヤーが恋愛において重要な要素**になる」についてですが、そりゃ恋愛において**相手の存在**が一番大事ですよね？\n\n続いて、「外側のレイヤーが内側のレイヤーへ影響を及ぼすが、**逆はない**」についてですが、\n例えば、**具体的な行動**によって**彼女**へ好感度が上がったり下がったりと*影響を及ぼす*ことはありますが、**彼女**によって**具体的な行動**へは影響がないのです。\n\n## 具体例\n\n山田くんの恋愛ケースをサンプルとしてみてみましょう。\n\n> 山田くん28歳。\n西野ちゃんに恋心を抱いている。\nある晴れた日、ついに西野ちゃんと遊園地デートへ行くことに。\n\n### 図解\n\n山田くんのサンプルケースをクリーンアーキテクチャで表現すると\n\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/300430/8c3d174f-b2e4-7762-9f80-be58520c8aac.png\" width=\"80%\">\n\n\n図の通り、\n\n1. **晴れ**たので\n1. **山田くんの思考・選択**で\n1. **遊園地でデート**して\n1. **西野ちゃん**の好感度UP\n\nといった流れになります。\n\n### メリット\n\n恋愛の要素をそれぞ**分離**し、影響関係を外から内への一方通行にすることで、各要素が**疎結合**となります。\n疎結合となることで、恋愛の**メンテナンス**や**カスタマイズ**などが容易に行えるようになります。\n例えば、**遊園地でデート**を**水族館でデート**に変更した場合、\n\n1. **晴れ**たので\n1. **山田くんの思考・選択**で\n1. ~~遊園地~~ **水族館でデート**して\n1. **西野ちゃん**の好感度UP\n\nといった風に、3.のデート場所だけを変更すれば、その他の要素は**そのまま流用できる**ということです。\n\n### これでいいのか・・・？\n\nただ、今のままでは重大な欠陥が・・・\n今の構成では、**彼女**レイヤーのリアクションを受けて**自分自身の思考・選択**を行えません。\nサンプルで例えると、**西野ちゃん**のリアクションお構いなしに、**山田くんが思考・行動をしている**ということになります。\n\nそんな自己満クソ野郎では恋愛は成立しません\b。\n\nクリーンアーキテクチャは欠陥なのか・・・？\n\nいいえ、ちゃんと西野ちゃんのリアクションを考慮して山田くんが思考・行動することはできます。\n\n## 依存関係逆転の原則(DIP)\n\nクリーンアーキテクチャの図形右下に謎の線と箱がありましたよね。\n\n![https___qiita-image-store.s3.ap-northeast-1.amazonaws.com_0_530799_2918a4cb-10a9-6dbe-d6f7-8ea8c1e5bc4f.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/300430/f43a3af7-e903-57d7-d82c-e5bc21d08664.png)\n\n訳分からない図形ですが、これは恋愛で言うと、**誰だか知らないけど、デート楽しかった。ｷｭﾝ**という感じです。\n山田くんのケースで例えましょう。\n\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/300430/8a9f2d3c-84a6-39ea-9721-426fe97c0765.png\" width=\"60%\">\n\n山田くんのケースで言うと、\n遊園地デートが終わって、**西野ちゃんがデートの感想をSNSでつぶやき**、山田くんが**西野ちゃんのSNSのつぶやきをこっそり見て**次のデートプランを考える。\nといったことが可能なのです。\n\nここのポイントは\n西野ちゃんは外側のレイヤーにいる**山田くんを考慮した動きをしていない**のにも関わらず、山田くんは**西野ちゃんのデートの感想を取得できた**。\nと言うことです。\n\nこれで、山田くんは**自己満クソ野郎**ではなく、（こっそりと）相手のフィードバックを得て次のアクションを考えることができる普通の青年になることができたのでした。\n\n## まとめ\n\n今回の目的は、システムの設計についてあまり詳しくない人でもクリーンアーキテクチャについてふんわりと理解してもらうことでした。\n達成できたのかどうかわかりませんが、かなりの怪文書になってしまいました。\n\nこの文章を読んで少しでもシステム設計に興味を持って頂けたら嬉しいです。\n",
      "coediting": false,
      "comments_count": 0,
      "created_at": "2021-09-30T00:06:21+09:00",
      "group": null,
      "id": "8f1a0bfe23336972381a",
      "likes_count": 0,
      "private": false,
      "reactions_count": 0,
      "tags": [
          {
              "name": "初心者",
              "versions": []
          },
          {
              "name": "設計",
              "versions": []
          },
          {
              "name": "恋愛",
              "versions": []
          },
          {
              "name": "クリーンアーキテクチャ",
              "versions": []
          }
      ],
      "title": "クリーンアーキテクチャを恋愛で例えてみた",
      "updated_at": "2021-09-30T00:06:21+09:00",
      "url": "https://qiita.com/yamachita0109/items/8f1a0bfe23336972381a",
      "user": {
          "description": "めんどくさがり。タスク消化より楽するToolを作るのが大好きなエンジニア。\r\nWeb開発（Node.js / PHP / Java / Ruby）、Cloud（AWS）、Android（Java / Kotlin）好きです。\r\n\r\nhttps://github.com/yamachita0109/\r\n",
          "facebook_id": "kazumasa.yamashita.14",
          "followees_count": 4,
          "followers_count": 0,
          "github_login_name": "yamachita0109",
          "id": "yamachita0109",
          "items_count": 14,
          "linkedin_id": "",
          "location": "",
          "name": "",
          "organization": "",
          "permanent_id": 300430,
          "profile_image_url": "https://avatars3.githubusercontent.com/u/24501645?v=4",
          "team_only": false,
          "twitter_screen_name": "yamashita0109",
          "website_url": ""
      },
      "page_views_count": null,
      "team_membership": null
  }
]